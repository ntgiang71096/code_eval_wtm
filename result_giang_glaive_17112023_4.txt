Using watermark from extended_watermark_processor
Vocabulary size: 32768
Gamma: 0.3
Delta: 5.0


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    """ Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """

    close_elements = []
    for x, y in zip(numbers, numbers[1:]):
        if abs(x - y) <= threshold:
            close_elements.append((x, y))
    return len(close_elements) > 0
----------------------------------------------------------------


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    def get_distance(a, b):
        return abs(a - b)
    
    return any(get_distance(x, y) <= threshold for x, y in zip(numbers, numbers[1:]))
----------------------------------------------------------------


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    def get_distance(a, b):
        return abs(a - b)
    
    return any(get_distance(x, y) <= threshold for x, y in zip(numbers, numbers[1:]))
----------------------------------------------------------------


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    """ Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """

    close_elements_pair: List[Tuple[float, float]] = []

    for pair, distance in close_elements_pair:
        if distance < threshold:
            close_elements_pair.append((pair, distance))

    if len(close_elements_pair) >= 2:
        return True
    return False
----------------------------------------------------------------


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    def get_distance(x, y):
        return abs(x - y)


    for idx, num in enumerate(numbers):
        for idx2, num2 in enumerate(numbers):
            if idx != idx2:
                distance = get_distance(num, num2)
                if distance < threshold:
                    return True

    return False
----------------------------------------------------------------


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
    for idx, num in enumerate(numbers):
        for idx2, num2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(num - num2)
                if distance < threshold:
                    return True

    return False
----------------------------------------------------------------


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    

----------------------------------------------------------------


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    def get_distance(a, b):
        return abs(a - b)
    
    return any(get_distance(x, y) <= threshold for x, y in zip(numbers, numbers[1:]))
----------------------------------------------------------------


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    
def has_close_elements(numbers: List[float], threshold: float) -> bool:
    

----------------------------------------------------------------


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    
    def get_distance(x, y):
        return abs(x - y)


    for idx, num in enumerate(numbers):
        for idx2, num2 in enumerate(numbers):
            if idx != idx2:
                distance = get_distance(num, num2)
                if distance < threshold:
                    return True

    return False
----------------------------------------------------------------


def separate_paren_groups(paren_string: str) -> List[str]:
    
    def get_value(x):
        if x == :
            return []
        return [y for y in paren_string[1:-1] if y !=  ]


    return [ paren_string[1:-1] for paren_string in  if paren_string[0] ==  ]
----------------------------------------------------------------


def separate_paren_groups(paren_string: str):
    
    def get_value(x):
        if x == :
            value += 1
        else:
            value -= 1
        return value
    value = 0
    result = []
    cur_value = []
    cur_group = []
    for c in paren_string:
        if c == :
            cur_group.append(c)
            cur_value.append(c)
        elif c == :
            value += get_value(cur_value[-1])
            cur_value.pop()
            cur_group.pop()
            value += get_value(cur_value[-1])
            cur_value.pop()
            value += get_value(cur_value[-1])
            cur_value.pop()
            value += get_value(cur_value[-1])
            cur_value.pop()
            value += get_value(cur_value[-1])
            cur_value.pop()
            value += get_value(cur_value[-1])
            cur_value.pop()
            value += get_value(cur_value[-1])
            cur_value.pop()
            value += get_value(cur_value[-1])
            cur_value.pop()
            value += get_value(cur_value[-1])
            cur_value.pop()
            value += get_value(cur_value[-1])
            cur_value.pop()
            value += get_value(cur_value[-1])
            cur_value.pop()
            value += get_value(cur_value[-1])
            cur_value.pop()
            value += get_value(cur_value[-1])
            cur_value.pop()
            value += get_value(cur_value[-1])
            cur_value.pop()
            value += get_value(cur_value[-1])
            cur_value.pop()
            value += get_value(cur_value[-1])
            cur_value.pop()
            value += get_value(cur_value[-1])
            cur_value.pop()
            value += get_value(cur_value[-1])
            cur_value.pop()
            
----------------------------------------------------------------


def separate_paren_groups(paren_string: str) -> List[str]:
    
    def get_value(x):
        if x == :
            return 1
        if x == :
            return -1
        return 0

    def get_group(lst, group):
        value_group = []
        for i, x in enumerate(lst):
            if i != 0 and x == :
                value_group.append((group, get_value(x)))
                group += 1
        return value_group

    value_group = []
    group = 0
    for c in paren_string:
        if c == :
            group += 1
            value_group += get_group(value_group, group)
        if c == :
            value_group += get_group(value_group, group)
            group -= 1

    value_group += get_group(value_group, group)
    return [(group, x) for (group, x) in value_group]
----------------------------------------------------------------


def separate_paren_groups(paren_string: str) -> List[str]:
    
    def get_group(s):
        depth = 0
        group = []
        for c in s:
            if c == :
                depth += 1
                group.append(c)
            else:
                depth -= 1
                group.append(c)
            if depth == 0:
                group.append(c)
                return group

    return [get_group(x) for x in paren_string.split() if x != ]
----------------------------------------------------------------


def separate_paren_groups(paren_string: str) -> List[str]:
    
    def get_value(x):
        if x == :
            return 1
        if x == :
            return -1
        return 0

    def get_group(lst):
        value_stack = []
        res, start, end = [], 0, 0
        for i, c in enumerate(lst):
            if c == :
                value_stack.append(get_value(c))
                if value_stack[-1] == 0:
                    if i != end:
                        res.append(lst[start : i])
                        start, end = i, i
                elif value_stack[-1] == 1:
                    if i != start:
                        res.append(lst[i : end])
                        start, end = end, end
                elif value_stack[-1] == -1:
                    if i != start:
                        res.append(lst[start : i])
                        value_stack[:]= []
                value_stack[:]= []

        if i != end:
            res.append(lst[start : i])

        return res


def separate_paren_groups(paren_string: str) -> List[str]:
    
    return get_group(lst = paren_string.replace( , ))
----------------------------------------------------------------


def separate_paren_groups(paren_string: str) -> List[str]:
    
    def get_group(s):
        
        depth = 0
        group = []
        for c in s:
            if c == :
                depth += 1
                group.append(c)
            else:
                depth -= 1
                group.append(c)
            if depth == 0:
                group.append(c)
                return group

    return [ get_group(x) for x in paren_string.split() if x != ]
----------------------------------------------------------------


def separate_paren_groups(paren_string: str):
    
    def get_value(s):
        if s.isdigit():
            return int(s)
        return None

    def get_open_paren_value():
        value = get_value(paren_string[1])
        if value is None:
            return None
        if paren_string[0] == "(":
            if value == paren_value:
                return paren_value
        return None

    def get_close_paren_value():
        value = get_value(paren_string[len(paren_string)-1])
        if value is None:
            return None
        if paren_string[len(paren_string)-1] == ")":
            if value == paren_value:
                return paren_value
        return None
        
    def get_all_value():
        value_stack = []
        i = 2
        while i < len(paren_string):
            if paren_string[i] == "(":
                value_stack.append(get_open_paren_value())
            elif paren_string[i] == ")":
                value_stack.append(get_close_paren_value())
            i += 1

        return value_stack

    return get_all_value()
----------------------------------------------------------------


def separate_paren_groups(paren_string: str) -> List[str]:
    
    def get_value(x):
        if x == :
            return []
        return [y for y in paren_string[1:-1] if y !=  ]
    
    return [ paren_string[1:-1] for paren_string in  if paren_string[0] ==  ]
----------------------------------------------------------------


def separate_paren_groups(paren_string: str) -> List[str]:
    
    def get_group(s):
        depth = 0
        group = []
        for c in s:
            if c == :
                depth += 1
                group.append(c)
            else:
                depth -= 1
                group.append(c)
            if depth == 0:
                group.append(c)
                return group

    return [ get_group(x) for x in paren_string.split() if x != ]
----------------------------------------------------------------


def separate_paren_groups(paren_string: str) -> List[str]:
    
    def get_group(s):
        
        depth = 0
        group = []
        for c in s:
            if c == :
                depth += 1
                group.append(c)
            else:
                depth -= 1
                group.append(c)
            if depth == 0:
                group.append(c)
                return group

    return [ get_group(x) for x in paren_string.split() if x != ]
----------------------------------------------------------------


def truncate_number(number: float) -> float:
    
    return number % 1.0
----------------------------------------------------------------


def truncate_number(number: float) -> float:
    
    return number % 1.0
----------------------------------------------------------------


def truncate_number(number: float) -> float:
    
    return number % 1.0
----------------------------------------------------------------


def truncate_number(number: float) -> float:
    
    return number % 1.0
----------------------------------------------------------------


def truncate_number(number: float) -> float:
    
    return number % 1.0
----------------------------------------------------------------


def truncate_number(number: float) -> float:
    
    return number % 1.0
----------------------------------------------------------------


def truncate_number(number: float) -> float:
    
    return number % 1.0
----------------------------------------------------------------


def truncate_number(number: float) -> float:
    
    return number % 1.0
----------------------------------------------------------------


def truncate_number(number: float) -> float:
    
    return number % 1.0
----------------------------------------------------------------


def truncate_number(number: float) -> float:
    
    return number % 1.0
----------------------------------------------------------------


def below_zero(operations: List[int]) -> bool:
    
    balance = 0
    for op in operations:
        balance += op
        if balance < 0:
            return True
    return False
----------------------------------------------------------------


def below_zero(operations: List[int]) -> bool:
    
    balance = 0
    for op in operations:
        balance += op
        if balance < 0:
            return True
    return False
----------------------------------------------------------------


def below_zero(operations: List[int]) -> bool:
    
    balance = 0
    for op in operations:
        balance += op
        if balance < 0:
            return True
    return False
----------------------------------------------------------------


def below_zero(operations: List[int]) -> bool:
    
    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
----------------------------------------------------------------


def below_zero(operations: List[int]) -> bool:
    
    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
----------------------------------------------------------------


def below_zero(operations: List[int]) -> bool:
    
    balance = 0
    for op in operations:
        balance += op
        if balance < 0:
            return True
    return False
----------------------------------------------------------------


def below_zero(operations: List[int]) -> bool:
    
    balance = 0
    for op in operations:
        balance += op
        if balance < 0:
            return True
    return False
----------------------------------------------------------------


def below_zero(operations: List[int]) -> bool:
    
    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
----------------------------------------------------------------


def below_zero(operations: List[int]) -> bool:
    
    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
----------------------------------------------------------------


def below_zero(operations: List[int]) -> bool:
    
    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
----------------------------------------------------------------


def mean_absolute_deviation(numbers: List[float]) -> float:
    
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
----------------------------------------------------------------


def mean_absolute_deviation(numbers: List[float]) -> float:
    
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
----------------------------------------------------------------


def mean_absolute_deviation(numbers: List[float]) -> float:
    
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
----------------------------------------------------------------


def mean_absolute_deviation(numbers: List[float]) -> float:
    
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
----------------------------------------------------------------


def mean_absolute_deviation(numbers: List[float]) -> float:
    
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
----------------------------------------------------------------


def mean_absolute_deviation(numbers: List[float]) -> float:
    
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
----------------------------------------------------------------


def mean_absolute_deviation(numbers: List[float]) -> float:
    
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
----------------------------------------------------------------


def mean_absolute_deviation(numbers: List[float]) -> float:
    
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
----------------------------------------------------------------


def mean_absolute_deviation(numbers: List[float]) -> float:
    
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
----------------------------------------------------------------


def mean_absolute_deviation(numbers: List[float]) -> float:
    
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
----------------------------------------------------------------


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    
    if not numbers:
        return []

    res, nxt = [], delimeter

    for x in numbers[:-1]:
        res.append(x)
        res.append(nxt)
        
    res.append(numbers[-1])

    return res
----------------------------------------------------------------


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    
    if not numbers:
        return []

    res, nxt = [], delimeter

    for x in numbers[:-1]:
        res.append(x)
        res.append(nxt)
        
    res.append(numbers[-1])

    return res
----------------------------------------------------------------


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    
    if not numbers:
        return []

    res, nxt = [], delimeter

    for x in numbers[:-1]:
        res.append(x)
        res.append(nxt)
        
    res.append(numbers[-1])

    return res
----------------------------------------------------------------


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    
    if not numbers:
        return []

    res, last = [], numbers[0]

    for n in numbers[1:]:
        res.append(delimeter)
        res.append(n)
        last = delimeter

    res.append(last)
    return res
----------------------------------------------------------------


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    
    if not numbers:
        return []

    res, nxt = [], delimeter

    for x in numbers[:-1]:
        res.append(x)
        res.append(nxt)
        
    res.append(numbers[-1])

    return res
----------------------------------------------------------------


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    
    if not numbers:
        return []

    res, nxt = [], delimeter

    for x in numbers[:-1]:
        res.append(x)
        res.append(nxt)
        
    res.append(numbers[-1])

    return res
----------------------------------------------------------------


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    
    if not numbers:
        return []

    res, last = [], numbers[0]

    for n in numbers[1:]:
        res.append(delimeter)
        res.append(n)
        last = delimeter

    res.append(last)
    return res
----------------------------------------------------------------


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    
    if not numbers:
        return []

    res, nxt = [], delimeter

    for x in numbers[:-1]:
        res.append(x)
        res.append(nxt)
        
    res.append(numbers[-1])

    return res
----------------------------------------------------------------


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    
    if not numbers:
        return []

    res, last = [], numbers[0]

    for n in numbers[1:]:
        res.append(delimeter)
        res.append(n)
        last = delimeter

    res.append(last)
    return res
----------------------------------------------------------------


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    
    if not numbers:
        return []

    res, last = [], numbers[0]

    for n in numbers[1:]:
        res.append(delimeter)
        res.append(n)
        last = delimeter

    if last != delimeter:
        res.append(delimeter)

    return res
----------------------------------------------------------------


def parse_nested_parens(paren_string: str):
    
    def parse_paren_group(s):
        
        def parse_inner_paren_group(s):
            depth = 0
            max_depth = 0
            for c in s:
                if c == :
                    depth += 1
                    max_depth = max(max_depth, depth)
                else:
                    depth -= 1

            return max_depth

        return parse_inner_paren_group(s)

    return [parse_paren_group(x) for x in paren_string.split() if x != ]
----------------------------------------------------------------


def parse_nested_parens(paren_string: str):
    
    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == :
                depth += 1
                max_depth = max(max_depth, depth)
            else:
                depth -= 1

        return max_depth
    
    return [parse_paren_group(x) for x in paren_string.split() if x != ]
----------------------------------------------------------------


def parse_nested_parens(paren_string: str):
    
    def parse_paren_group(s):
        
        def parse_inner_paren_group(s):
            max_depth = 0
            for c in s:
                if c == :
                    max_depth += 1
                elif c == :
                    max_depth -= 1
                if max_depth < 0:
                    max_depth = 0
            return max_depth
        return max(parse_inner_paren_group(x) for x in s.split())
----------------------------------------------------------------


def parse_nested_parens(paren_string: str) -> List[int]:
    
    def parse_paren_group(s):
        
        def parse_inner_paren_group(s):
            
            def parse_whitespace(s):

                depth += 1
                if (depth < 2):
                    parse_whitespace(s)

                depth -= 1
                if (depth == 2):
                    parse_paren_group(s)

            depth = 0
            parse_whitespace(s)
            if (s[-1] == ):
                depth += 1
                parse_inner_paren_group(s[:-1])
                depth -= 1
                if (depth == 2):
                    parse_paren_group(s[:-1])


        depth = 0
        parse_whitespace(s)
        if (s[-1] == ):
            depth += 1
            parse_paren_group(s[:-1])
            depth -= 1
            if (depth == 2):
                parse_paren_group(s[:-1])


    return []
----------------------------------------------------------------


def parse_nested_parens(paren_string: str):
    
    def parse_paren_group(s):
        
        def parse_inner_paren_group(s):
            max_depth = 0
            for c in s:
                if c == :
                    max_depth += 1
                elif c == :
                    max_depth -= 1
                if max_depth < 0:
                    max_depth = 0
            return max_depth
        return max(parse_inner_paren_group(x) for x in s.split())
----------------------------------------------------------------


def parse_nested_parens(paren_string: str):
    
    def parse_paren_group(s):
        
        def parse_inner_paren_group(s):
            max_depth = 0
            for c in s:
                if c == :
                    max_depth += 1
                elif c == :
                    max_depth -= 1
                if max_depth < 0:
                    max_depth = 0
            return max_depth
        return max(parse_inner_paren_group(x) for x in s.split())
----------------------------------------------------------------


def parse_nested_parens(paren_string: str):
    
    def parse_paren_group(s):
        depth, max_depth = 0, 0
        for c in s:
            if c == :
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1
----------------------------------------------------------------


def parse_nested_parens(paren_string: str):
    
    def parse_paren_group(s):
        
        def parse_inner_paren_group(s):
            
            def parse_whitespace(s):

                depth += 1
                if (depth < 2):
                    parse_whitespace(s)

                depth -= 1
                if (depth == 2):
                    parse_paren_group(s)

            depth = 0
            parse_whitespace(s)
            if (s[-1] == ):
                depth += 1
                parse_inner_paren_group(s[:-1])
                depth -= 1
                parse_paren_group(s[:-1])


        depth = 0
        parse_whitespace(paren_string)
        if (paren_string[0] == ):
            depth += 1
            parse_paren_group(paren_string[1:])
            depth -= 1
            parse_paren_group(paren_string[1:])
        return depth
    
    return [parse_paren_group(x) for x in paren_string.split() if x != ]
----------------------------------------------------------------


def parse_nested_parens(paren_string: str):
    
    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == :
                depth += 1
                max_depth = max(max_depth, depth)
            else:
                depth -= 1
----------------------------------------------------------------


def parse_nested_parens(paren_string: str):
    
    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == :
                depth += 1
                max_depth = max(max_depth, depth)
            else:
                depth -= 1

        return max_depth
    
    return [parse_paren_group(x) for x in paren_string.split() if x != ]
----------------------------------------------------------------


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    
    return [x for x in strings if substring in x]
----------------------------------------------------------------


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    
    return [x for x in strings if substring in x]
----------------------------------------------------------------


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    
    return [x for x in strings if substring in x]
----------------------------------------------------------------


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    
    return [x for x in strings if substring in x]
----------------------------------------------------------------


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    
    return [x for x in strings if substring in x]
----------------------------------------------------------------


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    
    return [x for x in strings if substring in x]
----------------------------------------------------------------


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    
    return [x for x in strings if substring in x]
----------------------------------------------------------------


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    
    return [x for x in strings if substring in x]
----------------------------------------------------------------


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    
    return [x for x in strings if substring in x]
----------------------------------------------------------------


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    
    return [x for x in strings if substring in x]
----------------------------------------------------------------


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    
    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    
    return sum_value, prod_value
----------------------------------------------------------------


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    
    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    
    return sum_value, prod_value
----------------------------------------------------------------


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    
    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    
    return sum_value, prod_value
----------------------------------------------------------------


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    
    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    
    return sum_value, prod_value
----------------------------------------------------------------


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    
    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    
    return sum_value, prod_value
----------------------------------------------------------------


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    
    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    
    return sum_value, prod_value
----------------------------------------------------------------


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    
    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    
    return sum_value, prod_value
----------------------------------------------------------------


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    
    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    
    return sum_value, prod_value
----------------------------------------------------------------


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    
    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    
    return sum_value, prod_value
----------------------------------------------------------------


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    
    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    
    return sum_value, prod_value
----------------------------------------------------------------


def rolling_max(numbers: List[int]) -> List[int]:
    
    max_elements: List[int] = []
    if len(numbers) == 0:
        return []

    for n in numbers:
        if len(max_elements) == 0:
            max_elements.append(n)
        else:
            max_elements.append(max(max_elements[-1], n))
            
    return max_elements
----------------------------------------------------------------


def rolling_max(numbers: List[int]) -> List[int]:
    
    if not numbers:
        return []

    maxx = numbers[0]
    maxes = []

    for n in numbers[1:]:
        if n > maxx:
            maxx = n
        maxes.append(maxx)
    return maxes
----------------------------------------------------------------


def rolling_max(numbers: List[int]) -> List[int]:
    
    max_element = None
    max_value = None
    
    for n in numbers:
        if max_value is None:
            max_value = n
        else:
            max_value = max(max_value, n)
            
        if max_value > max_element:
            max_element = max_value
            
    if max_element is None:
        return []
    else:
        return [max_element]
----------------------------------------------------------------


def rolling_max(numbers: List[int]) -> List[int]:
    
    if not numbers:
        return []

    maxx = numbers[0]
    maxes = []

    for n in numbers[1:]:
        if n > maxx:
            maxx = n
        maxes.append(maxx)
    return maxes
----------------------------------------------------------------


def rolling_max(numbers: List[int]) -> List[int]:
    
    if not numbers:
        return []

    maxx = numbers[0]
    maxes = [maxx]
    for n in numbers[1:]:
        if n > maxx:
            maxx = n
            maxes.append(maxx)
        else:
            maxes.append(max(maxx, n))
            maxx = max(maxx, n)
    return maxes
----------------------------------------------------------------


def rolling_max(numbers: List[int]) -> List[int]:
    
    if not numbers:
        return []

    maxx = numbers[0]
    maxes = []

    for n in numbers[1:]:
        if n > maxx:
            maxx = n
        maxes.append(maxx)
    return maxes
----------------------------------------------------------------


def rolling_max(numbers: List[int]) -> List[int]:
    
    if not numbers:
        return []

    maxx = numbers[0]
    maxes = []

    for n in numbers[1:]:
        if n > maxx:
            maxx = n
        maxes.append(maxx)
    return maxes
----------------------------------------------------------------


def rolling_max(numbers: List[int]) -> List[int]:
    
    if not numbers:
        return []

    maxx = numbers[0]
    maxes = []

    for n in numbers[1:]:
        if n > maxx:
            maxx = n
        maxes.append(maxx)
    return maxes
----------------------------------------------------------------


def rolling_max(numbers: List[int]) -> List[int]:
    
    if not numbers:
        return []

    maxx = numbers[0]
    maxes = []

    for n in numbers[1:]:
        if n > maxx:
            maxx = n
        maxes.append(maxx)
    return maxes
----------------------------------------------------------------


def rolling_max(numbers: List[int]) -> List[int]:
    
    max_value = None
    max_index = None
    
    value_index = 0
    for value, index in zip(numbers, range(len(numbers))):
        if max_value is None:
            max_value = value
            max_index = index
        else:
            if value > max_value:
                max_value = value
                max_index = index
            
    if value_index == len(numbers):
        return []
    else:
        return [max_value for _ in range(value_index + 1)]
----------------------------------------------------------------


def is_palindrome(string: str) -> bool:
    
def make_palindrome(string: str) -> str:
    
def get_suffix(string: str) -> str:
    
def get_prefix(string: str) -> str:
----------------------------------------------------------------


def is_palindrome(string: str) -> bool:
    
def make_palindrome(string: str) -> str:
    
def get_suffix(string: str) -> str:
    
def get_prefix(string: str) -> str:
----------------------------------------------------------------


def is_palindrome(string: str) -> bool:
    
def make_palindrome(string: str) -> str:
    
def get_suffix(string: str) -> str:
    
def get_prefix(string: str) -> str:
----------------------------------------------------------------


def is_palindrome(string: str) -> bool:
    
def make_palindrome(string: str) -> str:
    
def get_suffix(string: str) -> str:
    
def get_prefix(string: str) -> str:
----------------------------------------------------------------


def is_palindrome(string: str) -> bool:
    
def make_palindrome(string: str) -> str:
    
def get_suffix(string: str) -> str:
    
def get_prefix(string: str) -> str:
    
def get_length(string: str) -> int:
    
def get_reverse(string: str) -> str:
    
def get_middle(string: str) -> str:
    
def get_suffixes(string: str) -> list:
    
def get_all_palindromes(length: int) -> list:
    
def get_all_palindromes(lengths: list) -> list:
    
def get_all_palindromes(lengths: list, limit: int) -> list:
    
def get_all_palindromes(lengths: list, limit: int, filter_function: Callable[[str], bool]) -> list:
    
def get_all_palindromes(lengths: list, limit: int, filter_function: Callable[[str], bool], sort_function: Callable[[tuple], bool]) -> list:
    
def get_all_palindromes(lengths: list, limit: int, filter_function: Callable[[str], bool], sort_function: Callable[[tuple], bool], key=lambda x: x[0]) -> list:
    
def get_all_palindromes(lengths: list, limit: int, filter_function: Callable[[str], bool], sort_function: Callable[[tuple], bool], key=lambda x: x[0]) -> list:
    
def get_all_palindromes(lengths: list, limit: int, filter_function: Callable[[str], bool], sort_function: Callable[[tuple], bool], key=lambda x: x[0]) -> list:
    
def get_all_palindromes(lengths: list, limit: int, filter_function: Callable[[str], bool], sort_function: Callable[[tuple], bool], key=lambda x: x[0]) 
----------------------------------------------------------------


def is_palindrome(string: str) -> bool:
    
def make_palindrome(string: str) -> str:
    
def get_suffix(string: str) -> str:
    
def get_prefix(string: str) -> str:
----------------------------------------------------------------


def is_palindrome(string: str) -> bool:
    
def make_palindrome(string: str) -> str:
    
def get_suffix(string: str) -> str:
    
def get_prefix(string: str) -> str:
----------------------------------------------------------------


def is_palindrome(string: str) -> bool:
    
def make_palindrome(string: str) -> str:
    
def get_suffix(string: str) -> str:
    
def get_prefix(string: str) -> str:
----------------------------------------------------------------


def is_palindrome(string: str) -> bool:
    
def make_palindrome(string: str) -> str:
    
def get_suffix(string: str) -> str:
    
def get_prefix(string: str) -> str:
----------------------------------------------------------------


def is_palindrome(string: str) -> bool:
    
def make_palindrome(string: str) -> str:
    
def get_suffix(string: str) -> str:
    
def get_prefix(string: str) -> str:
----------------------------------------------------------------


def string_xor(a: str, b: str) -> str:
    
    def xor(i, j):
        if i == j:
            return 
        else:
            return 

    return .join(xor(x, y) for x, y in zip(a, b))
----------------------------------------------------------------


def string_xor(a: str, b: str) -> str:
    
    def xor(i, j):
        if i == j:
            return 
        else:
            return 

    return .join(xor(x, y) for x, y in zip(a, b))
----------------------------------------------------------------


def string_xor(a: str, b: str) -> str:
    
    def xor(i, j):
        if i == j:
            return 
        else:
            return 

    return .join(xor(x, y) for x, y in zip(a, b))
----------------------------------------------------------------


def string_xor(a: str, b: str) -> str:
    
    def xor(i, j):
        if i == j:
            return 
        else:
            return 
    return .join(xor(x, y) for x, y in zip(a, b))
----------------------------------------------------------------


def string_xor(a: str, b: str) -> str:
    
    def xor(i, j):
        if i == j:
            return 
        else:
            return 

    return .join(xor(x, y) for x, y in zip(a, b))
----------------------------------------------------------------


def string_xor(a: str, b: str) -> str:
    
    def xor(i, j):
        if i == j:
            return 
        else:
            return 

    return .join(xor(x, y) for x, y in zip(a, b))
----------------------------------------------------------------


def string_xor(a: str, b: str) -> str:
    
    def xor(i, j):
        if i == j:
            return 
        else:
            return 

    return .join(xor(x, y) for x, y in zip(a, b))
----------------------------------------------------------------


def string_xor(a: str, b: str) -> str:
    
    def xor(i, j):
        if i == j:
            return 
        else:
            return 

    return .join(xor(x, y) for x, y in zip(a, b))
----------------------------------------------------------------


def string_xor(a: str, b: str) -> str:
    
    def xor(i, j):
        if i == j:
            return 
        else:
            return 

    return .join(xor(x, y) for x, y in zip(a, b))
----------------------------------------------------------------


def string_xor(a: str, b: str) -> str:
    
    def xor(i, j):
        if i == j:
            return 
        else:
            return 

    return .join(xor(x, y) for x, y in zip(a, b))
----------------------------------------------------------------


def longest(strings: List[str]) -> Optional[str]:
    
    if not strings:
        return None

    maxlen = max((len(x) for x in strings), key=len)
    for s in strings:
        if len(s) == maxlen:
            return s
----------------------------------------------------------------


def longest(strings: List[str]) -> Optional[str]:
    
    if not strings:
        return None

    maxlen = max((len(x) for x in strings), key=len)
    for s in strings:
        if len(s) == maxlen:
            return s
----------------------------------------------------------------


def longest(strings: List[str]) -> Optional[str]:
    
    if not strings:
        return None

    maxlen = max((len(x) for x in strings), key=len)
    for s in strings:
        if len(s) == maxlen:
            return s
----------------------------------------------------------------


def longest(strings: List[str]) -> Optional[str]:
    
    if not strings:
        return None

    maxlen = max((len(x) for x in strings), key=len)
    for s in strings:
        if len(s) == maxlen:
            return s
----------------------------------------------------------------


def longest(strings: List[str]) -> Optional[str]:
    
    if not strings:
        return None

    maxlen = max((len(x) for x in strings), key=len)
    for s in strings:
        if len(s) == maxlen:
            return s
----------------------------------------------------------------


def longest(strings: List[str]) -> Optional[str]:
    
    if not strings:
        return None

    maxlen = max((len(x) for x in strings), key=len)
    for s in strings:
        if len(s) == maxlen:
            return s
----------------------------------------------------------------


def longest(strings: List[str]) -> Optional[str]:
    
    if not strings:
        return None

    maxlen = max((len(x) for x in strings), key=len)
    for s in strings:
        if len(s) == maxlen:
            return s
----------------------------------------------------------------


def longest(strings: List[str]) -> Optional[str]:
    
    if not strings:
        return None

    maxlen = max((len(x) for x in strings), key=len)
    for s in strings:
        if len(s) == maxlen:
            return s
----------------------------------------------------------------


def longest(strings: List[str]) -> Optional[str]:
    
    if not strings:
        return None

    maxlen = max((len(x) for x in strings), key=len)
    for s in strings:
        if len(s) == maxlen:
            return s
----------------------------------------------------------------


def longest(strings: List[str]) -> Optional[str]:
    
    if not strings:
        return None

    maxlen = max((len(x) for x in strings), key=len)
    for s in strings:
        if len(s) == maxlen:
            return s
----------------------------------------------------------------


def greatest_common_divisor(a: int, b: int) -> int:
    
    def gcd(x, y):
        
        while x != 0:
            x, y = y % x, x
        return y

    return gcd(a, b)
----------------------------------------------------------------


def greatest_common_divisor(a: int, b: int) -> int:
    
    def gcd(x, y):
        
        while x != 0:
            x, y = y % x, x
        return y

    return gcd(a, b)
----------------------------------------------------------------


def greatest_common_divisor(a: int, b: int) -> int:
    
    def divide(a, b):
        if b == 0:
            return a
        return divide(b, a % b)
    return divide(a, b)
----------------------------------------------------------------


def greatest_common_divisor(a: int, b: int) -> int:
    
    def gcd(x, y):
        
        while x != 0:
            x, y = y % x, x
        return y

    return gcd(a, b)
----------------------------------------------------------------


def greatest_common_divisor(a: int, b: int) -> int:
    
    def gcd(x, y):
        
        while x != 0:
            x, y = y % x, x
        return y

    return gcd(a, b)
----------------------------------------------------------------


def greatest_common_divisor(a: int, b: int) -> int:
    
    def gcd(x, y):
        
        while x != 0:
            x, y = y % x, x
        return y

    return gcd(a, b)
----------------------------------------------------------------


def greatest_common_divisor(a: int, b: int) -> int:
    
    def gcd(x, y):
        
        while x != 0:
            x, y = y % x, x
        return y

    return gcd(a, b)
----------------------------------------------------------------


def greatest_common_divisor(a: int, b: int) -> int:
    
    def gcd(x, y):
        
        while x != 0:
            x, y = y % x, x
        return y

    return gcd(a, b)
----------------------------------------------------------------


def greatest_common_divisor(a: int, b: int) -> int:
    
    def gcd(x, y):
        
        while x != 0:
            x, y = y % x, x
        return y

    return gcd(a, b)
----------------------------------------------------------------


def greatest_common_divisor(a: int, b: int) -> int:
    
    def gcd(x, y):
        
        while x != 0:
            x, y = y % x, x
        return y

    return gcd(a, b)
----------------------------------------------------------------


def all_prefixes(string: str) -> List[str]:
    
    return [prefix for prefix in string]
----------------------------------------------------------------


def all_prefixes(string: str) -> List[str]:
    
    return [prefix for prefix in string]
----------------------------------------------------------------


def all_prefixes(string: str) -> List[str]:
    
    if not string:
        return []

    res, txt = [], string[1:]
    while txt:
        res.append(txt)
        txt = txt[1:]
    return res
----------------------------------------------------------------


def all_prefixes(string: str) -> List[str]:
    
    if not string:
        return []

    res, txt = [], string[1:]
    while txt:
        res.append(txt)
        txt = txt[1:]
    return res
----------------------------------------------------------------


def all_prefixes(string: str) -> List[str]:
    
    return [prefix for prefix in string]
----------------------------------------------------------------


def all_prefixes(string: str) -> List[str]:
    
    return [prefix for prefix in string]
----------------------------------------------------------------


def all_prefixes(string: str) -> List[str]:
    
    return [prefix for prefix in string]
----------------------------------------------------------------


def all_prefixes(string: str) -> List[str]:
    
    return [prefix for prefix in string]
----------------------------------------------------------------


def all_prefixes(string: str) -> List[str]:
    
    return [prefix for prefix in string]
----------------------------------------------------------------


def all_prefixes(string: str) -> List[str]:
    
    if not string:
        return []

    res, txt = [], string[1:]
    while txt:
        res.append(txt)
        txt = txt[1:]
    return res
----------------------------------------------------------------


def string_sequence(n: int) -> str:
    
    return .join(str(x) for x in range(n + 1))
----------------------------------------------------------------


def string_sequence(n: int) -> str:
    
    return .join(str(x) for x in range(n + 1))
----------------------------------------------------------------


def string_sequence(n: int) -> str:
    
    return .join(str(x) for x in range(n + 1))
----------------------------------------------------------------


def string_sequence(n: int) -> str:
    
    return .join(str(x) for x in range(n + 1))
----------------------------------------------------------------


def string_sequence(n: int) -> str:
    
    return .join(str(x) for x in range(n + 1))
----------------------------------------------------------------


def string_sequence(n: int) -> str:
    
    return .join(str(x) for x in range(n + 1))
----------------------------------------------------------------


def string_sequence(n: int) -> str:
    
    return .join(str(x) for x in range(n + 1))
----------------------------------------------------------------


def string_sequence(n: int) -> str:
    
    return .join(str(x) for x in range(n + 1))
----------------------------------------------------------------


def string_sequence(n: int) -> str:
    
    return .join(str(x) for x in range(n + 1))
----------------------------------------------------------------


def string_sequence(n: int) -> str:
    
    return .join(str(x) for x in range(n + 1))
----------------------------------------------------------------


def count_distinct_characters(string: str) -> int:
    
    return len(set(string.lower()))
----------------------------------------------------------------


def count_distinct_characters(string: str) -> int:
    
    return len(set(string.lower()))
----------------------------------------------------------------


def count_distinct_characters(string: str) -> int:
    
    return len(set(string.lower()))
----------------------------------------------------------------


def count_distinct_characters(string: str) -> int:
    
    return len(set(string.lower()))
----------------------------------------------------------------


def count_distinct_characters(string: str) -> int:
    
    return len(set(string.lower()))
----------------------------------------------------------------


def count_distinct_characters(string: str) -> int:
    
    return len(set(string.lower()))
----------------------------------------------------------------


def count_distinct_characters(string: str) -> int:
    
    return len(set(string.lower()))
----------------------------------------------------------------


def count_distinct_characters(string: str) -> int:
    
    return len(set(string.lower()))
----------------------------------------------------------------


def count_distinct_characters(string: str) -> int:
    
    return len(set(string.lower()))
----------------------------------------------------------------


def count_distinct_characters(string: str) -> int:
    
    return len(set(string.lower()))
----------------------------------------------------------------


def parse_music(music_string: str) -> List[int]:
    
    note_map = {
        : 4,
        : 2,
        : 1
    }
    return [note_map[x] for x in music_string.split() if x != ]
----------------------------------------------------------------


def parse_music(music_string: str) -> List[int]:
    
    note_map = {
        : 4,
        : 2,
        : 1
    }
    return [note_map[x] for x in music_string.split() if x != ]
----------------------------------------------------------------


def parse_music(music_string: str) -> List[int]:
    
    note_map = {
        : 4,
        : 2,
        : 1
    }
    return [note_map[x] for x in music_string.split() if x]
----------------------------------------------------------------


def parse_music(music_string: str) -> List[int]:
    
    note_map = {
        : 4,
        : 2,
        : 1
    }
    return [note_map[x] for x in music_string.split() if x != ]
----------------------------------------------------------------


def parse_music(music_string: str) -> List[int]:
    
    note_map = {
        : 4,
        : 2,
        : 1
    }
    return [note_map[x] for x in music_string.split() if x != ]
----------------------------------------------------------------


def parse_music(music_string: str) -> List[int]:
    
    note_map = {
        : 4,
        : 2,
        : 1
    }
    return [note_map[x] for x in music_string.split() if x != 'o' and x]
----------------------------------------------------------------


def parse_music(music_string: str) -> List[int]:
    
    note_map = {
        : 4,
        : 2,
        : 1
    }
    return [note_map[x] for x in music_string.split() if x]
----------------------------------------------------------------


def parse_music(music_string: str) -> List[int]:
    
    note_map = {
        : 4,
        : 2,
        : 1
    }
    return [note_map[x] for x in music_string.split() if x != 'o' and x]
----------------------------------------------------------------


def parse_music(music_string: str) -> List[int]:
    
    note_map = {
        : 4,
        : 2,
        : 1
    }
    return [note_map[x] for x in music_string.split() if x != 'o' and x]
----------------------------------------------------------------


def parse_music(music_string: str) -> List[int]:
    
    note_map = {
        : 4,
        : 2,
        : 1
    }
    return [note_map[x] for x in music_string.split() if x != 'o' and x]
----------------------------------------------------------------


def how_many_times(string: str, substring: str) -> int:
    
    def contains(x):
        return substring in x


    return sum(contains(x) for x in string.split())
----------------------------------------------------------------


def how_many_times(string: str, substring: str) -> int:
    
    def check(i):
        if string[i:i+len(substring)] == substring:
            cnt += 1

    cnt = 0
    for i in range(len(string) - len(substring) + 1):
        check(i)
    return cnt
----------------------------------------------------------------


def how_many_times(string: str, substring: str) -> int:
    
    def check(i):
        if string[i:i+len(substring)] == substring:
            return check(i+len(substring))+1
        return 0

    return check(0)
----------------------------------------------------------------


def how_many_times(string: str, substring: str) -> int:
    
    def get_occurrence(s, substring):
        return s.count(substring)


    return get_occurrence(string, substring)
----------------------------------------------------------------


def how_many_times(string: str, substring: str) -> int:
    
    def get_occurrence(s, substring):
        return s.count(substring)
    
    return get_occurrence(string, substring)
----------------------------------------------------------------


def how_many_times(string: str, substring: str) -> int:
    
    return sum(substring in x for x in string.split())
----------------------------------------------------------------


def how_many_times(string: str, substring: str) -> int:
    
    def check(i):
        if string[i : i + len(substring)] == substring:
            cnt += 1

    cnt = 0
    for i in range(len(string) - len(substring) + 1):
        check(i)
    return cnt
----------------------------------------------------------------


def how_many_times(string: str, substring: str) -> int:
    
    def get_occurrence(s, substring):
        return s.count(substring)
    
    return get_occurrence(string, substring)
----------------------------------------------------------------


def how_many_times(string: str, substring: str) -> int:
    
    return sum(substring in x for x in string.split())
----------------------------------------------------------------


def how_many_times(string: str, substring: str) -> int:
    
    def check(i):
        if string[i:i+len(substring)] == substring:
            cnt += 1

    cnt = 0
    for i in range(len(string) - len(substring) + 1):
        check(i)
    return cnt
----------------------------------------------------------------


def sort_numbers(numbers: str) -> str:
    
    value_to_name = {
        0: 'zero',
        1: 'one',
        2: 'two',
        3: 'three',
        4: 'four',
        5: 'five',
        6: 'six',
        7: 'seven',
        8: 'eight',
        9: 'nine'
    }
    return .join(sorted(numbers.split(), key=lambda x: value_to_name[x]))
----------------------------------------------------------------


def sort_numbers(numbers: str) -> str:
    
    value_to_name = {
        0: 'zero',
        1: 'one',
        2: 'two',
        3: 'three',
        4: 'four',
        5: 'five',
        6: 'six',
        7: 'seven',
        8: 'eight',
        9: 'nine'
    }
    return .join(sorted(numbers.split(), key=lambda x: value_to_name[x]))
----------------------------------------------------------------


def sort_numbers(numbers: str) -> str:
    
    value_to_name = {
        0: 'zero',
        1: 'one',
        2: 'two',
        3: 'three',
        4: 'four',
        5: 'five',
        6: 'six',
        7: 'seven',
        8: 'eight',
        9: 'nine'
    }
    return .join(sorted(numbers.split(), key=lambda x: value_to_name[x]))
----------------------------------------------------------------


def sort_numbers(numbers: str) -> str:
    
    value_to_name = {
        0: 'zero',
        1: 'one',
        2: 'two',
        3: 'three',
        4: 'four',
        5: 'five',
        6: 'six',
        7: 'seven',
        8: 'eight',
        9: 'nine'
    }
    return .join(sorted(numbers.split(), key=lambda x: value_to_name[x]))
----------------------------------------------------------------


def sort_numbers(numbers: str) -> str:
    
    value_to_name = {
        0: 'zero',
        1: 'one',
        2: 'two',
        3: 'three',
        4: 'four',
        5: 'five',
        6: 'six',
        7: 'seven',
        8: 'eight',
        9: 'nine'
    }
    return .join(sorted(numbers.split(), key=lambda x: value_to_name[x]))
----------------------------------------------------------------


def sort_numbers(numbers: str) -> str:
    
    value_to_name = {
        0: 'zero',
        1: 'one',
        2: 'two',
        3: 'three',
        4: 'four',
        5: 'five',
        6: 'six',
        7: 'seven',
        8: 'eight',
        9: 'nine'
    }
    return .join(sorted(numbers.split(), key=lambda x: value_to_name[x]))
----------------------------------------------------------------


def sort_numbers(numbers: str) -> str:
    
    value_to_name = {
        0: 'zero',
        1: 'one',
        2: 'two',
        3: 'three',
        4: 'four',
        5: 'five',
        6: 'six',
        7: 'seven',
        8: 'eight',
        9: 'nine'
    }
    return .join(sorted(numbers.split(), key=lambda x: value_to_name[x]))
----------------------------------------------------------------


def sort_numbers(numbers: str) -> str:
    
    value_to_name = {
        0: 'zero',
        1: 'one',
        2: 'two',
        3: 'three',
        4: 'four',
        5: 'five',
        6: 'six',
        7: 'seven',
        8: 'eight',
        9: 'nine'
    }
    return .join(sorted(numbers.split(), key=lambda x: value_to_name[x]))
----------------------------------------------------------------


def sort_numbers(numbers: str) -> str:
    
    value_to_name = {
        0: 'zero',
        1: 'one',
        2: 'two',
        3: 'three',
        4: 'four',
        5: 'five',
        6: 'six',
        7: 'seven',
        8: 'eight',
        9: 'nine'
    }
    return .join(sorted(numbers.split(), key=lambda x: value_to_name[x]))
----------------------------------------------------------------


def sort_numbers(numbers: str) -> str:
    
    value_to_name = {
        0: 'zero',
        1: 'one',
        2: 'two',
        3: 'three',
        4: 'four',
        5: 'five',
        6: 'six',
        7: 'seven',
        8: 'eight',
        9: 'nine'
    }
    return .join(sorted(numbers.split(), key=lambda x: value_to_name[x]))
----------------------------------------------------------------


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    
    def get_closest(a, b):
        
        return abs(a - b)
    
    return (max(numbers), min(numbers)) if numbers else (None, None)
----------------------------------------------------------------


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    
    def get_closest(x):
        closest_distance = None
        closest_pair = None
        for y in numbers:
            if y not in closest_pair:
                distance = abs(x - y)
                if (closest_distance is None) or distance < closest_distance:
                    closest_pair = (x, y)
                    closest_distance = distance
        return (x, closest_pair[1])

    return get_closest(numbers[0]), get_closest(numbers[1])
----------------------------------------------------------------


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    
    def get_closest(x):
        closest_distance = None
        closest_pair = None
        for y in numbers:
            if y != x:
                distance = abs(x - y)
                if (closest_distance is None) or distance < closest_distance:
                    closest_distance = distance
                    closest_pair = (x, y)
        return closest_pair

    return get_closest(numbers[0]), get_closest(numbers[1])
----------------------------------------------------------------


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    
    def get_closest(a, b):
        return abs(a - b)
    
    return (max(numbers), min(numbers))
----------------------------------------------------------------


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    
    def get_closest(a, b):
        
        return abs(a - b)
    
    return (max(numbers), min(numbers)) if numbers else (None, None)
----------------------------------------------------------------


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    
    def get_closest(a, b):
        
        return abs(a - b)
    
    return (max(numbers), min(numbers)) if numbers else (None, None)
----------------------------------------------------------------


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    
    def get_closest(x):
        closest_distance = None
        closest_pair = None
        for y in numbers:
            if y not in x:
                distance = abs(x - y)
                if (closest_distance is None) or distance < closest_distance:
                    closest_distance = distance
                    closest_pair = (x, y)
        return (x, closest_pair)
    return get_closest(numbers), get_closest(numbers[1:])
----------------------------------------------------------------


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    
    def get_closest(x):
        closest_distance = None
        closest_pair = None
        for y in numbers:
            if y != x:
                distance = abs(x - y)
                if (closest_distance is None) or distance < closest_distance:
                    closest_distance = distance
                    closest_pair = (x, y)
        return (x, closest_pair[1])

    return get_closest(numbers[0]), get_closest(numbers[1])
----------------------------------------------------------------


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    
    def get_closest(lst):
        closest_pair = None
        closest_distance = None
        for pair in lst:
            if (pair - numbers[0]) ** 2 <= (2 * closest_distance if closest_distance else 0):
                closest_distance = (pair - numbers[0]) ** 2
                closest_pair = pair
        return (closest_pair, numbers[0]) if (pair - numbers[1]) ** 2 <= (2 * closest_distance if closest_distance else 0) else (numbers[1], closest_pair)
    return get_closest(numbers)
----------------------------------------------------------------


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    
    def get_closest(x):
        closest_value = None
        closest_distance = None
        for y in numbers:
            if y != x:
                distance = abs(x - y)
                if (closest_distance is None) or distance < closest_distance:
                    closest_value = y
                    closest_distance = distance
        return (x, closest_value)
    return get_closest(numbers[0]), get_closest(numbers[1])
----------------------------------------------------------------


def rescale_to_unit(numbers: List[float]) -> List[float]:
    
    smallest_number = min(numbers)
    largest_number = max(numbers)
    return [(x - smallest_number) / (largest_number - smallest_number) for x in numbers]
----------------------------------------------------------------


def rescale_to_unit(numbers: List[float]) -> List[float]:
    
    smallest_number = max(numbers)
    largest_number = min(numbers)
    return [(x - smallest_number) / (largest_number - smallest_number) for x in numbers]
----------------------------------------------------------------


def rescale_to_unit(numbers: List[float]) -> List[float]:
    
    smallest_number = max(numbers)
    largest_number = min(numbers)
    return [(x - smallest_number) / (largest_number - smallest_number) for x in numbers]
----------------------------------------------------------------


def rescale_to_unit(numbers: List[float]) -> List[float]:
    
    smallest_number = min(numbers)
    largest_number = max(numbers)
    return [(x - smallest_number) / (largest_number - smallest_number) for x in numbers]
----------------------------------------------------------------


def rescale_to_unit(numbers: List[float]) -> List[float]:
    
    smallest_number = min(numbers)
    largest_number = max(numbers)
    return [(x - smallest_number) / (largest_number - smallest_number) for x in numbers]
----------------------------------------------------------------


def rescale_to_unit(numbers: List[float]) -> List[float]:
    
    smallest_number = max(numbers)
    largest_number = min(numbers)
    return [(x - smallest_number) / (largest_number - smallest_number) for x in numbers]
----------------------------------------------------------------


def rescale_to_unit(numbers: List[float]) -> List[float]:
    
    smallest_number = max(numbers)
    largest_number = min(numbers)
    return [(x - smallest_number) / (largest_number - smallest_number) for x in numbers]
----------------------------------------------------------------


def rescale_to_unit(numbers: List[float]) -> List[float]:
    
    smallest_number = max(numbers)
    largest_number = min(numbers)
    return [(x - smallest_number) / (largest_number - smallest_number) for x in numbers]
----------------------------------------------------------------


def rescale_to_unit(numbers: List[float]) -> List[float]:
    
    smallest_number = min(numbers)
    largest_number = max(numbers)
    return [(x - smallest_number) / (largest_number - smallest_number) for x in numbers]
----------------------------------------------------------------


def rescale_to_unit(numbers: List[float]) -> List[float]:
    
    smallest_number = min(numbers)
    largest_number = max(numbers)
    return [(x - smallest_number) / (largest_number - smallest_number) for x in numbers]
----------------------------------------------------------------


def filter_integers(values: List[Any]) -> List[int]:
    
    return [x for x in values if isinstance(x, int)]
----------------------------------------------------------------


def filter_integers(values: List[Any]) -> List[int]:
    
    return [x for x in values if isinstance(x, int)]
----------------------------------------------------------------


def filter_integers(values: List[Any]) -> List[int]:
    
    return [x for x in values if isinstance(x, int)]
----------------------------------------------------------------


def filter_integers(values: List[Any]) -> List[int]:
    
    return [x for x in values if isinstance(x, int)]
----------------------------------------------------------------


def filter_integers(values: List[Any]) -> List[int]:
    
    return [x for x in values if isinstance(x, int)]
----------------------------------------------------------------


def filter_integers(values: List[Any]) -> List[int]:
    
    return [x for x in values if isinstance(x, int)]
----------------------------------------------------------------


def filter_integers(values: List[Any]) -> List[int]:
    
    return [x for x in values if isinstance(x, int)]
----------------------------------------------------------------


def filter_integers(values: List[Any]) -> List[int]:
    
    return [x for x in values if isinstance(x, int)]
----------------------------------------------------------------


def filter_integers(values: List[Any]) -> List[int]:
    
    return [x for x in values if isinstance(x, int)]
----------------------------------------------------------------


def filter_integers(values: List[Any]) -> List[int]:
    
    return [x for x in values if isinstance(x, int)]
----------------------------------------------------------------


def strlen(string: str) -> int:
    
    return len(string)
----------------------------------------------------------------


def strlen(string: str) -> int:
    
    return len(string)
----------------------------------------------------------------


def strlen(string: str) -> int:
    
    return len(string)
----------------------------------------------------------------


def strlen(string: str) -> int:
    
    return len(string)
----------------------------------------------------------------


def strlen(string: str) -> int:
    
    return len(string)
----------------------------------------------------------------


def strlen(string: str) -> int:
    
    return len(string)
----------------------------------------------------------------


def strlen(string: str) -> int:
    
    return len(string)
----------------------------------------------------------------


def strlen(string: str) -> int:
    
    return len(string)
----------------------------------------------------------------


def strlen(string: str) -> int:
    
    return len(string)
----------------------------------------------------------------


def strlen(string: str) -> int:
    
    return len(string)
----------------------------------------------------------------


def largest_divisor(n: int) -> int:
    
    def even_divides(a):
      return a%2 == 0 and a > 0
    return max(n // i for i in range(n // 2 + 1))
----------------------------------------------------------------


def largest_divisor(n: int) -> int:
    
    def even_divides(a):
      return a%2 == 0 and a > 0
    return max(n // i for i in range(n - 0, 0, -1]) if even_divides(i))
----------------------------------------------------------------


def largest_divisor(n: int) -> int:
    
    def even_divides(a):
      return a%2 == 0 and a > 0
    return max(n // i for i in range(n - 0, 0, -1]) if even_divides(i))
----------------------------------------------------------------


def largest_divisor(n: int) -> int:
    
    def even_divides(i):
      return i % 2 == 0 and  


    for i in reversed(range(n)):
      if(even_divides(i)):
        return i
----------------------------------------------------------------


def largest_divisor(n: int) -> int:
    
    def even_divides(a):
      return a%2 == 0 and a > 0
    return max(n // i for i in range(n - 0, 0, -1]) if even_divides(i))
----------------------------------------------------------------


def largest_divisor(n: int) -> int:
    
    def even_divides(i):
      return i % 2 == 0 and  


    for i in reversed(range(n)):
      if(even_divides(i)):
        return i
----------------------------------------------------------------


def largest_divisor(n: int) -> int:
    
    def even_divides(i):
      return i >= n and n % i == 0
    return max(x for x in range(n - 1, 0, -1) if even_divides(x))
----------------------------------------------------------------


def largest_divisor(n: int) -> int:
    
    def even_divides(a):
      return a%2 == 0 and a > 0
    return max(n // i for i in range(n , 0, -1) if even_divides(i))
----------------------------------------------------------------


def largest_divisor(n: int) -> int:
    
    def even_divides(div):
      if div % 2 == 0:
        return True
      if div == 2:
        return False
      return even_divides(div - 2)

    for i in reversed(range(n)):
      if even_divides(i):
        return i
----------------------------------------------------------------


def largest_divisor(n: int) -> int:
    
    def even_divides(i):
      return i >= n and n % i == 0
    return max(x for x in range(n - 1, 0, -1) if even_divides(x))
----------------------------------------------------------------


def factorize(n: int) -> List[int]:
    
    def is_prime(k):
        if k == 1 or k == 0:
            return False
        if k == 2:
            return True
        if k % 2 == 0:
            return False
        for i in range(3, k):
            if k % i == 0:
                return False
        return True
    prime_factors = []
    i = 2
    while i <= int(n ** 0.5) + 1:
        if n % i == 0:
            if is_prime(i):
                prime_factors.append(i)
                n //= i
            else:
                break
        else:
            i += 1

    if prime_factors[-1] != n:
        prime_factors.append(n)
    return prime_factors
----------------------------------------------------------------


def factorize(n: int) -> List[int]:
    
    def is_prime(k):
        if k == 1 or k == 0:
            return False
        if k == 2:
            return True
        if k % 2 == 0:
            return False
        for i in range(3, k):
            if k % i == 0:
                return False
        return True
    prime_factors = []
    i = 2
    while i <= int(n ** 0.5) + 1:
        if n % i == 0:
            if is_prime(i):
                prime_factors.append(i)
                n //= i
            else:
                break
        else:
            i += 1

    if prime_factors == []:
        if n > 1:
            prime_factors.append(n)
    return prime_factors
----------------------------------------------------------------


def factorize(n: int) -> List[int]:
    
    def is_prime(k):
        if k == 1 or k == 0:
            return False
        if k == 2:
            return True
        if k % 2 == 0:
            return False
        for i in range(3, k):
            if k % i == 0:
                return False
        return True
    prime_factors = []
    i = 2
    while i <= int(n ** 0.5) + 1:
        if n % i == 0:
            if is_prime(i):
                prime_factors.append(i)
                n //= i
            else:
                continue
        else:
            i += 1

    if prime_factors[-1] != n:
        prime_factors.append(n)
    return prime_factors
----------------------------------------------------------------


def factorize(n: int) -> List[int]:
    
    def is_prime(k):
        if k == 1 or k == 0:
            return False
        if k == 2:
            return True
        if k % 2 == 0:
            return False
        for i in range(3, k):
            if k % i == 0:
                return False
        return True
    prime_factors = []
    i = 2
    while i <= int(n ** 0.5) + 1:
        if n % i == 0:
            if is_prime(i):
                prime_factors.append(i)
                n //= i
            else:
                continue
        else:
            i += 1

    if prime_factors[-1] != n:
        prime_factors.append(n)
    return prime_factors
----------------------------------------------------------------


def factorize(n: int) -> List[int]:
    
    def is_prime(k):
        if k == 1 or k == 0:
            return False
        if k == 2:
            return True
        if k % 2 == 0:
            return False
        
        for i in range(3, k):
            if k % i == 0:
                return False
        return True
    prime_factors = []
    i = 2
    while i <= int(n ** 0.5) + 1:
        if n % i == 0:
            if is_prime(i):
                prime_factors.append(i)
                n //= i

            else:
                break
            
        else:
            i += 1

    if prime_factors[-1] !=  or (prime_factors[-1] ==  and n != 1):
                prime_factors.append(n)
    return prime_factors
----------------------------------------------------------------


def factorize(n: int) -> List[int]:
    
    def is_prime(k):
        if k == 1 or k == 0:
            return False
        if k == 2:
            return True
        if k % 2 == 0:
            return False
        
        for i in range(3, k):
            if k % i == 0:
                return False
        return True
    prime_factors = []
    i = 2
    while i <= int(n ** 0.5) + 1:
        if n % i == 0:
            if is_prime(i):
                prime_factors.append(i)
                n //= i

            else:
                break
        else:
            i += 1

    if prime_factors[-1] != n:
        prime_factors.append(n)
    return prime_factors
----------------------------------------------------------------


def factorize(n: int) -> List[int]:
    
    def is_prime(k):
        if k == 1 or k == 0:
            return False
        if k == 2:
            return True
        if k % 2 == 0:
            return False
        
        for i in range(3, k):
            if k % i == 0:
                return False
        return True

    fact = []
    i = 2
    while i <= int(n ** 0.5) + 1:
        if n % i == 0:
            fact.append(i)
            n //= i

        if is_prime(i) and n > i:
            fact.append(i)
            n //= i

        i += 1

    if n > 1:
        fact.append(n)
    return fact
----------------------------------------------------------------


def factorize(n: int) -> List[int]:
    
    def is_prime(k):
        if k == 1 or k == 0:
            return False
        if k == 2:
            return True
        if k % 2 == 0:
            return False
        
        for i in range(3, k):
            if k % i == 0:
                return False
        return True

    fact = []
    i = 2
    while i <= int(n ** 0.5) + 1:
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
----------------------------------------------------------------


def factorize(n: int) -> List[int]:
    
    def is_prime(k):
        if k == 1 or k == 0:
            return False
        if k == 2:
            return True
        if k % 2 == 0:
            return False
        for i in range(3, k):
            if k % i == 0:
                return False
        return True
    prime_factors = []
    i = 2
    while i <= int(n ** 0.5) + 1:
        if n % i == 0:
            if is_prime(i):
                prime_factors.append(i)
                n //= i
            else:
                break
        else:
            i += 1

    if prime_factors[-1] != n:
        prime_factors.append(n)
    return prime_factors
----------------------------------------------------------------


def factorize(n: int) -> List[int]:
    
    def is_prime(k):
        if k == 1 or k == 0:
            return False
        if k == 2:
            return True
        if k % 2 == 0:
            return False
        
        for i in range(3, k):
            if k % i == 0:
                return False
        return True
    prime_factors = []

    for k in range(2, n + 1):
        if n % k == 0:
            if is_prime(k):
                prime_factors.append(k)
                n //= k

    return prime_factors
----------------------------------------------------------------


def remove_duplicates(numbers: List[int]) -> List[int]:
    
    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
----------------------------------------------------------------


def remove_duplicates(numbers: List[int]) -> List[int]:
    
    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
----------------------------------------------------------------


def remove_duplicates(numbers: List[int]) -> List[int]:
    
    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
----------------------------------------------------------------


def remove_duplicates(numbers: List[int]) -> List[int]:
    
    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
----------------------------------------------------------------


def remove_duplicates(numbers: List[int]) -> List[int]:
    
    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
----------------------------------------------------------------


def remove_duplicates(numbers: List[int]) -> List[int]:
    
    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
----------------------------------------------------------------


def remove_duplicates(numbers: List[int]) -> List[int]:
    
    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
----------------------------------------------------------------


def remove_duplicates(numbers: List[int]) -> List[int]:
    
    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
----------------------------------------------------------------


def remove_duplicates(numbers: List[int]) -> List[int]:
    
    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
----------------------------------------------------------------


def remove_duplicates(numbers: List[int]) -> List[int]:
    
    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
----------------------------------------------------------------


def flip_case(string: str) -> str:
    
    return string.swapcase()
----------------------------------------------------------------


def flip_case(string: str) -> str:
    
    return string.swapcase()
----------------------------------------------------------------


def flip_case(string: str) -> str:
    
    return string.swapcase()
----------------------------------------------------------------


def flip_case(string: str) -> str:
    
    return string.swapcase()
----------------------------------------------------------------


def flip_case(string: str) -> str:
    
    return string.swapcase()
----------------------------------------------------------------


def flip_case(string: str) -> str:
    
    return string.swapcase()
----------------------------------------------------------------


def flip_case(string: str) -> str:
    
    return string.swapcase()
----------------------------------------------------------------


def flip_case(string: str) -> str:
    
    return string.swapcase()
----------------------------------------------------------------


def flip_case(string: str) -> str:
    
    return string.swapcase()
----------------------------------------------------------------


def flip_case(string: str) -> str:
    
    return string.swapcase()
----------------------------------------------------------------


def concatenate(strings: List[str]) -> str:
    
    return .join(strings)
----------------------------------------------------------------


def concatenate(strings: List[str]) -> str:
    
    return .join(strings)
----------------------------------------------------------------


def concatenate(strings: List[str]) -> str:
    
    return .join(strings)
----------------------------------------------------------------


def concatenate(strings: List[str]) -> str:
    
    return .join(strings)
----------------------------------------------------------------


def concatenate(strings: List[str]) -> str:
    
    return .join(strings)
----------------------------------------------------------------


def concatenate(strings: List[str]) -> str:
    
    return .join(strings)
----------------------------------------------------------------


def concatenate(strings: List[str]) -> str:
    
    return .join(strings)
----------------------------------------------------------------


def concatenate(strings: List[str]) -> str:
    
    return .join(strings)
----------------------------------------------------------------


def concatenate(strings: List[str]) -> str:
    
    return .join(strings)
----------------------------------------------------------------


def concatenate(strings: List[str]) -> str:
    
    return .join(strings)
----------------------------------------------------------------


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    
    return [x for x in strings if x.startswith(prefix)]
----------------------------------------------------------------


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    
    return [x for x in strings if x.startswith(prefix)]
----------------------------------------------------------------


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    
    return [x for x in strings if x.startswith(prefix)]
----------------------------------------------------------------


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    
    return [x for x in strings if x.startswith(prefix)]
----------------------------------------------------------------


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    
    return [x for x in strings if x.startswith(prefix)]
----------------------------------------------------------------


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    
    return [x for x in strings if x.startswith(prefix)]
----------------------------------------------------------------


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    
    return [x for x in strings if x.startswith(prefix)]
----------------------------------------------------------------


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    
    return [x for x in strings if x.startswith(prefix)]
----------------------------------------------------------------


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    
    return [x for x in strings if x.startswith(prefix)]
----------------------------------------------------------------


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    
    return [x for x in strings if x.startswith(prefix)]
----------------------------------------------------------------


def get_positive(l: list):
    
    return [e for e in l if e > 0]
----------------------------------------------------------------


def get_positive(l: list):
    
    return [e for e in l if e > 0]
----------------------------------------------------------------


def get_positive(l: list):
    
    return [e for e in l if e > 0]
----------------------------------------------------------------


def get_positive(l: list):
    
    return [e for e in l if e > 0]
----------------------------------------------------------------


def get_positive(l: list):
    
    return [e for e in l if e > 0]
----------------------------------------------------------------


def get_positive(l: list):
    
    return [e for e in l if e > 0]
----------------------------------------------------------------


def get_positive(l: list):
    
    return [e for e in l if e > 0]
----------------------------------------------------------------


def get_positive(l: list):
    
    return [e for e in l if e > 0]
----------------------------------------------------------------


def get_positive(l: list):
    
    return [e for e in l if e > 0]
----------------------------------------------------------------


def get_positive(l: list):
    
    return [e for e in l if e > 0]
----------------------------------------------------------------


def is_prime(n):
    
    if n < 2:
      return False
    for k in range(2, n-1):
      if n % k == 0:
        return False
    return True
----------------------------------------------------------------


def is_prime(n):
    
    if n < 2:
      return False
    for k in range(2, n-1):
      if n % k == 0:
        return False
    return True
----------------------------------------------------------------


def is_prime(n):
    
    if n < 2:
        return False
    for k in range(2, n-1):
        if n % k == 0:
            return False
    return True
----------------------------------------------------------------


def is_prime(n):
    
    if n < 2:
        return False
    for k in range(2, n-1):
        if n % k == 0:
            return False
    return True
----------------------------------------------------------------


def is_prime(n):
    
    if n < 2:
      return False
    for k in range(2, n-1):
      if n % k == 0:
        return False
    return True
----------------------------------------------------------------


def is_prime(n):
    
    if n < 2:
        return False
    for k in range(2, n-1):
        if n % k == 0:
            return False
    return True
----------------------------------------------------------------


def is_prime(n):
    
    if n < 2:
      return False
    for k in range(2, n-1):
      if n % k == 0:
        return False
    return True
----------------------------------------------------------------


def is_prime(n):
    
    if n < 2:
        return False
    for k in range(2, n-1):
        if n % k == 0:
            return False
    return True
----------------------------------------------------------------


def is_prime(n):
    
    if n < 2:
        return False
    for k in range(2, n-1):
        if n % k == 0:
            return False
    return True
----------------------------------------------------------------


def is_prime(n):
    
    if n < 2:
        return False
    for k in range(2, n-1):
        if n % k == 0:
            return False
    return True
----------------------------------------------------------------
import math

def polynomial(xs):
    
    def find_zero(x):
        
        def check(x):
            for i, coeff in enumerate(xs):
                if i == 0:
                    if coeff != 0:
                        if (check(x - x[i]) if i != -1 else 0) <= 1e-3:
                            return check(x - x[i])
                elif i == len(xs):
                    if coeff != 0:
                        if check(x - x[len(xs) - i]) <= 1e-3:
                            return check(x - x[len(xs) - i])
                elif abs(x[i] - x[len(xs) - i]) < 1e-3:
                    if check(x - x[len(xs) - i]) <= check(x - x[i]):
                        return check(x - x[len(xs) - i])
                elif i == 0:
                    if check(x - 2*x[i]) <= check(x - 2*x[i]):
                        return check(x - 2*x[i])
                elif i == len(xs):
                    if check(x - 2*x[i]) <= check(x - 2*x[i]):
                        return check(x - 2*x[i])
                elif i == 0:
                    if check(x - 2*x[i]) <= check(x - 2*x[i]):
                        return check(x - 2*x[i])
                elif i == len(xs):
                    if check(x - 2*x[i]) <= check(x - 2*x[i]):
                        return check(x - 2*x[i])
                elif i == 0:
                    if check(x - 2*x[i]) <= check(x - 2*x[i]):
                        return check(x - 2*x[i])
                elif i == len(xs):
                    if check(x - 2*x[i]) <= check(x - 2*x[i]):
                        return
----------------------------------------------------------------
import math

def polynomial(xs):
    
    def find_zero(xs):
        return sum(xs) * 1e-3


def polynomial_solve(xs):

    def find_zero(xs):
        return polynomial(xs)

    from scipy.optimize import minimize
    return minimize(find_zero, [1, -1])
----------------------------------------------------------------


def find_zero(xs: list):
    
    if len(xs) == 0:
        return None
    if any(x > 0 for x in xs):
        return None
    if any(abs(x) < 1e-8 for x in xs):
        return None
    return find_zero(xs[:-1]) + (find_zero(xs[:-1]) - find_zero(xs[:-1])) / xs[-1]
----------------------------------------------------------------


def find_zero(xs: list):
    
    if len(xs) == 0:
        return None
    if any(x > 10 for x in xs):
        return None
    if any(abs(x) < 1e-8 for x in xs):
        return None
    zero_x_value = find_zero(xs[:-1]) + find_zero(xs[1:])
    return zero_x_value
----------------------------------------------------------------
import math

def polynomial(xs):
    
    def find_zero(xs):
        return sum(xs) if poly(xs, x) == 0 else 0 for x in range(max(xs), min(xs))

    coeffs = list(xs)
    coeffs.append(0)
    begin, end = coeffs, coeffs
    while (end - begin) > 1e-8:
        center = (begin + end) / 2.
        coeffs = begin + center * (end - begin)
        if coeffs[-1] != find_zero(coeffs):
            begin, end = coeffs, coeffs
        else:
            break
    return coeffs[-1]
----------------------------------------------------------------


def find_zero(xs: list):
    
    if len(xs) == 0:
        return None
    if any(x > 10 for x in xs):
        return None
    if any(x < 10 for x in xs):
        return None
    zero_x = xs[0]
    for i, x in enumerate(xs):
        if poly(xs[i+1:], x) * poly(xs[:i], zero_x) > 0:
            zero_x = x
    if any(abs(x - zero_x) < 1e-8 for x in xs):
        return None
    return zero_x
----------------------------------------------------------------


def find_zero(xs: list):
    
    if len(xs) == 0:
        return None
    if any(x > 10 for x in xs):
        return None
    if any(abs(x) < 1e-8 for x in xs):
        return None
    begin, end = -1, 1
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2
        end *= 2
    return round((begin + end) / 2, 4)
----------------------------------------------------------------
import math

def polynomial(xs):
    
def find_zero(xs):
    
def polynomial_from_samples(samples):
    
def sample(x):
    
def polynomial_from_samples(samples):
    
def sample(x):
    
def polynomial(x):
    
def polynomial_from_samples(samples):
    
def sample(x):
    
def polynomial_from_samples(samples):
    
def sample(x):
    
def polynomial(x):
    
def polynomial_from_samples(samples):
    
def sample(x):
    
def polynomial(x):
    
def polynomial_from_samples(samples):
    
def sample(x):
    
def polynomial(x):
    
def polynomial_from_samples(samples):
    
def sample(x):
    
def polynomial(x):
    
def polynomial_from_samples(samples):
    
def sample(x):
    
def polynomial(x):
    
def polynomial_from_samples(samples):
    
def sample(x):
    
def polynomial(x):
    
def polynomial_from_samples(samples):
    
def sample(x):
    
def polynomial(x):
    
def polynomial_from_samples(samples):
    
def sample(x):
    
def polynomial(x):
    
def polynomial_from_samples(samples):
    
def sample(x):
    
def polynomial(x):
    
def polynomial_from_samples(samples):
    
def sample(x):
    
def polynomial(x):
    
def polynomial_from_samples(samples):
    
def sample(x):
    
def polynomial(x):
    
def polynomial_from_samples(samples):
    
def sample(x):
    
def polynomial(x):
    
def polynomial_from_samples(samples):
    
def sample(x):
    
def polynomial(x):
    
def polynomial_from_samples(samples):
    
def sample(x):
    
def polynomial(x):
    
def polynomial_from_samples(samples):
    
def sample(x):
    
def polynomial(x):
    

----------------------------------------------------------------


def find_zero(xs: list):
    
    if len(xs) == 0:
        return None
    if any(x > 10 for x in xs):
        return None
    if any(x < 10 for x in xs):
        return None
    return find_zero(xs[:-1]) + find_zero(xs[1:])
----------------------------------------------------------------
import math

def polynomial(xs):
    
    def find_zero(xs):
        
        return xs[0]  if poly(xs, xs[0]) == 0 else  find_zero(xs[1:])
        
    return find_zero(xs)
----------------------------------------------------------------


def sort_third(l: list):
    
    return [] if len(l) == 0 else sorted(l)[2::3]
----------------------------------------------------------------


def sort_third(l: list):
    
    return [] if len(l) == 0 else sorted(l)[2::3]
----------------------------------------------------------------


def sort_third(l: list):
    
    return [] if len(l) == 0 else sorted(l)[2::3]
----------------------------------------------------------------


def sort_third(l: list):
    
    return [] if len(l) == 0 else sorted(l)[2::3]
----------------------------------------------------------------


def sort_third(l: list):
    
    return [] if len(l) == 0 else sorted(l)[2::3]
----------------------------------------------------------------


def sort_third(l: list):
    
    return [] if len(l) == 0 else sorted(l)[2::3]
----------------------------------------------------------------


def sort_third(l: list):
    
    l = list(l)
    l[::3] = sorted(l[::3])
    return l
----------------------------------------------------------------


def sort_third(l: list):
    
    return [] if len(l) == 0 else sorted(l)[2::3]
----------------------------------------------------------------


def sort_third(l: list):
    
    return [] if len(l) == 0 else sorted(l)[2::3]
----------------------------------------------------------------


def sort_third(l: list):
    
    l = list(l)
    l[::3] = sorted(l[::3])
    return l
----------------------------------------------------------------


def unique(l: list):
    
    return sorted(list(set(l)))
----------------------------------------------------------------


def unique(l: list):
    
    return sorted(list(set(l)))
----------------------------------------------------------------


def unique(l: list):
    
    return sorted(list(set(l)))
----------------------------------------------------------------


def unique(l: list):
    
    return sorted(list(set(l)))
----------------------------------------------------------------


def unique(l: list):
    
    return sorted(list(set(l)))
----------------------------------------------------------------


def unique(l: list):
    
    return sorted(list(set(l)))
----------------------------------------------------------------


def unique(l: list):
    
    return sorted(list(set(l)))
----------------------------------------------------------------


def unique(l: list):
    
    return sorted(list(set(l)))
----------------------------------------------------------------


def unique(l: list):
    
    return sorted(list(set(l)))
----------------------------------------------------------------


def unique(l: list):
    
    return sorted(list(set(l)))
----------------------------------------------------------------


def max_element(l: list):
    
    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
----------------------------------------------------------------


def max_element(l: list):
    
    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
----------------------------------------------------------------


def max_element(l: list):
    
    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
----------------------------------------------------------------


def max_element(l: list):
    
    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
----------------------------------------------------------------


def max_element(l: list):
    
    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
----------------------------------------------------------------


def max_element(l: list):
    
    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
----------------------------------------------------------------


def max_element(l: list):
    
    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
----------------------------------------------------------------


def max_element(l: list):
    
    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
----------------------------------------------------------------


def max_element(l: list):
    
    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
----------------------------------------------------------------


def max_element(l: list):
    
    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
----------------------------------------------------------------


def fizz_buzz(n: int):
    
    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = .join(str(x) for x in ns)
    ans = 0
    for c in s:
        if c == :
            ans += 1
    return ans
----------------------------------------------------------------


def fizz_buzz(n: int):
    
    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = .join(str(x) for x in ns)
    ans = 0
    for c in s:
        if c == :
            ans += 1
    return ans
----------------------------------------------------------------


def fizz_buzz(n: int):
    
    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = .join(str(x) for x in ns)
    ans = 0
    for c in s:
        if c == :
            ans += 1
    return ans
----------------------------------------------------------------


def fizz_buzz(n: int):
    
    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = .join(str(x) for x in ns)
    ans = 0
    for c in s:
        if c == :
            ans += 1
    return ans
----------------------------------------------------------------


def fizz_buzz(n: int):
    
    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = .join(str(x) for x in ns)
    ans = 0
    for c in s:
        if c == :
            ans += 1
    return ans
----------------------------------------------------------------


def fizz_buzz(n: int):
    
    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = .join(str(x) for x in ns)
    ans = 0
    for c in s:
        if c == :
            ans += 1
    return ans
----------------------------------------------------------------


def fizz_buzz(n: int):
    
    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = .join(list(map(str, ns)))
    ans = 0
    for c in s:
        if c == :
            ans += 1
    return ans
----------------------------------------------------------------


def fizz_buzz(n: int):
    
    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = .join(str(x) for x in ns)
    ans = 0
    for c in s:
        if c == :
            ans += 1
    return ans
----------------------------------------------------------------


def fizz_buzz(n: int):
    
    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = .join(str(x) for x in ns)
    ans = 0
    for c in s:
        if c == :
            ans += 1
    return ans
----------------------------------------------------------------


def fizz_buzz(n: int):
    
    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = .join(str(x) for x in ns)
    ans = 0
    for c in s:
        if c == :
            ans += 1
    return ans
----------------------------------------------------------------


def sort_even(l: list):
    
    evens = l[::2]
    odds = l[1::2]
    return sorted(evens) + sorted(odds)
----------------------------------------------------------------


def sort_even(l: list):
    
    evens = l[::2]
    odds = l[1::2]
    return sorted(evens) + sorted(odds)
----------------------------------------------------------------


def sort_even(l: list):
    
    evens = l[::2]
    odds = l[1::2]
    return sorted(evens) + sorted(odds)
----------------------------------------------------------------


def sort_even(l: list):
    
    evens = l[::2]
    odds = l[1::2]
    return sorted(evens) + sorted(odds)
----------------------------------------------------------------


def sort_even(l: list):
    
    evens = l[::2]
    odds = l[1::2]
    return sorted(evens) + sorted(odds)
----------------------------------------------------------------


def sort_even(l: list):
    
    evens = l[::2]
    odds = l[1::2]
    return sorted(evens) + sorted(odds)
----------------------------------------------------------------


def sort_even(l: list):
    
    evens = l[::2]
    odds = l[1::2]
    return sorted(evens) + sorted(odds)
----------------------------------------------------------------


def sort_even(l: list):
    
    evens = l[::2]
    odds = l[1::2]
    return sorted(evens) + sorted(odds)
----------------------------------------------------------------


def sort_even(l: list):
    
    evens = l[::2]
    odds = l[1::2]
    return sorted(evens) + sorted(odds)
----------------------------------------------------------------


def sort_even(l: list):
    
    evens = l[::2]
    odds = l[1::2]
    return sorted(evens) + sorted(odds)
----------------------------------------------------------------


def encode_cyclic(s: str):
    
def decode_cyclic(s: str):
----------------------------------------------------------------


def encode_cyclic(s: str):
    
def decode_cyclic(s: str):
----------------------------------------------------------------


def encode_cyclic(s: str):
    
def decode_cyclic(s: str):
----------------------------------------------------------------


def encode_cyclic(s: str):
    
def decode_cyclic(s: str):
----------------------------------------------------------------


def encode_cyclic(s: str):
    
def decode_cyclic(s: str):
----------------------------------------------------------------


def encode_cyclic(s: str):
    
def decode_cyclic(s: str):
----------------------------------------------------------------


def encode_cyclic(s: str):
    
def decode_cyclic(s: str):
----------------------------------------------------------------


def encode_cyclic(s: str):
    
def decode_cyclic(s: str):
----------------------------------------------------------------


def encode_cyclic(s: str):
    
def decode_cyclic(s: str):
----------------------------------------------------------------


def encode_cyclic(s: str):
    
def decode_cyclic(s: str):
----------------------------------------------------------------


def prime_fib(n: int):
    
    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(p - 1, p - 2)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
----------------------------------------------------------------


def prime_fib(n: int):
    
    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(p - 1, p - 2)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
----------------------------------------------------------------


def prime_fib(n: int):
    
    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(p - 1, p - 2)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
----------------------------------------------------------------


def prime_fib(n: int):
    
    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(p - 1, p - 2)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
----------------------------------------------------------------


def prime_fib(n: int):
    
    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(p - 1, p - 2)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
----------------------------------------------------------------


def prime_fib(n: int):
    
    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(p - 1, p - 2)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
----------------------------------------------------------------


def prime_fib(n: int):
    
    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(p - 1, p - 2)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
----------------------------------------------------------------


def prime_fib(n: int):
    
    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(p - 1, p - 2)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
----------------------------------------------------------------


def prime_fib(n: int):
    
    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(p - 1, p - 2)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
----------------------------------------------------------------


def prime_fib(n: int):
    
    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(p - 1, p - 2)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
----------------------------------------------------------------


def triples_sum_to_zero(l: list):
    
    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l1 + l2 + l3 == 0:
                    return True
    return False
----------------------------------------------------------------


def triples_sum_to_zero(l: list):
    
    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l1 + l2 + l3 == 0:
                    return True
    return False
----------------------------------------------------------------


def triples_sum_to_zero(l: list):
    
    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l1 + l2 + l3 == 0:
                    return True
    return False
----------------------------------------------------------------


def triples_sum_to_zero(l: list):
    
    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l1 + l2 + l3 == 0:
                    return True
    return False
----------------------------------------------------------------


def triples_sum_to_zero(l: list):
    
    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l1 + l2 + l3 == 0:
                    return True
    return False
----------------------------------------------------------------


def triples_sum_to_zero(l: list):
    
    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l1 + l2 + l3 == 0:
                    return True
    return False
----------------------------------------------------------------


def triples_sum_to_zero(l: list):
    
    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l1 + l2 + l3 == 0:
                    return True
    return False
----------------------------------------------------------------


def triples_sum_to_zero(l: list):
    
    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l1 + l2 + l3 == 0:
                    return True
    return False
----------------------------------------------------------------


def triples_sum_to_zero(l: list):
    
    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l1 + l2 + l3 == 0:
                    return True
    return False
----------------------------------------------------------------


def triples_sum_to_zero(l: list):
    
    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l1 + l2 + l3 == 0:
                    return True
    return False
----------------------------------------------------------------


def car_race_collision(n: int):
    
    return n**2
----------------------------------------------------------------


def car_race_collision(n: int):
    
    return n**2
----------------------------------------------------------------


def car_race_collision(n: int):
    
    return n ** 2
----------------------------------------------------------------


def car_race_collision(n: int):
    
    return n ** 2
----------------------------------------------------------------


def car_race_collision(n: int):
    
    return n**2
----------------------------------------------------------------


def car_race_collision(n: int):
    
    return n ** 2
----------------------------------------------------------------


def car_race_collision(n: int):
    
    return n ** 2
----------------------------------------------------------------


def car_race_collision(n: int):
    
    return n ** 2
----------------------------------------------------------------


def car_race_collision(n: int):
    
    return n ** 2
----------------------------------------------------------------


def car_race_collision(n: int):
    
    return n**2
----------------------------------------------------------------


def incr_list(l: list):
    
    return [(e + 1) for e in l]
----------------------------------------------------------------


def incr_list(l: list):
    
    return [(e + 1) for e in l]
----------------------------------------------------------------


def incr_list(l: list):
    
    return [(e + 1) for e in l]
----------------------------------------------------------------


def incr_list(l: list):
    
    return [(e + 1) for e in l]
----------------------------------------------------------------


def incr_list(l: list):
    
    return [(e + 1) for e in l]
----------------------------------------------------------------


def incr_list(l: list):
    
    return [(e + 1) for e in l]
----------------------------------------------------------------


def incr_list(l: list):
    
    return [(e + 1) for e in l]
----------------------------------------------------------------


def incr_list(l: list):
    
    return [(e + 1) for e in l]
----------------------------------------------------------------


def incr_list(l: list):
    
    return [(e + 1) for e in l]
----------------------------------------------------------------


def incr_list(l: list):
    
    return [(e + 1) for e in l]
----------------------------------------------------------------


def pairs_sum_to_zero(l):
    
    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
----------------------------------------------------------------


def pairs_sum_to_zero(l):
    
    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
----------------------------------------------------------------


def pairs_sum_to_zero(l):
    
    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
----------------------------------------------------------------


def pairs_sum_to_zero(l):
    
    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
----------------------------------------------------------------


def pairs_sum_to_zero(l):
    
    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
----------------------------------------------------------------


def pairs_sum_to_zero(l):
    
    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
----------------------------------------------------------------


def pairs_sum_to_zero(l):
    
    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
----------------------------------------------------------------


def pairs_sum_to_zero(l):
    
    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
----------------------------------------------------------------


def pairs_sum_to_zero(l):
    
    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
----------------------------------------------------------------


def pairs_sum_to_zero(l):
    
    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
----------------------------------------------------------------


def change_base(x: int, base: int):
    
    if x >= base:
        return change_base(x // base, base) + change_base(x % base, base)
    return str(x)
----------------------------------------------------------------


def change_base(x: int, base: int):
    
    if x >= base:
        return change_base(x // base, base) + change_base(x % base, base)
    return str(x)
----------------------------------------------------------------


def change_base(x: int, base: int):
    
    if x >= base:
        return change_base(x // base, base) + change_base(x % base, base)
    return str(x)
----------------------------------------------------------------


def change_base(x: int, base: int):
    
    if x >= base:
        return change_base(x // base, base) + change_base(x % base, base)
    return str(x)
----------------------------------------------------------------


def change_base(x: int, base: int):
    
    if x >= base:
        return change_base(x // base, base) + change_base(x % base, base)
    return str(x)
----------------------------------------------------------------


def change_base(x: int, base: int):
    
    if x >= base:
        return change_base(x // base, base) + change_base(x % base, base)
    return str(x)
----------------------------------------------------------------


def change_base(x: int, base: int):
    
    if x >= base:
        return change_base(x // base, base) + change_base(x % base, base)
    return str(x)
----------------------------------------------------------------


def change_base(x: int, base: int):
    
    if x >= base:
        return change_base(x // base, base) + change_base(x % base, base)
    return str(x)
----------------------------------------------------------------


def change_base(x: int, base: int):
    
    if x >= base:
        return change_base(x // base, base) + change_base(x % base, base)
    return str(x)
----------------------------------------------------------------


def change_base(x: int, base: int):
    
    if x >= base:
        return change_base(x // base, base) + change_base(x % base, base)
    return str(x)
----------------------------------------------------------------


def triangle_area(a, h):
    
    return a * h / 2.0
----------------------------------------------------------------


def triangle_area(a, h):
    
    return a * h / 2.0
----------------------------------------------------------------


def triangle_area(a, h):
    
    return a * h / 2.0
----------------------------------------------------------------


def triangle_area(a, h):
    
    return a * h / 2.0
----------------------------------------------------------------


def triangle_area(a, h):
    
    return a * h / 2.0
----------------------------------------------------------------


def triangle_area(a, h):
    
    return a * h / 2.0
----------------------------------------------------------------


def triangle_area(a, h):
    
    return a * h / 2.0
----------------------------------------------------------------


def triangle_area(a, h):
    
    return a * h / 2.0
----------------------------------------------------------------


def triangle_area(a, h):
    
    return a * h / 2.0
----------------------------------------------------------------


def triangle_area(a, h):
    
    return a * h / 2.0
----------------------------------------------------------------


def fib4(n: int):
    
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 2
    if n == 3:
        return 0
    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)
----------------------------------------------------------------


def fib4(n: int):
    
    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]
    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)
    return results[-1]
----------------------------------------------------------------


def fib4(n: int):
    
    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]
    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)
    return results[-1]
----------------------------------------------------------------


def fib4(n: int):
    
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 2
    if n == 3:
        return 0
    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)
----------------------------------------------------------------


def fib4(n: int):
    
    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]
    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)
    return results[-1]
----------------------------------------------------------------


def fib4(n: int):
    
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 2
    if n == 3:
        return 0
    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)
----------------------------------------------------------------


def fib4(n: int):
    
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 2
    if n == 3:
        return 0
    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)
----------------------------------------------------------------


def fib4(n: int):
    
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 2
    if n == 3:
        return 0
    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)
----------------------------------------------------------------


def fib4(n: int):
    
    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]
    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)
    return results[-1]
----------------------------------------------------------------


def fib4(n: int):
    
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 2
    if n == 3:
        return 0
    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)
----------------------------------------------------------------


def median(l: list):
    
    l = sorted(l)
    if len(l) % 2 == 0:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
    else:
        return l[len(l) // 2]
----------------------------------------------------------------


def median(l: list):
    
    l = sorted(l)
    if len(l) % 2 == 0:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
    else:
        return l[len(l) // 2]
----------------------------------------------------------------


def median(l: list):
    
    l = sorted(l)
    if len(l) % 2 == 0:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
    else:
        return l[len(l) // 2]
----------------------------------------------------------------


def median(l: list):
    
    l = sorted(l)
    if len(l)%2==1:
        return l[len(l)//2]
    else:
        return (l[len(l)//2-1]+l[len(l)//2])/2.0
----------------------------------------------------------------


def median(l: list):
    
    l = sorted(l)
    if len(l) % 2 == 0:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
    else:
        return l[len(l) // 2]
----------------------------------------------------------------


def median(l: list):
    
    l = sorted(l)
    if len(l) % 2 == 0:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
    else:
        return l[len(l) // 2]
----------------------------------------------------------------


def median(l: list):
    
    l = sorted(l)
    if len(l) % 2 == 0:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
    else:
        return l[len(l) // 2]
----------------------------------------------------------------


def median(l: list):
    
    l = sorted(l)
    if len(l)%2==1:
        return l[len(l)//2]
    else:
        return (l[len(l)//2-1]+l[len(l)//2])/2.0
----------------------------------------------------------------


def median(l: list):
    
    l = sorted(l)
    if len(l) % 2 == 0:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
    else:
        return l[len(l) // 2]
----------------------------------------------------------------


def median(l: list):
    
    l = sorted(l)
    if len(l) % 2 == 0:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
    else:
        return l[len(l) // 2]
----------------------------------------------------------------


def is_palindrome(text: str):
    
    return text == text[::-1]
----------------------------------------------------------------


def is_palindrome(text: str):
    
    return text == text[::-1]
----------------------------------------------------------------


def is_palindrome(text: str):
    
    return text == text[::-1]
----------------------------------------------------------------


def is_palindrome(text: str):
    
    return text == text[::-1]
----------------------------------------------------------------


def is_palindrome(text: str):
    
    return text == text[::-1]
----------------------------------------------------------------


def is_palindrome(text: str):
    
    return text == text[::-1]
----------------------------------------------------------------


def is_palindrome(text: str):
    
    return text == text[::-1]
----------------------------------------------------------------


def is_palindrome(text: str):
    
    return text == text[::-1]
----------------------------------------------------------------


def is_palindrome(text: str):
    
    return text == text[::-1]
----------------------------------------------------------------


def is_palindrome(text: str):
    
    return text == text[::-1]
----------------------------------------------------------------


def modp(n: int, p: int):
    
    return (2 ** n) % p
----------------------------------------------------------------


def modp(n: int, p: int):
    
    return (2 ** n) % p
----------------------------------------------------------------


def modp(n: int, p: int):
    
    return (2 ** n) % p
----------------------------------------------------------------


def modp(n: int, p: int):
    
    return (2 ** n) % p
----------------------------------------------------------------


def modp(n: int, p: int):
    
    return (2 ** n) % p
----------------------------------------------------------------


def modp(n: int, p: int):
    
    return (2 ** n) % p
----------------------------------------------------------------


def modp(n: int, p: int):
    
    return (2 ** n) % p
----------------------------------------------------------------


def modp(n: int, p: int):
    
    return (2 ** n) % p
----------------------------------------------------------------


def modp(n: int, p: int):
    
    return (2 ** n) % p
----------------------------------------------------------------


def modp(n: int, p: int):
    
    return (2 ** n) % p
----------------------------------------------------------------


def encode_shift(s: str):
    
def decode_shift(s: str):
----------------------------------------------------------------


def encode_shift(s: str):
    
def decode_shift(s: str):
----------------------------------------------------------------


def encode_shift(s: str):
    
def decode_shift(s: str):
----------------------------------------------------------------


def encode_shift(s: str):
    
def decode_shift(s: str):
----------------------------------------------------------------


def encode_shift(s: str):
    
def decode_shift(s: str):
----------------------------------------------------------------


def encode_shift(s: str):
    
def decode_shift(s: str):
----------------------------------------------------------------


def encode_shift(s: str):
    
def decode_shift(s: str):
----------------------------------------------------------------


def encode_shift(s: str):
    
def decode_shift(s: str):
----------------------------------------------------------------


def encode_shift(s: str):
    
def decode_shift(s: str):
----------------------------------------------------------------


def encode_shift(s: str):
    
def decode_shift(s: str):
----------------------------------------------------------------


def remove_vowels(text):
    
    return .join([s for s in text if s.lower() not in [, , , , ]])
----------------------------------------------------------------


def remove_vowels(text):
    
    return .join([s for s in text if s.lower() not in [, , , , ]])
----------------------------------------------------------------


def remove_vowels(text):
    
    return .join([s for s in text if s.lower() not in [, , , , ]])
----------------------------------------------------------------


def remove_vowels(text):
    
    return .join([s for s in text if s.lower() not in [, , , , ]])
----------------------------------------------------------------


def remove_vowels(text):
    
    return .join([s for s in text if s.lower() not in [, , , , ]])
----------------------------------------------------------------


def remove_vowels(text):
    
    return .join([s for s in text if s.lower() not in [, , , , ]])
----------------------------------------------------------------


def remove_vowels(text):
    
    return .join([s for s in text if s.lower() not in [, , , , ]])
----------------------------------------------------------------


def remove_vowels(text):
    
    return .join([s for s in text if s.lower() not in [, , , , ]])
----------------------------------------------------------------


def remove_vowels(text):
    
    return .join([s for s in text if s.lower() not in [, , , , ]])
----------------------------------------------------------------


def remove_vowels(text):
    
    return .join([s for s in text if s.lower() not in [, , , , ]])
----------------------------------------------------------------


def below_threshold(l: list, t: int):
    
    return all(x < t for x in l)
----------------------------------------------------------------


def below_threshold(l: list, t: int):
    
    return all(x < t for x in l)
----------------------------------------------------------------


def below_threshold(l: list, t: int):
    
    return all(x < t for x in l)
----------------------------------------------------------------


def below_threshold(l: list, t: int):
    
    return all(x < t for x in l)
----------------------------------------------------------------


def below_threshold(l: list, t: int):
    
    return all(x < t for x in l)
----------------------------------------------------------------


def below_threshold(l: list, t: int):
    
    return all(x < t for x in l)
----------------------------------------------------------------


def below_threshold(l: list, t: int):
    
    return all(x < t for x in l)
----------------------------------------------------------------


def below_threshold(l: list, t: int):
    
    return all(x < t for x in l)
----------------------------------------------------------------


def below_threshold(l: list, t: int):
    
    return all(x < t for x in l)
----------------------------------------------------------------


def below_threshold(l: list, t: int):
    
    return all(x < t for x in l)
----------------------------------------------------------------


def add(x: int, y: int):
    
    return x + y
----------------------------------------------------------------


def add(x: int, y: int):
    
    return x + y
----------------------------------------------------------------


def add(x: int, y: int):
    
    return x + y
----------------------------------------------------------------


def add(x: int, y: int):
    
    return x + y
----------------------------------------------------------------


def add(x: int, y: int):
    
    return x + y
----------------------------------------------------------------


def add(x: int, y: int):
    
    return x + y
----------------------------------------------------------------


def add(x: int, y: int):
    
    return x + y
----------------------------------------------------------------


def add(x: int, y: int):
    
    return x + y
----------------------------------------------------------------


def add(x: int, y: int):
    
    return x + y
----------------------------------------------------------------


def add(x: int, y: int):
    
    return x + y
----------------------------------------------------------------


def same_chars(s0: str, s1: str):
    
    return set(s0) == set(s1)
----------------------------------------------------------------


def same_chars(s0: str, s1: str):
    
    return set(s0) == set(s1)
----------------------------------------------------------------


def same_chars(s0: str, s1: str):
    
    return set(s0) == set(s1)
----------------------------------------------------------------


def same_chars(s0: str, s1: str):
    
    return set(s0) == set(s1)
----------------------------------------------------------------


def same_chars(s0: str, s1: str):
    
    return set(s0) == set(s1)
----------------------------------------------------------------


def same_chars(s0: str, s1: str):
    
    return set(s0) == set(s1)
----------------------------------------------------------------


def same_chars(s0: str, s1: str):
    
    return set(s0) == set(s1)
----------------------------------------------------------------


def same_chars(s0: str, s1: str):
    
    return set(s0) == set(s1)
----------------------------------------------------------------


def same_chars(s0: str, s1: str):
    
    return set(s0) == set(s1)
----------------------------------------------------------------


def same_chars(s0: str, s1: str):
    
    return set(s0) == set(s1)
----------------------------------------------------------------


def fib(n: int):
    
    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
----------------------------------------------------------------


def fib(n: int):
    
    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
----------------------------------------------------------------


def fib(n: int):
    
    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
----------------------------------------------------------------


def fib(n: int):
    
    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
----------------------------------------------------------------


def fib(n: int):
    
    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
----------------------------------------------------------------


def fib(n: int):
    
    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
----------------------------------------------------------------


def fib(n: int):
    
    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
----------------------------------------------------------------


def fib(n: int):
    
    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
----------------------------------------------------------------


def fib(n: int):
    
    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
----------------------------------------------------------------


def fib(n: int):
    
    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
----------------------------------------------------------------


def correct_bracketing(brackets: str):
    
    depth = 0
    for b in brackets:
        if b == :
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
----------------------------------------------------------------


def correct_bracketing(brackets: str):
    
    depth = 0
    for b in brackets:
        if b == :
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
----------------------------------------------------------------


def correct_bracketing(brackets: str):
    
    depth = 0
    for b in brackets:
        if b == :
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
----------------------------------------------------------------


def correct_bracketing(brackets: str):
    
    depth = 0
    for b in brackets:
        if b == :
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
----------------------------------------------------------------


def correct_bracketing(brackets: str):
    
    depth = 0
    for b in brackets:
        if b == :
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
----------------------------------------------------------------


def correct_bracketing(brackets: str):
    
    depth = 0
    for b in brackets:
        if b == :
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
----------------------------------------------------------------


def correct_bracketing(brackets: str):
    
    depth = 0
    for b in brackets:
        if b == :
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
----------------------------------------------------------------


def correct_bracketing(brackets: str):
    
    depth = 0
    for b in brackets:
        if b == :
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
----------------------------------------------------------------


def correct_bracketing(brackets: str):
    
    depth = 0
    for b in brackets:
        if b == :
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
----------------------------------------------------------------


def correct_bracketing(brackets: str):
    
    depth = 0
    for b in brackets:
        if b == :
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
----------------------------------------------------------------


def monotonic(l: list):
    
    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
----------------------------------------------------------------


def monotonic(l: list):
    
    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
----------------------------------------------------------------


def monotonic(l: list):
    
    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
----------------------------------------------------------------


def monotonic(l: list):
    
    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
----------------------------------------------------------------


def monotonic(l: list):
    
    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
----------------------------------------------------------------


def monotonic(l: list):
    
    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
----------------------------------------------------------------


def monotonic(l: list):
    
    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
----------------------------------------------------------------


def monotonic(l: list):
    
    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
----------------------------------------------------------------


def monotonic(l: list):
    
    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
----------------------------------------------------------------


def monotonic(l: list):
    
    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
----------------------------------------------------------------


def common(l1: list, l2: list):
    
    return list(set(l1) & set(l2))
    
def sort_unique(l: list):
    
    return sorted(list(set(l)), key = lambda x: l.index(x))
----------------------------------------------------------------


def common(l1: list, l2: list):
    
    return list(set(l1) & set(l2))
    
def sort_unique(l: list):
    
    return sorted(list(set(l)), key = lambda x: (-l.count(x), x))
----------------------------------------------------------------


def common(l1: list, l2: list):
    
    return list(set(l1) & set(l2))
    
def sort_unique(l: list):
    
    return sorted(list(set(l)), key = lambda x: l.index(x), reverse = True)
----------------------------------------------------------------


def common(l1: list, l2: list):
    
    return list(set(l1) & set(l2))
    
def sort_unique(l: list):
    
    return sorted(list(set(l)), reverse=True)
----------------------------------------------------------------


def common(l1: list, l2: list):
    
    return list(set(l1) & set(l2))
    
def sort_unique(l: list):
    
    return sorted(list(set(l)), key = lambda x: l.index(x), reverse = True)
----------------------------------------------------------------


def common(l1: list, l2: list):
    
    return list(set(l1) & set(l2))
    
def sort_unique(l: list):
    
    return sorted(list(set(l)), key = lambda x: (-l.count(x), x))
----------------------------------------------------------------


def common(l1: list, l2: list):
    
    return list(set(l1) & set(l2))
    
def sort_unique(l: list):
    
    return sorted(list(set(l)), key = lambda x: (-l.count(x), x))
----------------------------------------------------------------


def common(l1: list, l2: list):
    
    return list(set(l1) & set(l2))
    
def sort_unique(l: list):
    
    return sorted(list(set(l)), key = lambda x: l.index(x))
----------------------------------------------------------------


def common(l1: list, l2: list):
    
    return list(set(l1) & set(l2))
    
def sort_unique(l: list):
    
    return sorted(list(set(l)), reverse=True)
----------------------------------------------------------------


def common(l1: list, l2: list):
    
    return list(set(l1) & set(l2))
    
def sort_unique(l: list):
    
    return sorted(list(set(l)), key = lambda x: l.index(x))
----------------------------------------------------------------


def largest_prime_factor(n: int):
    
    def is_prime(k):
      if k == 1 or k == n:
        return False
      if k == 2 or k == n - 1:
        return True
      if k % 2 == 0:
        return False
      
      for i in range(3, k):
        if k % i == 0:
          return False
      return True
    largest = 1
    for j in range(1, n+1):
      if is_prime(j) and j > largest:
        largest = j
    return largest
----------------------------------------------------------------


def largest_prime_factor(n: int):
    
    def is_prime(k):
      if k == 1 or k == 0:
        return False
      if k == 2:
        return True
      if k % 2 == 0:
        return False
      
      for i in range(3, k):
        if k % i == 0:
          return False
      return True
    largest = 1
    for j in range(2, n + 1):
      if n % j == 0 and is_prime(j):
        if j > largest:
          largest = j
    return largest
----------------------------------------------------------------


def largest_prime_factor(n: int):
    
    def is_prime(k):
      if k == 1 or k == n:
        return False
      if k == 2 or k == n - 1:
        return True
      if k % 2 == 0:
        return False
      
      for i in range(3, k, 2):
        if k % i == 0:
          return False
      return True
    largest = 1
    for j in range(2, n + 1):
      if n % j == 0 and is_prime(j):
        if j > largest:
          largest = j
    return largest
----------------------------------------------------------------


def largest_prime_factor(n: int):
    
    def is_prime(k):
      if k == 1 or k == 0:
         return False
      if k == 2:
         return True
      if k % 2 == 0:
         return False
      
      for i in range(3, k):
         if k % i == 0:
            return False
      return True
   
    maxx = 1
    for j in range(1, n+1):
      if n % j == 0 and is_prime(j):
         maxx = max(maxx, j)
    return maxx
----------------------------------------------------------------


def largest_prime_factor(n: int):
    
    def is_prime(k):
      if k == 1 or k == 0:
        return False
      if k == 2:
        return True
      if k % 2 == 0:
        return False
      
      for i in range(3, k):
        if k % i == 0:
          return False
      return True
    largest = 1
    for j in range(1, n+1):
      if n % j == 0 and is_prime(j):
        if j > largest:
          largest = j
    return largest
----------------------------------------------------------------


def largest_prime_factor(n: int):
    
    def is_prime(k):
      if k == 1 or k == n:
        return False
      if k == 2 or k == n - 1:
        return True
      if k % 2 == 0:
        return False
      
      for i in range(3, k, 2):
        if k % i == 0:
          return False
      return True
    largest = 1
    for j in range(2, n + 1):
      if n % j == 0 and is_prime(j):
        if j > largest:
          largest = j
    return largest
----------------------------------------------------------------


def largest_prime_factor(n: int):
    
    def is_prime(k):
      
      if k == 1 or k == 0:
          return False
      if k == 2:
          return True
      if k % 2 == 0:
          return False
      
      for i in range(3, k):
          if k % i == 0:
              return False
      return True
    largest = 1
    for j in range(1, n+1):
      if n % j == 0 and is_prime(j):
          if j > largest:
              largest = j
    return largest
----------------------------------------------------------------


def largest_prime_factor(n: int):
    
    def is_prime(k):
      
      if k == 1 or k == 0:
         return False
      if k == 2:
         return True
      if k % 2 == 0:
         return False
      
      for i in range(3, k):
         if k % i == 0:
            return False
      return True
   
    maxx = 1
    for i in range(1, n+1):
      if n % i == 0 and is_prime(i):
         if i > maxx:
            maxx = i
    return maxx
----------------------------------------------------------------


def largest_prime_factor(n: int):
    
    def is_prime(k):
      
      if k == 1 or k == 0:
        return False
      if k == 2:
        return True
      if k % 2 == 0:
        return False
      
      for i in range(3, k):
        if k % i == 0:
          return False
      return True
    largest = 1
    for j in range(2, n + 1):
      if n % j == 0 and is_prime(j):
        if j > largest:
          largest = j
    return largest
----------------------------------------------------------------


def largest_prime_factor(n: int):
    
    def is_prime(k):
      if k == 1 or k == 0:
          return False
      if k == 2:
          return True
      if k % 2 == 0:
          return False
      
      for i in range(3, k):
          if k % i == 0:
              return False
      return True
    largest = 1
    for j in range(2, n + 1):
      if n % j == 0 and is_prime(j):
          if j > largest:
              largest = j
    return largest
----------------------------------------------------------------


def sum_to_n(n: int):
    
    return sum(range(n + 1))
----------------------------------------------------------------


def sum_to_n(n: int):
    
    return sum(range(n + 1))
----------------------------------------------------------------


def sum_to_n(n: int):
    
    return sum(range(n + 1))
----------------------------------------------------------------


def sum_to_n(n: int):
    
    return sum(range(n + 1))
----------------------------------------------------------------


def sum_to_n(n: int):
    
    return sum(range(n + 1))
----------------------------------------------------------------


def sum_to_n(n: int):
    
    return sum(range(n + 1))
----------------------------------------------------------------


def sum_to_n(n: int):
    
    return sum(range(n + 1))
----------------------------------------------------------------


def sum_to_n(n: int):
    
    return sum(range(n + 1))
----------------------------------------------------------------


def sum_to_n(n: int):
    
    return sum(range(n + 1))
----------------------------------------------------------------


def sum_to_n(n: int):
    
    return sum(range(n + 1))
----------------------------------------------------------------


def correct_bracketing(brackets: str):
    
    depth = 0
    for b in brackets:
        if b == :
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
----------------------------------------------------------------


def correct_bracketing(brackets: str):
    
    depth = 0
    for b in brackets:
        if b == :
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
----------------------------------------------------------------


def correct_bracketing(brackets: str):
    
    depth = 0
    for b in brackets:
        if b == :
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
----------------------------------------------------------------


def correct_bracketing(brackets: str):
    
    depth = 0
    for b in brackets:
        if b == :
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
----------------------------------------------------------------


def correct_bracketing(brackets: str):
    
    depth = 0
    for b in brackets:
        if b == :
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
----------------------------------------------------------------


def correct_bracketing(brackets: str):
    
    depth = 0
    for b in brackets:
        if b == :
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
----------------------------------------------------------------


def correct_bracketing(brackets: str):
    
    depth = 0
    for b in brackets:
        if b == :
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
----------------------------------------------------------------


def correct_bracketing(brackets: str):
    
    depth = 0
    for b in brackets:
        if b == :
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
----------------------------------------------------------------


def correct_bracketing(brackets: str):
    
    depth = 0
    for b in brackets:
        if b == :
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
----------------------------------------------------------------


def correct_bracketing(brackets: str):
    
    depth = 0
    for b in brackets:
        if b == :
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
----------------------------------------------------------------


def derivative(xs: list):
    
    return [(i * x) for i, x in enumerate(xs)][1:]
----------------------------------------------------------------


def derivative(xs: list):
    
    return [(i * x) for i, x in enumerate(xs)][1:]
----------------------------------------------------------------


def derivative(xs: list):
    
    return [(i * x) for i, x in enumerate(xs)][1:]
----------------------------------------------------------------


def derivative(xs: list):
    
    return [(i * x) for i, x in enumerate(xs)][1:]
----------------------------------------------------------------


def derivative(xs: list):
    
    return [(i * x) for i, x in enumerate(xs)][1:]
----------------------------------------------------------------


def derivative(xs: list):
    
    return [(i * x) for i, x in enumerate(xs)][1:]
----------------------------------------------------------------


def derivative(xs: list):
    
    return [(i * x) for i, x in enumerate(xs)][1:]
----------------------------------------------------------------


def derivative(xs: list):
    
    return [(i * x) for i, x in enumerate(xs)][1:]
----------------------------------------------------------------


def derivative(xs: list):
    
    return [(i * x) for i, x in enumerate(xs)][1:]
----------------------------------------------------------------


def derivative(xs: list):
    
    return [(i * x) for i, x in enumerate(xs)][1:]
----------------------------------------------------------------


def fibfib(n: int):
    
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
----------------------------------------------------------------


def fibfib(n: int):
    
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
----------------------------------------------------------------


def fibfib(n: int):
    
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
----------------------------------------------------------------


def fibfib(n: int):
    
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
----------------------------------------------------------------


def fibfib(n: int):
    
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
----------------------------------------------------------------


def fibfib(n: int):
    
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
----------------------------------------------------------------


def fibfib(n: int):
    
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
----------------------------------------------------------------


def fibfib(n: int):
    
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
----------------------------------------------------------------


def fibfib(n: int):
    
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
----------------------------------------------------------------


def fibfib(n: int):
    
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
----------------------------------------------------------------


def vowels_count(s):
    
    if (s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==
----------------------------------------------------------------


def vowels_count(s):
    
    if (s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==
----------------------------------------------------------------


def vowels_count(s):
    
    if(s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  
----------------------------------------------------------------


def vowels_count(s):
    
    if (s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==
----------------------------------------------------------------


def vowels_count(s):
    
    if (s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==
----------------------------------------------------------------


def vowels_count(s):
    
    if (s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==
----------------------------------------------------------------


def vowels_count(s):
    
    if (s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==
----------------------------------------------------------------


def vowels_count(s):
    
    if (s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==
----------------------------------------------------------------


def vowels_count(s):
    
    if (s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==
----------------------------------------------------------------


def vowels_count(s):
    
    if(s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  or s[-1] ==  
----------------------------------------------------------------


def circular_shift(x, shift):
    
    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
----------------------------------------------------------------


def circular_shift(x, shift):
    
    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
----------------------------------------------------------------


def circular_shift(x, shift):
    
    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
----------------------------------------------------------------


def circular_shift(x, shift):
    
    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
----------------------------------------------------------------


def circular_shift(x, shift):
    
    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
----------------------------------------------------------------


def circular_shift(x: int, shift: int):
    
    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
----------------------------------------------------------------


def circular_shift(x, shift):
    
    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
----------------------------------------------------------------


def circular_shift(x, shift):
    
    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
----------------------------------------------------------------


def circular_shift(x: int, shift: int):
    
    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
----------------------------------------------------------------


def circular_shift(x, shift):
    
    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
----------------------------------------------------------------


def digitSum(s):
    
    if s == : return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
----------------------------------------------------------------


def digitSum(s):
    
    if s == : return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
----------------------------------------------------------------


def digitSum(s):
    
    if s == : return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
----------------------------------------------------------------


def digitSum(s):
    
    if(s == ): return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
----------------------------------------------------------------


def digitSum(s):
    
    if (s == ): return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
----------------------------------------------------------------


def digitSum(s):
    
    if (s == ): return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
----------------------------------------------------------------


def digitSum(s):
    
    if s == : return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
----------------------------------------------------------------


def digitSum(s):
    
    if (s == ): return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
----------------------------------------------------------------


def digitSum(s):
    
    if (s == ): return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
----------------------------------------------------------------


def digitSum(s):
    
    if s == : return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
----------------------------------------------------------------


def fruit_distribution(s,n):
    
    lis = list()
    for i in s.split():
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
----------------------------------------------------------------


def fruit_distribution(s,n):
    
    lis = list()
    for i in s.split():
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
----------------------------------------------------------------


def fruit_distribution(s,n):
    
    lis = list()
    for i in s.split():
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
----------------------------------------------------------------


def fruit_distribution(s,n):
    
    lis = list()
    for i in s.split():
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
----------------------------------------------------------------


def fruit_distribution(s,n):
    
    lis = list()
    for i in s.split():
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
----------------------------------------------------------------


def fruit_distribution(s,n):
    
    lis = list()
    for i in s.split():
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
----------------------------------------------------------------


def fruit_distribution(s,n):
    
    lis = list()
    for i in s.split():
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
----------------------------------------------------------------


def fruit_distribution(s,n):
    
    lis = list()
    for i in s.split():
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
----------------------------------------------------------------


def fruit_distribution(s,n):
    
    lis = list()
    for i in s.split():
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
----------------------------------------------------------------


def fruit_distribution(s, n):
    
    lis = list()
    for i in s.split():
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
----------------------------------------------------------------

def pluck(arr):
    
    if(len(arr)==0): return []
    evens = list(filter(lambda x: x%2==0, arr))
    if(evens):
        return [min(evens),arr.index(min(evens))]
    return []
----------------------------------------------------------------


def pluck(arr):
    
    if(len(arr)==0): return []
    evens = list(filter(lambda x: x%2==0, arr))
    if(evens):
        return [min(evens),arr.index(min(evens))]
    return []
----------------------------------------------------------------


def pluck(arr):
    
    if(len(arr)==0): return []
    evens = list(filter(lambda x: x%2==0, arr))
    if(evens):
        return [min(evens),arr.index(min(evens))]
    return []
----------------------------------------------------------------

def pluck(arr):
    
    if(len(arr)==0): return []
    evens = list(filter(lambda x: x%2==0, arr))
    if(evens):
        return [min(evens),arr.index(min(evens))]
    return []
----------------------------------------------------------------

def pluck(arr):
    
    if(len(arr)==0): return []
    evens = list(filter(lambda x: x%2==0, arr))
    if(evens):
        return [min(evens),arr.index(min(evens))]
    return []
----------------------------------------------------------------

def pluck(arr):
    
    if(len(arr)==0): return []
    evens = list(filter(lambda x: x%2==0, arr))
    if(evens):
        return [min(evens),arr.index(min(evens))]
    return []
----------------------------------------------------------------


def pluck(arr):
    
    if(len(arr)==0): return []
    evens = list(filter(lambda x: x%2==0, arr))
    if(evens):
        return [min(evens),arr.index(min(evens))]
    return []
----------------------------------------------------------------


def pluck(arr):
    
    if(len(arr)==0): return []
    evens = list(filter(lambda x: x%2==0, arr))
    if(evens):
        return [min(evens),arr.index(min(evens))]
    return []
----------------------------------------------------------------


def pluck(arr):
    
    if(len(arr)==0): return []
    evens = list(filter(lambda x: x%2==0, arr))
    if(evens):
        return [min(evens),arr.index(min(evens))]
    return []
----------------------------------------------------------------

def pluck(arr):
    
    if(len(arr)==0): return []
    evens = list(filter(lambda x: x%2==0, arr))
    if(evens):
        return [min(evens),arr.index(min(evens))]
    return []
----------------------------------------------------------------


def search(lst):
    
    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1;
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i;

    return ans
----------------------------------------------------------------


def search(lst):
    
    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1;
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i;

    return ans
----------------------------------------------------------------


def search(lst):
    
    fqt = []
    for i in lst:
        fqt.append((i, lst.count(i)))
    fqt.sort(reverse = True)
    ans = -1
    for i, count in fqt:
        if count >= i:
            ans = i
            break
    return ans
----------------------------------------------------------------


def search(lst):
    
    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1;
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i;

    return ans
----------------------------------------------------------------


def search(lst):
    
    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1;
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i;

    return ans
----------------------------------------------------------------


def search(lst):
    
    fqt = []
    for i in lst:
        fqt.append((i, lst.count(i)))
    fqt.sort(key = lambda x: x[1], reverse=True)
    return -1 if len(fqt) < 1 else fqt[0][0]
----------------------------------------------------------------


def search(lst):
    
    fqt = []
    for i in lst:
        fqt.append((i, lst.count(i)))
    fqt.sort(key = lambda x: x[1], reverse = True)
    return -1 if len(fqt) < 1 else fqt[0][0]
----------------------------------------------------------------


def search(lst):
    
    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1;
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i;

    return ans
----------------------------------------------------------------


def search(lst):
    
    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1;
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i;

    return ans
----------------------------------------------------------------


def search(lst):
    
    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1;
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i;

    return ans
----------------------------------------------------------------


def strange_sort_list(lst):
    
    return [] if len(lst) == 0 else sorted(lst, reverse=True)
----------------------------------------------------------------


def strange_sort_list(lst):
    
    return [] if not lst else sorted(lst, reverse=True)
----------------------------------------------------------------


def strange_sort_list(lst):
    
    return [] if not lst else sorted(lst, reverse=True)
----------------------------------------------------------------


def strange_sort_list(lst):
    
    return [] if not lst else sorted(lst, reverse=True)
----------------------------------------------------------------


def strange_sort_list(lst):
    
    return [] if not lst else sorted(lst, reverse=True)
----------------------------------------------------------------


def strange_sort_list(lst):
    
    return [] if len(lst) == 0 else sorted(lst, reverse=True)
----------------------------------------------------------------


def strange_sort_list(lst):
    
    return [] if len(lst) == 0 else sorted(lst, reverse=True)
----------------------------------------------------------------


def strange_sort_list(lst):
    
    return [] if len(lst) == 0 else sorted(lst, reverse=True)
----------------------------------------------------------------


def strange_sort_list(lst):
    
    return [] if len(lst) == 0 else sorted(lst, reverse=True)
----------------------------------------------------------------


def strange_sort_list(lst):
    
    return [] if len(lst) == 0 else sorted(lst, reverse=True)
----------------------------------------------------------------


def triangle_area(a, b, c):
    
    if a+b <= c or a+c <= b or b+c <= a:
        return -1 
    s = (a + b + c)/2.0    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area,2)
    return area
----------------------------------------------------------------


def triangle_area(a, b, c):
    
    if a+b <= c or a+c <= b or b+c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area,2)
    return area
----------------------------------------------------------------


def triangle_area(a, b, c):
    
    if a+b <= c or a+c <= b or b+c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area,2)
    return area
----------------------------------------------------------------


def triangle_area(a, b, c):
    
    if a+b <= c or a+c <= b or b+c <= a:
        return -1 
    s = (a + b + c)/2.0    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area,2)
    return area
----------------------------------------------------------------


def triangle_area(a, b, c):
    
    if a+b <= c or a+c <= b or b+c <= a:
        return -1 
    s = (a + b + c)/2.0    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area,2)
    return area
----------------------------------------------------------------


def triangle_area(a, b, c):
    
    if a+b <= c or a+c <= b or b+c <= a:
        return -1 
    s = (a + b + c)/2.0    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area,2)
    return area
----------------------------------------------------------------


def triangle_area(a, b, c):
    
    if a+b <= c or a+c <= b or b+c <= a:
        return -1 
    s = (a + b + c)/2.0    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area,2)
    return area
----------------------------------------------------------------


def triangle_area(a, b, c):
    
    if a+b <= c or a+c <= b or b+c <= a:
        return -1 
    s = (a + b + c)/2.0    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area,2)
    return area
----------------------------------------------------------------


def triangle_area(a, b, c):
    
    if a+b <= c or a+c <= b or b+c <= a:
        return -1
    s = (a + b + c)/2.0    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area,2)
    return area
----------------------------------------------------------------


def triangle_area(a, b, c):
    
    if a+b <= c or a+c <= b or b+c <= a:
        return -1 
    s = (a + b + c)/2.0    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area,2)
    return area
----------------------------------------------------------------


def will_it_fly(q, w):
    
    if sum(q) > w:
        return False
    if q != q[::-1]:
        return False
    return True
----------------------------------------------------------------


def will_it_fly(q, w):
    
    if sum(q) > w:
        return False
    if q != q[::-1]:
        return False
    return True
----------------------------------------------------------------


def will_it_fly(q, w):
    
    if sum(q) > w:
        return False
    
    i = 0
    j = len(q) - 1
    while i < j:
        if q[i] != q[j]:
            return False
        i += 1
        j -= 1
    return True
----------------------------------------------------------------


def will_it_fly(q, w):
    
    if sum(q) > w:
        return False
    if q != q[::-1]:
        return False
    return True
----------------------------------------------------------------


def will_it_fly(q, w):
    
    if sum(q) > w:
        return False
    if q != q[::-1]:
        return False
    return True
----------------------------------------------------------------


def will_it_fly(q, w):
    
    if sum(q) > w:
        return False
    if q != q[::-1]:
        return False
    return True
----------------------------------------------------------------


def will_it_fly(q, w):
    
    if sum(q) > w:
        return False
    if q != q[::-1]:
        return False
    return True
----------------------------------------------------------------


def will_it_fly(q, w):
    
    if sum(q) > w:
        return False
    if q != q[::-1]:
        return False
    return True
----------------------------------------------------------------


def will_it_fly(q, w):
    
    if sum(q) > w:
        return False
    if q != q[::-1]:
        return False
    return True
----------------------------------------------------------------


def will_it_fly(q, w):
    
    if sum(q) > w:
        return False
    if q != q[::-1]:
        return False
    return True
----------------------------------------------------------------


def smallest_change(arr):
    
    def is_palindrome(lst):
        return list(lst) == list(lst[::-1])

    return sum((cnt, ) for idx, val in enumerate(arr) if not is_palindrome(arr[idx :]))
----------------------------------------------------------------


def smallest_change(arr):
    
    def is_palindrome(lst):
        return list(lst) == list(lst[::-1])

    ans = 0
    for i in range(len(arr) // 2):
        if is_palindrome(arr[i:]):
            ans += 1
    return ans
----------------------------------------------------------------


def smallest_change(arr):
    
    def is_palindrome(lst):
        return lst == list(lst[::-1])

    return sum((arr.index(i), arr.index(i), arr.index(i), arr.index(i), arr.index(i),
                arr.index(i), arr.index(i), arr.index(i),
                arr.index(i), arr.index(i), arr.index(i),
                arr.index(i), arr.index(i), arr.index(i),
                arr.index(i), arr.index(i), arr.index(i),
                arr.index(i), arr.index(i), arr.index(i),
                arr.index(i), arr.index(i), arr.index(i),
                arr.index(i), arr.index(i), arr.index(i),
                arr.index(i), arr.index(i), arr.index(i),
                arr.index(i), arr.index(i), arr.index(i),
                arr.index(i), arr.index(i), arr.index(i),
                arr.index(i), arr.index(i), arr.index(i),
                arr.index(i), arr.index(i), arr.index(i),
                arr.index(i), arr.index(i), arr.index(i),
                arr.index(i), arr.index(i), arr.index(i),
                arr.index(i), arr.index(i), arr.index(i),
                arr.index(i), arr.index(i), arr.index(i),
                arr.index(i), arr.index(i), arr.index(i),
                arr.index(i), arr.index(i), arr.index(i),
                arr.index(i), arr.index(i), arr.index(i),
                arr.index(i), arr.index(i), arr.
----------------------------------------------------------------


def smallest_change(arr):
    
    def is_palindrom(arr):
        for i in range(len(arr) // 2):
            if arr[i] != arr[len(arr) - i - 1]:
                return False
        return True

    ans = 0
    for i in range(len(arr)):
        if is_palindrom(arr[i : (i + 1)]):
            ans += 1;

    return ans
----------------------------------------------------------------


def smallest_change(arr):
    
    def is_palindrome(lst):
        return list(lst) == list(lst[::-1])

    ans = 0
    for i in range(len(arr) // 2):
        if is_palindrome(arr[i:]):
            ans += 1
    return ans
----------------------------------------------------------------


def smallest_change(arr):
    
    def is_palindrome(lst):
        return list(lst) == list(lst[::-1])

    ans = 0
    for i in range(len(arr) // 2):
        if is_palindrome(arr[i:]):
            ans += 1
        if is_palindrome(arr[len(arr) - i - 1]):
            ans += 1
    return ans
----------------------------------------------------------------


def smallest_change(arr):
    
    def is_palindrome(lst):
        return lst == list(lst[::-1])

    return sum((arr.index(i), arr.index(i), arr.index(i), arr.index(i),
                arr.index(i), arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),
                arr.index(i), arr.index(i),

----------------------------------------------------------------


def smallest_change(arr):
    
    def is_palindrome(lst):
        return list(lst) == list(lst[::-1])

    ans = 0
    for i in range(len(arr) // 2):
        if is_palindrome(arr[i:]):
            ans += 1
        if is_palindrome(arr[len(arr) - i - 1]):
            ans += 1

    return ans
----------------------------------------------------------------


def smallest_change(arr):
    
    def is_palindrome(lst):
        return list(lst) == list(lst[::-1])

    ans = 0
    for i in range(len(arr) // 2):
        if is_palindrome(arr[i : len(arr) - i - 1]) == False:
            ans += 1
    return ans
----------------------------------------------------------------


def smallest_change(arr):
    
    def is_palindrome(lst):
        return list(lst) == list(lst[::-1])

    ans = 0
    for i in range(len(arr) // 2):
        if is_palindrome(arr[i:]):
            ans += 1
    return ans
----------------------------------------------------------------


def total_match(lst1, lst2):
    
    return [] if len(lst1) == 0 else  lst1
    if len(lst2) == 0 else  lst2
    return [] if len(lst1) == len(lst2) else  lst1
    return [] if len(lst1) > len(lst2) else  lst2
    return []
----------------------------------------------------------------


def total_match(lst1, lst2):
    
    return [] if len(lst1) == 0 else  lst1
    if len(lst2) == 0 else  lst2
    return [] if len(lst1) == len(lst2) else  lst1
    return [] if len(lst1) == 0 else  lst2
----------------------------------------------------------------


def total_match(lst1, lst2):
    
    return [] if len(lst1) == 0 else list(sorted(lst1, key=len))
    return [] if len(lst2) == 0 else list(sorted(lst2, key=len))
    if(len(lst1) > len(lst2)):
        return lst1
    if(len(lst1) < len(lst2)):
        return lst2
    return list(sorted(lst1))+list(sorted(lst2))
----------------------------------------------------------------


def total_match(lst1, lst2):
    
    return [] if len(lst1) == 0 else list(sorted(lst1, key=len))
    return [] if len(lst2) == 0 else list(sorted(lst2, key=len))
    
    if(len(lst1) > len(lst2)):
        return lst1
    if(len(lst1) < len(lst2)):
        return lst2
    return list(sorted(lst1))+list(sorted(lst2))
----------------------------------------------------------------


def total_match(lst1, lst2):
    
    return [] if len(lst1) == 0 else  lst1
    if len(lst2) == 0 else  lst2
    return [] if len(lst1) == len(lst2) else  lst1
    return [] if len(lst1) == 0 else  lst2
----------------------------------------------------------------


def total_match(lst1, lst2):
    
    return [] if len(lst1) == 0 else  lst1
    if len(lst2) == 0 else  lst2
    return [] if len(lst1) == len(lst2) else  lst1
    return [] if len(lst1) > len(lst2) else  lst2
    return [] if len(lst1) < len(lst2) else  lst1
    return []
----------------------------------------------------------------


def total_match(lst1, lst2):
    
    return [] if len(lst1) == 0 else  lst1
    if len(lst2) == 0 else  lst2
    return [] if len(lst1) == len(lst2) else  lst1
    return [] if len(lst1) > len(lst2) else  lst2
----------------------------------------------------------------


def total_match(lst1, lst2):
    
    return [] if len(lst1) == 0 else  lst1
    if len(lst2) == 0 else  lst2
    return [] if len(lst1) == len(lst2) else  lst1
    return [] if len(lst1) == 0 else  lst2
----------------------------------------------------------------


def total_match(lst1, lst2):
    
    return [] if len(lst1) == 0 else  lst1
    if len(lst2) == 0 else  lst2
    return [] if len(lst1) == len(lst2) else  lst1
    return [] if len(lst1) > len(lst2) else  lst2
----------------------------------------------------------------


def total_match(lst1, lst2):
    
    return [] if len(lst1) == 0 else  lst1
    if len(lst2) == 0 else  lst2
    return [] if len(lst1) == len(lst2) else  lst1
    return [] if len(lst1) == 0 else  lst2
----------------------------------------------------------------


def is_multiply_prime(a):
    
    def is_prime(n):
        for k in range(2, n-1):
            if (n % k == 0):
                return False
        return True
    prime1 = is_prime(a)
    prime2 = is_prime(a)
    prime3 = is_prime(a)
    if(prime1 and prime2 and prime3) or (not prime1 and not prime2 and not prime3):
        return True
    return False
----------------------------------------------------------------


def is_multiply_prime(a):
    
    def is_prime(n):
        for k in range(2, n-1):
            if n % k == 0:
                return False
        return True
    number_of_digits = len(str(abs(a)))
    for k in range(max(100, (a // 10 ** number_of_digits) ** 3)):
        if is_prime(a % k == 0) ==  is_prime((a // k) % k == 0) == is_prime((a // (k ** 2)) % k == 0):
            return True
    return False
----------------------------------------------------------------


def is_multiply_prime(a):
    
    def is_prime(n):
        for k in range(2, n-1):
            if (n % k == 0):
                return False
        return True
    number_of_digits = len(str(abs(a)))
    for k in range(max(100, (a if number_of_digits <= 20 else 20 * (a // 20))), 0, -1):
        if ((a == k) == is_prime(k) and (2 * k == k)):
            return True
    return False
----------------------------------------------------------------


def is_multiply_prime(a):
    
    def is_prime(n):
        for k in range(2, n-1):
            if (n % k == 0):
                return False
        return True
    mult = a
    flg = 0
    while(mult > 1):
        if is_prime(mult): 
            for k in range(2,mult):
                if(mult%k==0):
                    flg = 1
                    break
            if(flg==0):
                return True
        mult -= 1
    return False
----------------------------------------------------------------


def is_multiply_prime(a):
    
    def is_prime(n):
        for k in range(2, n-1):
            if n % k == 0:
                return False
        return True
    number_of_digits = len(str(abs(a)))
    if number_of_digits <= 1 or a == 0:
        return False
    if is_prime(a) == False:
        return False
    if is_prime(a // 3) == False:
        return False
    if is_prime(a // 3) == True and number_of_digits <= 4:
        return False
    return True
----------------------------------------------------------------


def is_multiply_prime(a):
    
    def is_prime(n):
        for k in range(2, n-1):
            if (n % k == 0):
                return False
        return True
    mult = a
    flg = 0
    while(mult > 1):
        if is_prime(mult): 
            flg += 1; 
        mult -= 1
    if(flg >= 3):
        return True
    return False
----------------------------------------------------------------


def is_multiply_prime(a):
    
    def is_prime(n):
        for k in range(2, n-1):
            if n % k == 0:
                return False
        return True
    number_of_digits = len(str(abs(a)))
    for k in range(max(100, (a // 10 ** number_of_digits) ** 3), 0, -1):
        if is_prime(a % k == 0):
            if is_prime((a // k) % k == 0) and is_prime((a // k) % k == 0):
                return True
    return False
----------------------------------------------------------------


def is_multiply_prime(a):
    
    def is_prime(n):
        for k in range(2, n-1):
            if (n % k == 0):
                return False
        return True
    number_of_digits = len(str(abs(a)))
    for k in range(max(100, (a if number_of_digits <= 20 else 20 * (a // 20))), 0, -1):
        if (abs(a) % k == 0):
            if is_prime(k) and (abs(a if number_of_digits <= 20 else 20 * (abs(a) // 20))) == k):
                return True
    return False
----------------------------------------------------------------


def is_multiply_prime(a):
    
    def is_prime(n):
        for k in range(2, n-1):
            if (n % k == 0):
                return False
        return True
    number_of_digits = len(str(abs(a)))
    for k in range(max(100, (a if number_of_digits <= 4 else a ** 4)),
                 (a if number_of_digits <= 4 else a ** 4),
                 -1):
        if is_prime(k) and k != (a if number_of_digits <= 4 else a ** 4):
            if k == k ** (number_of_digits if number_of_digits <= 4 else 4 ** 4):
                return True
        elif k == k ** 4:
            return True
    return False
----------------------------------------------------------------


def is_multiply_prime(a):
    
    def is_prime(n):
        for k in range(2, n-1):
            if n % k == 0:
                return False
        return True
    number_of_digits = len(str(abs(a)))
    has_multiple_digits = number_of_digits > 1
    if has_multiple_digits:
        a = a ** 3
    if is_prime(a) and ( ( a -  a % 2) == 0  or  ( a -  a % 2) == 1):
        return True
    return False
----------------------------------------------------------------


def is_simple_power(x, n):
    
    if( n==1 ) :
      if( x==1 ) :
        return True
      else :
        return False
    if( x%n==0) :
      return is_simple_power(x//n, n)
    else :
      return False
----------------------------------------------------------------


def is_simple_power(x, n):
    
    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x)
----------------------------------------------------------------


def is_simple_power(x, n):
    
    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x)
----------------------------------------------------------------


def is_simple_power(x, n):
    
    if( n==1 ) :
      if( x==1 ) :
        return True
      else :
        return False
    if( x%n==0) :
      return is_simple_power(x//n, n)
    else :
      return False
----------------------------------------------------------------


def is_simple_power(x, n):
    
    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x)
----------------------------------------------------------------


def is_simple_power(x, n):
    
    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x)
----------------------------------------------------------------


def is_simple_power(x, n):
    
    if(n==1): 
      if(x==1): 
        return True
      else: 
        return False
    
    if(x%n==0): 
      return is_simple_power(x//n, n) 
    else: 
      return False
----------------------------------------------------------------


def is_simple_power(x, n):
    
    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x)
----------------------------------------------------------------


def is_simple_power(x, n):
    
    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x)
----------------------------------------------------------------


def is_simple_power(x, n):
    
    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x)
----------------------------------------------------------------


def iscube(a):
    
    a = abs(a)
    return int(round(math.pow(int(round(math.pow(a, 1.0 / 3.0))), 3.0))) == a
----------------------------------------------------------------


def iscube(a):
    
    a = abs(a)
    return int(round(math.pow(int(round(math.pow(a, 1.0 / 3.0))), 3.0))) == a
----------------------------------------------------------------


def iscube(a):
    
    a = abs(a)
    return int(round(math.pow(int(round(math.pow(a, 1.0 / 3.0))), 3.0))) == a
----------------------------------------------------------------


def iscube(a):
    
    a = abs(a)
    return int(round(math.pow(int(round(math.pow(a, 1.0 / 3.0))), 3.0))) == a
----------------------------------------------------------------


def iscube(a):
    
    a = abs(a)
    return int(round(math.pow(int(round(math.pow(a, 1.0 / 3.0))), 3.0))) == a
----------------------------------------------------------------


def iscube(a):
    
    a = abs(a)
    return int(round(math.pow(int(round(math.pow(a, 1.0 / 3.0))), 3.0))) == a
----------------------------------------------------------------


def iscube(a):
    
    a = abs(a)
    return int(round(math.pow(int(round(math.pow(a, 1.0 / 3.0))), 3.0))) == a
----------------------------------------------------------------


def iscube(a):
    
    a = abs(a)
    return int(round(math.pow(int(round(math.pow(a, 1.0 / 3.0))), 3.0))) == a
----------------------------------------------------------------


def iscube(a):
    
    a = abs(a)
    return int(round(math.pow(int(round(math.pow(a, 1.0 / 3.0))), 3.0))) == a
----------------------------------------------------------------


def iscube(a):
    
    a = abs(a)
    return int(round(math.pow(int(round(math.pow(a, 1.0 / 3.0))), 3.0))) == a
----------------------------------------------------------------


def hex_key(num):
    
    primes =  + 
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
----------------------------------------------------------------


def hex_key(num):
    
    primes =  + 
    key =  +
    return sum((digit in primes) for digit in num)
----------------------------------------------------------------


def hex_key(num):
    
    primes =  + 
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
----------------------------------------------------------------


def hex_key(num):
    
    primes =  + 
    key = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            key += 1
    return key
----------------------------------------------------------------


def hex_key(num):
    
    primes =  + 
    key =  +
    return sum((digit in primes) for digit in num)
----------------------------------------------------------------


def hex_key(num):
    
    primes =  + 
    key =  +
    return sum(c in primes for c in num)
----------------------------------------------------------------


def hex_key(num):
    
    primes =  + 
    key =  +
    return sum((digit in primes) for digit in num)
----------------------------------------------------------------


def hex_key(num):
    
    primes =  + 
    key =  +
    return sum((digit in primes) for digit in num)
----------------------------------------------------------------


def hex_key(num):
    
    primes =  + 
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
----------------------------------------------------------------


def hex_key(num):
    
    primes =  + 
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
----------------------------------------------------------------


def decimal_to_binary(decimal):
    
    return  + bin(decimal)[2:] +
----------------------------------------------------------------


def decimal_to_binary(decimal):
    
    return  + bin(decimal)[2:] +
----------------------------------------------------------------


def decimal_to_binary(decimal):
    
    return  + bin(decimal)[2:] +
----------------------------------------------------------------


def decimal_to_binary(decimal):
    
    return  + bin(decimal)[2:] +
----------------------------------------------------------------


def decimal_to_binary(decimal):
    
    return  + bin(decimal)[2:] +
----------------------------------------------------------------


def decimal_to_binary(decimal):
    
    return  + bin(decimal)[2:] +
----------------------------------------------------------------


def decimal_to_binary(decimal):
    
    return  + bin(decimal)[2:] +
----------------------------------------------------------------


def decimal_to_binary(decimal):
    
    return  + bin(decimal)[2:] +
----------------------------------------------------------------


def decimal_to_binary(decimal):
    
    return  + bin(decimal)[2:] +
----------------------------------------------------------------


def decimal_to_binary(decimal):
    
    return  + bin(decimal)[2:] +
----------------------------------------------------------------


def is_happy(s):
    
    if(len(s) < 3):
      return False
    for i in range(len(s) - 2):
      
      if(s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]):
        return False
    return True
----------------------------------------------------------------


def is_happy(s):
    
    if len(s) < 3:
      return False
    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
----------------------------------------------------------------


def is_happy(s):
    
    if len(s) < 3:
      return False
    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
----------------------------------------------------------------


def is_happy(s):
    
    if len(s) < 3:
      return False
    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
----------------------------------------------------------------


def is_happy(s):
    
    if len(s) < 3:
      return False
    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
----------------------------------------------------------------


def is_happy(s):
    
    if len(s) < 3:
      return False
    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
----------------------------------------------------------------


def is_happy(s):
    
    if len(s) < 3:
      return False
    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
----------------------------------------------------------------


def is_happy(s):
    
    if len(s) < 3:
      return False
    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
----------------------------------------------------------------


def is_happy(s):
    
    if(len(s) < 3):
      return False
    for i in range(len(s) - 2):
      
      if(s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]):
        return False
    return True
----------------------------------------------------------------


def is_happy(s):
    
    if len(s) < 3:
      return False
    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
----------------------------------------------------------------


def numerical_letter_grade(grades):
    
    
    
    return []
----------------------------------------------------------------


def numerical_letter_grade(grades):
    
    
    return [] if not grades else [ letter for gpa in grades for letter in  if  gpa <=3.7 or (gpa >3.7 and gpa <=3.3) or( gpa >3.3 and gpa <=3.0) or( gpa >3.0 and gpa <=3.7) or( gpa <=3.7 and gpa <=3.0) or( gpa <=3.7 and gpa <=3.0) or( gpa <=3.7 and gpa <=3.0) or( gpa <=3.7 and gpa <=3.0)]
----------------------------------------------------------------


def numerical_letter_grade(grades):
    
    
    return []
----------------------------------------------------------------


def numerical_letter_grade(grades):
    
    
    return [] if not grades else [ letter for gpa in grades for letter in [  +----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|----------|-----------|
----------------------------------------------------------------


def numerical_letter_grade(grades):
    
    
    return []
----------------------------------------------------------------


def numerical_letter_grade(grades):
    
    
    return [] if not grades else [ letter for gpa in grades for letter in [  +---  if gpa ==  else  ---  ]]
----------------------------------------------------------------


def numerical_letter_grade(grades):
    
    
    def get_letter(score):
        if score == 4.0:
            return "A+"
        if score > 3.7:
            return "A"
        if score > 3.3:
            return "A-"
        if score > 3.0:
            return "B+"
        if score > 2.7:
            return "B"
        if score > 2.3:
            return "B-"
        if score > 2.0:
            return "C+"
        if score > 1.7:
            return "C"
        if score > 1.3:
            return "C-"
        if score > 1.0:
            return "D+"
        if score > 0.7:
            return "D"
        if score > 0.0:
            return "D-"
        return "E"
    
    return [get_letter(x) for x in grades]
----------------------------------------------------------------


def numerical_letter_grade(grades):
    
    
    return [] if not grades else [ letter for gpa in grades for letter in [  +---  if gpa ==  else  ---  if gpa <=  else  ]]
----------------------------------------------------------------


def numerical_letter_grade(grades):
    
    
    return []
----------------------------------------------------------------


def numerical_letter_grade(grades):
    
    
    def get_letter(score):
        if score == 4.0:
            return "A+"
        if score > 3.7:
            return "A"
        if score > 3.3:
            return "A-"
        if score > 3.0:
            return "B+"
        if score > 2.7:
            return "B"
        if score > 2.3:
            return "B-"
        if score > 2.0:
            return "C+"
        if score > 1.7:
            return "C"
        if score > 1.3:
            return "C-"
        if score > 1.0:
            return "D+"
        if score > 0.7:
            return "D"
        if score > 0.0:
            return "D-"
        return "E"
    
    return [get_letter(x) for x in grades]
----------------------------------------------------------------


def prime_length(string):
    
    length = len(string)
    if length == 0 or length == 1:
      return False
    for i in range(2,length):
      if length % i == 0:
        return False
    return True
----------------------------------------------------------------


def prime_length(string):
    
    length = len(string)
    if length == 0 or length == 1:
        return False
    for i in range(2,length):
        if length % i == 0:
            return False
    return True
----------------------------------------------------------------


def prime_length(string):
    
    if len(string) < 2:
      return False
    for i in range(2, len(string)):
      if len(string) % i == 0:
        return False
    return True
----------------------------------------------------------------


def prime_length(string):
    
    if len(string) < 2:
      return False
    for i in range(2, len(string)):
      if len(string) % i == 0:
        return False
    return True
----------------------------------------------------------------


def prime_length(string):
    
    if len(string) < 2:
      return False
    for i in range(2, len(string)):
      if len(string) % i == 0:
        return False
    return True
----------------------------------------------------------------


def prime_length(string):
    
    length = len(string)
    if length == 0 or length == 1:
        return False
    for i in range(2,length):
        if length % i == 0:
            return False
    return True
----------------------------------------------------------------


def prime_length(string):
    
    length = len(string)
    if length == 0 or length == 1:
      return False
    for i in range(2,length):
      if length % i == 0:
        return False
    return True
----------------------------------------------------------------


def prime_length(string):
    
    length = len(string)
    if length == 0 or length == 1:
      return False
    for i in range(2,length):
      if length % i == 0:
        return False
    return True
----------------------------------------------------------------


def prime_length(string):
    
    if len(string) < 2:
      return False
    for i in range(2, len(string)):
      if len(string) % i == 0:
        return False
    return True
----------------------------------------------------------------


def prime_length(string):
    
    if len(string) < 2:
      return False
    for i in range(2, len(string)):
      if len(string) % i == 0:
        return False
    return True
----------------------------------------------------------------


def starts_one_ends(n):
    
    if n == 1:
      return 1
    return 18 * (10 ** (n - 2))
----------------------------------------------------------------


def starts_one_ends(n):
    
    if n == 1:
        return 1
    return 18 * (10 ** (n - 2))
----------------------------------------------------------------


def starts_one_ends(n):
    
    if n == 1:
      return 1
    return 18 * (10 ** (n - 2))
----------------------------------------------------------------


def starts_one_ends(n):
    
    if n == 1:
      return 1
    return 18 * (10 ** (n - 2))
----------------------------------------------------------------


def starts_one_ends(n):
    
    if n == 1:
      return 1
    return 18 * (10 ** (n - 2))
----------------------------------------------------------------


def starts_one_ends(n):
    
    if n == 1:
      return 1
    return 18 * (10 ** (n - 2))
----------------------------------------------------------------


def starts_one_ends(n):
    
    if n == 1:
      return 1
    return 18 * (10 ** (n - 2))
----------------------------------------------------------------


def starts_one_ends(n):
    
    if n == 1:
      return 1
    return 18 * (10 ** (n - 2))
----------------------------------------------------------------


def starts_one_ends(n):
    
    if n == 1:
        return 1
    return 18 * (10 ** (n - 2))
----------------------------------------------------------------


def starts_one_ends(n):
    
    if n == 1:
      return 1
    return 18 * (10 ** (n - 2))
----------------------------------------------------------------


def solve(N):
    
    return bin(sum(int(digit) for digit in str(N)))[2:]
----------------------------------------------------------------


def solve(N):
    
    return bin(sum(int(digit) for digit in str(N)))[2:]
----------------------------------------------------------------


def solve(N):
    
    return bin(sum(int(digit) for digit in str(N)))[2:]
----------------------------------------------------------------


def solve(N):
    
    return bin(sum(int(digit) for digit in str(N)))[2:]
----------------------------------------------------------------


def solve(N):
    
    return bin(sum(int(digit) for digit in str(N)))[2:]
----------------------------------------------------------------


def solve(N):
    
    return bin(sum(int(digit) for digit in str(N)))[2:]
----------------------------------------------------------------


def solve(N):
    
    return bin(sum(int(digit) for digit in str(N)))[2:]
----------------------------------------------------------------


def solve(N):
    
    return bin(sum(int(digit) for digit in str(N)))[2:]
----------------------------------------------------------------


def solve(N):
    
    return bin(sum(int(digit) for digit in str(N)))[2:]
----------------------------------------------------------------


def solve(N):
    
    return bin(sum(int(digit) for digit in str(N)))[2:]
----------------------------------------------------------------


def add(lst):
    
    return sum([x for idx, x in enumerate(lst) if idx%2==1 and x%2==0)
----------------------------------------------------------------


def add(lst):
    
    return sum([x for idx, x in enumerate(lst) if idx%2==1 and x%2==0)
----------------------------------------------------------------


def add(lst):
    
    return sum([x for idx, x in enumerate(lst) if idx%2==1 and x%2==0])
----------------------------------------------------------------


def add(lst):
    
    return sum([x for idx, x in enumerate(lst) if idx%2==1 and x%2==0])
----------------------------------------------------------------


def add(lst):
    
    return sum([x for idx, x in enumerate(lst) if idx%2==1 and x%2==0])
----------------------------------------------------------------


def add(lst):
    
    return sum([x for idx, x in enumerate(lst) if idx%2==1 and x%2==0])
----------------------------------------------------------------


def add(lst):
    
    return sum([x for idx, x in enumerate(lst) if idx%2==1 and x%2==0])
----------------------------------------------------------------


def add(lst):
    
    return sum([x for idx, x in enumerate(lst) if idx%2==1 and x%2==0])
----------------------------------------------------------------


def add(lst):
    
    return sum([x for idx, x in enumerate(lst) if idx%2==1 and x%2==0])
----------------------------------------------------------------


def add(lst):
    
    return sum([x for idx, x in enumerate(lst) if idx%2==1 and x%2==0])
----------------------------------------------------------------


def anti_shuffle(s):
    
    return .join(sorted(list(s)))
----------------------------------------------------------------


def anti_shuffle(s):
    
    return .join(sorted(list(s)))
----------------------------------------------------------------


def anti_shuffle(s):
    
    return .join(sorted(list(s)))
----------------------------------------------------------------


def anti_shuffle(s):
    
    return .join(sorted(list(s)))
----------------------------------------------------------------


def anti_shuffle(s):
    
    return .join(sorted(list(s)))
----------------------------------------------------------------


def anti_shuffle(s):
    
    return .join(sorted(list(s)))
----------------------------------------------------------------


def anti_shuffle(s):
    
    return .join(sorted(list(s)))
----------------------------------------------------------------


def anti_shuffle(s):
    
    return .join(sorted(list(s)))
----------------------------------------------------------------


def anti_shuffle(s):
    
    return .join(sorted(list(s)))
----------------------------------------------------------------


def anti_shuffle(s):
    
    return .join(sorted(list(s)))
----------------------------------------------------------------


def get_row(lst, x):
    
    def get(row, c):
        if c in row:
            return (x, c)
        return None
    return list(sorted(lst, reverse=True))
    if(lst):
        return sorted(lst, reverse=True)
    return []
----------------------------------------------------------------

def get_row(lst, x):
    
    coords = []
    for i, row in enumerate(lst):
        for j, xx in enumerate(row):
            if xx == x:
                coords.append((i, j))
    return sorted(sorted(coords), key=lambda x: x[1], reverse=True)
----------------------------------------------------------------

def get_row(lst, x):
    
    def get_col(lst, x):
        return list(range(len(lst))) if not lst else get_col(lst[-1], x)
    
    return [(r, c) for r in range(len(lst)) for c in get_col(lst, x) if lst[r][c] == x]
----------------------------------------------------------------

def get_row(lst, x):
    
    return [(i, j) for i, row in enumerate(lst) for j, xx in enumerate(row) if xx == x]
    
def get_all(lst, x):
    
    return list(sorted(lst, reverse=True))
    
def get_all_by_coord(lst, x):
    
    return list(sorted(lst, key=lambda x: x[1], reverse=True))
    
def get_all_by_value(lst, x):
    
    return list(sorted(lst, key=lambda x: x[0])
                if isinstance(lst[0], list)
                else sorted(lst))
----------------------------------------------------------------

def get_row(lst, x):
    
    coords = []
    for i, row in enumerate(lst):
        for j, xx in enumerate(row):
            if xx == x:
                coords.append((i, j))
    return sorted(sorted(coords), key=lambda x: x[1], reverse=True)
----------------------------------------------------------------


def get_row(lst, x):
    
    return [(i, j) for i, row in enumerate(lst) for j, xx in enumerate(row) if xx == x]
    
def get_all(lst, x):
    
    return list(sorted(lst, reverse=True))
    
def get_all_coord(lst, x):
    
    return list(sorted(lst, reverse=True))
    
def get_all_value(lst, x):
    
    return list(sorted(lst, reverse=True))
    
def get_all_value_coord(lst, x):
    
    return list(sorted(lst, reverse=True))
    
def get_all_coord_value(lst, x):
    
    return list(sorted(lst, reverse=True))
    
def get_all_value_coord_value(lst, x):
    
    return list(sorted(lst, reverse=True))
    
def get_all_value_coord_value_value(lst, x):
    
    return list(sorted(lst, reverse=True))
    
def get_all_value_coord_value_value_value(lst, x):
    
    return list(sorted(lst, reverse=True))
    
def get_all_value_coord_value_value_value_value(lst, x):
    
    return list(sorted(lst, reverse=True))
    
def get_all_value_coord_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value
----------------------------------------------------------------


def get_row(lst, x):
    
    return [(i, j) for i, row in enumerate(lst) for j, xx in enumerate(row) if xx == x]
    
def get_all(lst, x):
    
    return list(set(tuple(i, j) for i, row in enumerate(lst) for j, xx in enumerate(row) if xx == x))
----------------------------------------------------------------


def get_row(lst, x):
    
    coords = []
    for i, row in enumerate(lst):
        for j, xx in enumerate(row):
            if xx == x:
                coords.append((i, j))
    return sorted(sorted(coords), key=lambda x: x[1], reverse=True)
----------------------------------------------------------------


def get_row(lst, x):
    
    coords = []
    for i, row in enumerate(lst):
        for j, xx in enumerate(row):
            if xx == x:
                coords.append((i, j))
    return sorted(sorted(coords), key=lambda x: x[1], reverse=True)
----------------------------------------------------------------


def get_row(lst, x):
    
    coords = []
    for i, row in enumerate(lst):
        for j, xx in enumerate(row):
            if xx == x:
                coords.append((i, j))
    return sorted(sorted(coords), key=lambda x: x[1], reverse=True)
----------------------------------------------------------------


def sort_array(array):
    
    return [] if len(array) == 0 else sorted(array, reverse= ( array[0]+ array[-1] ) % 2 == 0)
----------------------------------------------------------------


def sort_array(array):
    
    return [] if len(array) == 0 else sorted(array, reverse= ( array[0]+array[-1] ) % 2 == 0)
----------------------------------------------------------------


def sort_array(array):
    
    return [] if len(array) == 0 else sorted(array, reverse= ( array[0]+array[-1] ) % 2 == 0)
----------------------------------------------------------------


def sort_array(array):
    
    return [] if len(array) == 0 else sorted(array, reverse= ( array[0]+array[-1] ) % 2 == 0)
----------------------------------------------------------------


def sort_array(array):
    
    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)
----------------------------------------------------------------


def sort_array(array):
    
    return [] if len(array) == 0 else sorted(array, reverse= ( array[0]+ array[-1] ) % 2 == 0)
----------------------------------------------------------------


def sort_array(array):
    
    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)
----------------------------------------------------------------


def sort_array(array):
    
    return [] if len(array) == 0 else sorted(array, reverse= ( array[0]+array[-1] ) % 2 == 0)
----------------------------------------------------------------


def sort_array(array):
    
    return [] if len(array) == 0 else sorted(array, reverse= ( array[0]+array[-1] ) % 2 == 0)
----------------------------------------------------------------


def sort_array(array):
    
    return [] if len(array) == 0 else sorted(array, reverse= ( array[0]+array[-1] ) % 2 == 0)
----------------------------------------------------------------


def encrypt(s):
    
    d = 
    out = 
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
----------------------------------------------------------------


def encrypt(s):
    
    d = 
    out = 
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
----------------------------------------------------------------


def encrypt(s):
    
    d = 
    out = 
    for letter in s:
        if letter in d:
            out += d[(d.index(letter)+2*2) % 26]
        else:
            out += letter
    return out
----------------------------------------------------------------


def encrypt(s):
    
    d = 
    out = 
    for letter in s:
        if letter in d:
            out += d[(d.index(letter)+2*2) % 26]
        else:
            out += letter
    return out
----------------------------------------------------------------


def encrypt(s):
    
    d = 
    out = 
    for letter in s:
        if letter in d:
            out += d[(d.index(letter)+2*2) % 26]
        else:
            out += letter
    return out
----------------------------------------------------------------


def encrypt(s):
    
    d = 
    out = 
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
----------------------------------------------------------------


def encrypt(s):
    
    d = 
    out = 
    for letter in s:
        if letter in d:
            out += d[(d.index(letter)+2*2) % 26]
        else:
            out += letter
    return out
----------------------------------------------------------------


def encrypt(s):
    
    d = 
    out = 
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
----------------------------------------------------------------


def encrypt(s):
    
    d = 
    out = 
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
----------------------------------------------------------------


def encrypt(s):
    
    d = 
    out = 
    for letter in s:
        if letter in d:
            out += d[(d.index(letter)+2*2) % 26]
        else:
            out += letter
    return out
----------------------------------------------------------------


def next_smallest(lst):
    
    sorted_lst = sorted(lst)
    return None if len(sorted_lst) < 2 else sorted_lst[1]
----------------------------------------------------------------


def next_smallest(lst):
    
    sorted_lst = sorted(lst)
    return None if len(sorted_lst) < 2 else sorted_lst[1]
----------------------------------------------------------------


def next_smallest(lst):
    
    sorted_lst = sorted(lst)
    return None if len(sorted_lst) < 2 else sorted_lst[1]
----------------------------------------------------------------


def next_smallest(lst):
    
    sorted_lst = sorted(lst)
    return None if len(sorted_lst) < 2 else sorted_lst[1]
----------------------------------------------------------------


def next_smallest(lst):
    
    smallest = None
    second_smallest = None
    for x in lst:
        if smallest is None:
            smallest = x
        elif x < smallest:
            second_smallest = smallest
            smallest = x
        elif second_lowest > x:
            second_smallest = x
    if second_smallest is None:
        return None
    return second_smallest
----------------------------------------------------------------


def next_smallest(lst):
    
    sorted_lst = sorted(lst)
    return None if len(sorted_lst) < 2 else sorted_lst[1]
----------------------------------------------------------------


def next_smallest(lst):
    
    smallest = set(lst)
    return None if len(lst) < 2 else min(lst, key=lambda x: (x, smallest.difference(set(lst)).count(x)))
----------------------------------------------------------------


def next_smallest(lst):
    
    smallest = set(lst)
    return None if len(smallest) < 2 else (sorted(smallest)[-1] + sorted(smallest)[-2])
----------------------------------------------------------------


def next_smallest(lst):
    
    sorted_lst = sorted(lst)
    return None if len(sorted_lst) < 2 else sorted_lst[1]
----------------------------------------------------------------


def next_smallest(lst):
    
    sorted_lst = sorted(lst)
    return None if len(sorted_lst) < 2 else sorted_lst[1]
----------------------------------------------------------------


def is_bored(S):
    
    import re
    sentences = re.split(r, S)
    return sum(sentence[0:2] ==  for sentence in sentences)
----------------------------------------------------------------


def is_bored(S):
    
    import re
    sentences = re.split(r, S)
    return sum(sentence[0:2] ==  for sentence in sentences)
----------------------------------------------------------------


def is_bored(S):
    
    import re
    sentences = re.split(r, S)
    return sum(sentence[0:2] ==  for sentence in sentences)
----------------------------------------------------------------


def is_bored(S):
    
    import re
    sentences = re.split(r, S)
    return sum(sentence[0:2] ==  for sentence in sentences)
----------------------------------------------------------------


def is_bored(S):
    
    import re
    sentences = re.split(r, S)
    return sum(sentence[0:2] ==  for sentence in sentences)
----------------------------------------------------------------


def is_bored(S):
    
    import re
    sentences = re.split(r, S)
    return sum(sentence[0:2] ==  for sentence in sentences)
----------------------------------------------------------------


def is_bored(S):
    
    import re
    sentences = re.split(r, S)
    return sum(sentence[0:2] ==  for sentence in sentences)
----------------------------------------------------------------


def is_bored(S):
    
    import re
    sentences = re.split(r, S)
    return sum(sentence[0:2] ==  for sentence in sentences)
----------------------------------------------------------------


def is_bored(S):
    
    import re
    sentences = re.split(r, S)
    return sum(sentence[0:2] ==  for sentence in sentences)
----------------------------------------------------------------


def is_bored(S):
    
    import re
    sentences = re.split(r, S)
    return sum(sentence[0:2] ==  for sentence in sentences)
----------------------------------------------------------------


def any_int(x, y, z):
    
    
    if(isinstance(x,int) and isinstance(y,int) and isinstance(z,int)):
        if((x+y==z) or (x+z==y) or (x==y+z)):
            return True
        return False
    return False
----------------------------------------------------------------


def any_int(x, y, z):
    
    
    if(isinstance(x,int) and isinstance(y,int) and isinstance(z,int)):
        if((x+y==z) or (x+z==y) or (x==y+z)):
            return True
        return False
    return None
----------------------------------------------------------------


def any_int(x, y, z):
    
    
    if(isinstance(x,int) and isinstance(y,int) and isinstance(z,int)):
        if((x+y==z) or (x+z==y) or (x==y+z)):
            return True
        return False
    return False
----------------------------------------------------------------


def any_int(x, y, z):
    
    
    if(isinstance(x,int) and isinstance(y,int) and isinstance(z,int)):
        if((x+y==z) or (x+z==y) or (x==y+z)):
            return True
        return False
    return None
----------------------------------------------------------------


def any_int(x, y, z):
    
    
    if(isinstance(x,int) and isinstance(y,int) and isinstance(z,int)):
        if((x+y==z) or (x+z==y) or (x==y+z)):
            return True
        return False
    return None
----------------------------------------------------------------


def any_int(x, y, z):
    
    
    if(isinstance(x,int) and isinstance(y,int) and isinstance(z,int)):
        if((x+y==z) or (x+z==y) or (x==y+z)):
            return True
        return False
    return None
----------------------------------------------------------------


def any_int(x, y, z):
    
    
    if(isinstance(x,int) and isinstance(y,int) and isinstance(z,int)):
        if((x+y==z) or (x+z==y) or (x==y+z)):
            return True
        return False
    return None
----------------------------------------------------------------


def any_int(x, y, z):
    
    
    if(isinstance(x,int) and isinstance(y,int) and isinstance(z,int)):
        if((x+y==z) or (x+z==y) or (x==y+z)):
            return True
        return False
    return None
----------------------------------------------------------------


def any_int(x, y, z):
    
    
    if(isinstance(x,int) and isinstance(y,int) and isinstance(z,int)):
        if((x+y==z) or (x+z==y) or (x==y+z)):
            return True
        return False
    return None
----------------------------------------------------------------


def any_int(x, y, z):
    
    
    if(isinstance(x,int) and isinstance(y,int) and isinstance(z,int)):
        if((x+y==z) or (x+z==y) or (x==y+z)):
            return True
        return False
    return None
----------------------------------------------------------------


def encode(message):
    
    vowels =  +
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    return .join(vowels_replace[i] if i in vowels else i for i in message)
----------------------------------------------------------------


def encode(message):
    
    vowels = set((, , , , , , , , , , ))
    t_case = message.swapcase()
    return .join(c if c in vowels else chr(ord(c) + 2) for c in t_case)
----------------------------------------------------------------


def encode(message):
    
    vowels = 'AEIOUaeiou'
    t_vowels =  + vowels[2::-1] 
    
    return .join(c if c in t_vowels else  + chr(ord(c) + 2) for c in message)
----------------------------------------------------------------


def encode(message):
    
    """
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """
    vowels = 'AEIOUaeiou'
    t_vowels =  + vowels[2:] 
    
    return .join(c if i == letter else  for i, letter in  if  in t_vowels  ) for c in message)
----------------------------------------------------------------


def encode(message):
    
    """
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """
    vowels = 'AEIOUaeiou'
    t_vowels =  + vowels[2:] 
    
    return .join(c if i in  else  for i, c in enumerate(message))
            if i != 22 else 
            + vowels[2: ] 
            for i, c in enumerate(message)
            if i != 22 else
            + vowels[2: ] 
            for i, c in enumerate(message)
            if i != 22 else
            + vowels[2: ] 
            for i, c in enumerate(message)
            if i != 22 else
            + vowels[2: ] 
            for i, c in enumerate(message)
            if i != 22 else
            + vowels[2: ] 
            for i, c in enumerate(message)
            if i != 22 else
            + vowels[2: ] 
            for i, c in enumerate(message)
            if i != 22 else
            + vowels[2: ] 
            for i, c in enumerate(message)
            if i != 22 else
            + vowels[2: ] 
            for i, c in enumerate(message)
            if i != 22 else
            + vowels[2: ] 
            for i, c in enumerate(message)
            if i != 22 else
            + vowels[2: ] 
            for i, c in enumerate(message)
            if i != 22 else
            + vowels[2: ] 
            for i, c in enumerate
----------------------------------------------------------------


def encode(message):
    
    vowels = set((
                'a', 'e', 'i', 'o', 'u'
                ))
    t_vowels = set((
                'A', 'E', 'I', 'O', 'U'
                ))
    
    return .join((
                t_vowels if i in vowels else i
                )for i in message)
----------------------------------------------------------------


def encode(message):
    
    
    def get_index(c):
        if c in vowels:
            return (
                ord(c)
                if c in lower
                else ord(c.upper())
                if c in upper else 0
            )
        return 0

    lower = 'abcdefghijklmnopqrstuvwxyz'
    upper = lower.swapcase()
    vowels = 'aeiou'
    return .join(c if i == get_index(c) else c for i, c in enumerate(message))
----------------------------------------------------------------


def encode(message):
    
    """
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """
    vowels = 'AEIOUaeiou'
    t_vowels =  + vowels[2::-1] 
    replace = dict([(i, chr(ord(i) + 2)) for i in t_vowels]) 
    message = message.swapcase() 
    return .join(replace[i] if i in vowels else i for i in message)
----------------------------------------------------------------


def encode(message):
    
    
    def get_index(c):
        if c in 
           :
            if c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in  or  or c in
----------------------------------------------------------------


def encode(message):
    
    """
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """
    vowels = 'AEIOUaeiou'
    t_vowels =  + vowels[2:] 
    t_message =  + message[2:]
    return t_message.replace( , chr(ord( ) + ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( 
----------------------------------------------------------------


def skjkasdkd(lst):
    
    def is_prime(n):
        for k in range(2, n-1):
            if (n % k == 0):
                return False
        return True
    biggest = 0
    sum_digits = 0
    for x in lst:
        if is_prime(x):
            if (x > biggest):
                biggest = x
    for digit in str(biggest):
        sum_digits += int(digit)
    return sum_digits
----------------------------------------------------------------


def skjkasdkd(lst):
    
    def is_prime(n):
        for k in range(2, n-1):
            if (n % k == 0):
                return False
        return True
    biggest = 0
    sum_digits = 0
    for x in lst:
        if is_prime(x):
            if (x > biggest):
                biggest = x
    for j in str(biggest):
        sum_digits += int(j)
    return sum_digits
----------------------------------------------------------------


def skjkasdkd(lst):
    
    def is_prime(n):
        for k in range(2, n-1):
            if (n % k == 0):
                return False
        return True
    biggest = 0
    sum_of_digits = 0
    for x in lst:
        if is_prime(x):
            if (x > biggest):
                biggest = x
    for c in str(biggest):
        sum_of_digits += int(c)
    return sum_of_digits
----------------------------------------------------------------


def skjkasdkd(lst):
    
    def is_prime(n):
        for k in range(2, n-1):
            if (n % k == 0):
                return False
        return True
    biggest_prime = 0
    sum_digits = 0
    for x in lst:
        if is_prime(x):
            if (biggest_prime < x):
                biggest_prime = x
    for j in str(biggest_prime):
        sum_digits += int(j)
    return sum_digits
----------------------------------------------------------------


def skjkasdkd(lst):
    
    def is_prime(n):
        for k in range(2, n-1):
            if (n % k == 0):
                return False
        return True
    biggest = 0
    sum_digits = 0
    for x in lst:
        if is_prime(x):
            if (x > biggest):
                biggest = x
    for digit in str(biggest):
        sum_digits += int(digit)
    return sum_digits
----------------------------------------------------------------


def skjkasdkd(lst):
    
    def is_prime(n):
        for k in range(2, n-1):
            if (n % k == 0):
                return False
        return True
    biggest_prime = 0
    sum_digits = 0
    for x in lst:
        if is_prime(x):
            if (biggest_prime < x):
                biggest_prime = x
    for c in str(biggest_prime):
        sum_digits += int(c)
    return sum_digits
----------------------------------------------------------------


def skjkasdkd(lst):
    
    def is_prime(n):
        for k in range(2, n-1):
            if (n % k == 0):
                return False
        return True
    biggest = 0
    sum_digits = 0
    for x in lst:
        if is_prime(x):
            if (x > biggest):
                biggest = x
    for j in str(biggest):
        sum_digits += int(j)
    return sum_digits
----------------------------------------------------------------


def skjkasdkd(lst):
    
    def is_prime(n):
        for k in range(2, n-1):
            if (n % k == 0):
                return False
        return True
    biggest_prime_so_far = 0
    sum_of_digits = 0
    for x in lst:
        if is_prime(x):
            if (x > biggest_prime_so_far):
                biggest_prime_so_far = x
                
                digits = list(str(x))
                digits.reverse()
                sum_of_digits += sum(int(digit) for digit in digits)
    return sum_of_digits
----------------------------------------------------------------


def skjkasdkd(lst):
    
    def is_prime(n):
        for k in range(2, n-1):
            if (n % k == 0):
                return False
        return True
    biggest = 0
    sum_digits = 0
    for x in lst:
        if is_prime(x):
            if (x > biggest):
                biggest = x
    for s in str(biggest):
        sum_digits += int(s)
    return sum_digits
----------------------------------------------------------------


def skjkasdkd(lst):
    
    def is_prime(n):
        for k in range(2, n-1):
            if (n % k == 0):
                return False
        return True
    biggest_prime_so_far = 0
    sum_of_digits = 0
    for x in lst:
        if is_prime(x):
            if (biggest_prime_so_far < x):
                biggest_prime_so_far = x
    for j in range(len(str(biggest_prime_so_far))):
        sum_of_digits += biggest_prime_so_far % 10
    return sum_of_digits
----------------------------------------------------------------


def check_dict_case(dict):
    
    if(len(dict)==0):
      return False
    state=1
    if(state==1):
      for k in dict.keys():
        if(state==1):
          if((k.isupper() != k.islower())or(k.isupper() != k)):
            state=0;
            break
          
    if(state==1):
      for k in dict.keys():
        if(state==1):
          if((k.isupper() != k.islower())or(k.isupper() != k)):
            state=0;
            break
          
    if(state==1):
      for k in dict.keys():
        if(state==1):
          if((k.isupper() != k.islower())or(k.isupper() != k)):
            state=0;
            break
          
    if(state==1):
      return True
    return False
----------------------------------------------------------------


def check_dict_case(dict):
    
    if(len(dict)==0):
      return False
    state=1
    if(state==1):
      for k in dict.keys():
        if(state==1):
          if((k.isupper() != k.islower())or(k.isupper() != k)):
            state=0;
            break
          
    if(state==1):
      for k in dict.keys():
        if(state==1):
          if((k.islower() != k.isupper())or(k.islower() != k)):
            state=0;
            break
          
    if(state==1):
      return True
    return False
----------------------------------------------------------------


def check_dict_case(dict):
    
    if(len(dict)==0):
      return False
    if((dict.keys()|dict.values())==0):
      return False
    if((dict.keys()|dict.values())|((dict.keys()|dict.values())|(dict.keys()|dict.values()))==1):
      return True
    return False
----------------------------------------------------------------


def check_dict_case(dict):
    
    if(len(dict)==0):
      return False
    state=1
    if(state==1):
      for k in dict.keys():
        if(state==1 and not k == k.swapcase()):
          state=2
          break
        if(state==1 and not k == k.swapcase()):
          break
      if(state==1):
        return False
      state=1
      for k in dict.keys():
        if(state==1 and not k == k.swapcase()):
          state=2
          break
        if(state==1 and not k == k.swapcase()):
          break
      if(state==1):
        return False
      state=1
      for k in dict.keys():
        if(state==1 and not k == k.swapcase()):
          state=2
          break
        if(state==1 and not k == k.swapcase()):
          break
      if(state==1):
        return False
      state=1
      for k in dict.keys():
        if(state==1 and not k == k.swapcase()):
          state=2
          break
        if(state==1 and not k == k.swapcase()):
          break
      if(state==1):
        return False
      state=1
      for k in dict.keys():
        if(state==1 and not k == k.swapcase()):
          state=2
          break
        if(state==1 and not k == k.swapcase()):
          break
      if(state==1):
        return False
      state=1
      for k in dict.keys():
        if(state==1 and not k == k.swapcase()):
          state=2
          break
        if(state==1 and not k == k.swapcase()):
          break
      if(state==1):
        return False
      state=1
      for k in dict.keys():
        if(state==1 and not k == k.swapcase()):
          state=2
          break
        if(state==1 and not k == k.swapcase()):
          break
      if(state==1):
        return False
      state
----------------------------------------------------------------


def check_dict_case(dict):
    
    if(len(dict)==0):
      return False
    state=1
    if(state==1):
      for k in dict.keys():
        if(state==1 and not k == k.swapcase()):
          state=
          break
        if(state==1 and not k == k.swapcase()):
          break
      if(state==1):
        for k in dict.keys():
          if(state==1 and not k == k.swapcase()):
            break
          if(state==1 and not k == k.swapcase()):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):
            break
          if(state==1):

----------------------------------------------------------------


def check_dict_case(dict):
    
    if(len(dict)==0):
      return False
    if((dict.keys()|dict.values())==0):
      return False
    if((dict.keys()|dict.values())|((dict.keys()|dict.values())|(dict.keys()|dict.values()))==1):
      return True
    return False
----------------------------------------------------------------


def check_dict_case(dict):
    
    if(len(dict)==0):
      return False
    state=1
    if(state==1):
      for k in dict.keys():
        if(state==1):
          if((k.isupper()==False or k.islower()==False)):
            state=2
          if(state==1):
            if((state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or (state==1 and k=='A') or 
----------------------------------------------------------------


def check_dict_case(dict):
    
    if(len(dict)==0):
      return False
    if((dict.keys()|dict.values())==0):
      return False
    if((dict.keys()|dict.values())|((dict.keys()|dict.values())|(dict.keys()|dict.values()))==1):
      return True
    return False
----------------------------------------------------------------


def check_dict_case(dict):
    
    if(len(dict)==0):
      return False
    if((dict.keys()|dict.keys())==dict):
      return True
    return False
----------------------------------------------------------------


def check_dict_case(dict):
    
    if(len(dict)==0):
      return False
    state=1
    if(state==1):
      for k in dict.keys():
        if(state==1):
          if((k.isupper()==False or k.islower()==False)):
            state=2
            break
          
    if(state==2):
      for k in dict.keys():
        if(state==1):
          if((k.isupper()==True or k.islower()==True)):
            state=2
            break
          
    if(state==2):
      return True
    return False
----------------------------------------------------------------


def count_up_to(n):
    
    def is_prime(x):
        for k in range(2,x):
            if (x % k == 0):
                return False
        return True
    primes = []
    for i in range(n):
        if is_prime(i):
            primes.append(i)
    return primes
----------------------------------------------------------------


def count_up_to(n):
    
    def is_prime(x):
        for k in range(2, x):
            if (x % k == 0):
                return False
        return True
    primes = []
    for i in range(n):
        if is_prime(i):
            primes.append(i)
    return primes
----------------------------------------------------------------


def count_up_to(n):
    
    def is_prime(x):
        for k in range(2,x):
            if (x % k == 0):
                return False
        return True
    primes = []
    for i in range(n):
        if is_prime(i):
            primes.append(i)
    return primes
----------------------------------------------------------------


def count_up_to(n):
    
    def is_prime(x):
        for k in range(2,x):
            if (x % k == 0):
                return False
        return True
    primes = []
    for i in range(n):
        if is_prime(i):
            primes.append(i)
    return primes
----------------------------------------------------------------


def count_up_to(n):
    
    def is_prime(x):
        for k in range(2,x):
            if (x % k == 0):
                return False
        return True
    primes = []
    for i in range(n):
        if is_prime(i):
            primes.append(i)
    return primes
----------------------------------------------------------------


def count_up_to(n):
    
    def is_prime(x):
        for k in range(2, x):
            if (x % k == 0):
                return False
        return True
    primes = []
    for i in range(n):
        if is_prime(i):
            primes.append(i)
    return primes
----------------------------------------------------------------


def count_up_to(n):
    
    def is_prime(x):
        for k in range(2, x):
            if (x % k == 0):
                return False
        return True
    primes = []
    for i in range(n):
        if is_prime(i):
            primes.append(i)
    return primes
----------------------------------------------------------------


def count_up_to(n):
    
    def is_prime(x):
        for k in range(2,x):
            if (x % k == 0):
                return False
        return True
    primes = []
    for i in range(n):
        if is_prime(i):
            primes.append(i)
    return primes
----------------------------------------------------------------


def count_up_to(n):
    
    def is_prime(x):
        for k in range(2,x):
            if (x % k == 0):
                return False
        return True
    primes = []
    for i in range(n):
        if is_prime(i):
            primes.append(i)
    return primes
----------------------------------------------------------------


def count_up_to(n):
    
    def is_prime(x):
        for k in range(2,x):
            if (x % k == 0):
                return False
        return True
    primes = []
    for i in range(n):
        if is_prime(i):
            primes.append(i)
    return primes
----------------------------------------------------------------


def multiply(a, b):
    
    return abs(a % 10) * abs(b % 10)
----------------------------------------------------------------


def multiply(a, b):
    
    return abs(a % 10) * abs(b % 10)
----------------------------------------------------------------


def multiply(a, b):
    
    return abs(a % 10) * abs(b % 10)
----------------------------------------------------------------


def multiply(a, b):
    
    return abs(a % 10) * abs(b % 10)
----------------------------------------------------------------


def multiply(a, b):
    
    return abs(a % 10) * abs(b % 10)
----------------------------------------------------------------


def multiply(a, b):
    
    return abs(a % 10) * abs(b % 10)
----------------------------------------------------------------


def multiply(a, b):
    
    return abs(a % 10) * abs(b % 10)
----------------------------------------------------------------


def multiply(a, b):
    
    return abs(a % 10) * abs(b % 10)
----------------------------------------------------------------


def multiply(a, b):
    
    return abs(a % 10) * abs(b % 10)
----------------------------------------------------------------


def multiply(a, b):
    
    return abs(a % 10) * abs(b % 10)
----------------------------------------------------------------


def count_upper(s):
    
    upper_count = 0
    for i in range(0,len(s),2):
        if s[i] in :
            upper_count += 1
    return upper_count
----------------------------------------------------------------


def count_upper(s):
    
    upper_count = 0
    for i in range(0, len(s), 2):
        if s[i] in upper_keys:
            upper_count += 1
    return upper_count
----------------------------------------------------------------


def count_upper(s):
    
    upper_count = 0
    for i in range(0, len(s), 2):
        if s[i] in upper_keys:
            upper_count += 1
    return upper_count
----------------------------------------------------------------


def count_upper(s):
    
    count = 0
    for i in range(0,len(s),2):
        if s[i] in upper_vowels:
            count += 1
    return count
----------------------------------------------------------------


def count_upper(s):
    
    upper_count = 0
    for i in range(0, len(s), 2):
        if s[i] in :
            upper_count += 1
    return upper_count
----------------------------------------------------------------


def count_upper(s):
    
    upper_count = 0
    for i in range(0, len(s), 2):
        if s[i] in upper_vowels:
            upper_count += 1
    return upper_count
----------------------------------------------------------------


def count_upper(s):
    
    count = 0
    for i in range(0,len(s),2):
        if s[i] in upper_vowels:
            count += 1
    return count
----------------------------------------------------------------


def count_upper(s):
    
    count = 0
    for i in range(0,len(s),2):
        if s[i] in upper_vowels:
            count += 1
    return count
----------------------------------------------------------------


def count_upper(s):
    
    count = 0
    for i in range(0,len(s),2):
        if s[i] in upper_vowels:
            count += 1
    return count
----------------------------------------------------------------


def count_upper(s):
    
    upper_count = 0
    for i in range(0,len(s),2):
        if s[i] in :
            upper_count += 1
    return upper_count
----------------------------------------------------------------


def closest_integer(value):
    
    if value[-1] ==:
        value += "0"
    value = float(value)
    return int(round(value))
----------------------------------------------------------------


def closest_integer(value):
    
    if value[-1] ==:
        value += "0"
    value = float(value)
    return int(round(value))
----------------------------------------------------------------


def closest_integer(value):
    
    if value[-1] ==:
        value += "0"
    value = float(value)
    return int(value) if value != value else value
----------------------------------------------------------------


def closest_integer(value):
    
    if value[-1] ==:
        value = value[:-1]
    if value[-2:] ==  or value[-2:] == :
        value += "0"
    return int(value)
----------------------------------------------------------------


def closest_integer(value):
    
    if value[-1] ==:
        value += "0"
    value = float(value)
    return int(value)
----------------------------------------------------------------


def closest_integer(value):
    
    if value[-1] ==:
        value += "0"
    value = float(value)
    return int(round(value))
----------------------------------------------------------------


def closest_integer(value):
    
    if value[-1] ==:
        value = value[:-1]
    if value[-2:] ==  or value[-2:] == :
        value += "0"
    return int(value)
----------------------------------------------------------------


def closest_integer(value):
    
    if value[-1] ==:
        value += "0"
    value = float(value)
    return int(round(value))
----------------------------------------------------------------


def closest_integer(value):
    
    if value[-1] ==:
        value = value[:-1]
    if value:
        return int(value)
    return 0
----------------------------------------------------------------


def closest_integer(value):
    
    if value[-1] ==:
        value += "0"
    value = float(value)
    return int(value) if value != value else value
----------------------------------------------------------------

def make_a_pile(n):
    
    return [n + 2*i for i in range(n)]
----------------------------------------------------------------

def make_a_pile(n):
    
    return [n + 2*i for i in range(n)]
----------------------------------------------------------------

def make_a_pile(n):
    
    return [n + 2*i for i in range(n)]
----------------------------------------------------------------

def make_a_pile(n):
    
    return [n + 2*i for i in range(n)]
----------------------------------------------------------------

def make_a_pile(n):
    
    return [n + 2*i for i in range(n)]
----------------------------------------------------------------

def make_a_pile(n):
    
    return [n + 2*i for i in range(n)]
----------------------------------------------------------------

def make_a_pile(n):
    
    return [n + 2*i for i in range(n)]
----------------------------------------------------------------

def make_a_pile(n):
    
    return [n + 2*i for i in range(n)]
----------------------------------------------------------------

def make_a_pile(n):
    
    return [n + 2*i for i in range(n)]
----------------------------------------------------------------

def make_a_pile(n):
    
    return [n + 2*i for i in range(n)]
----------------------------------------------------------------


def words_string(s):
    
    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == :
            s_list.append()
        else:
            s_list.append(letter)
    
    return s_list
----------------------------------------------------------------


def words_string(s):
    
    if not s:
        return []

    words = []

    for letter in s:
        if letter == :
            words.append()
        else:
            words.append(letter)
    return words
----------------------------------------------------------------


def words_string(s):
    
    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == :
            s_list.append()
        else:
            s_list.append(letter)
    
    return s_list
----------------------------------------------------------------


def words_string(s):
    
    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == :
            s_list.append()
        else:
            s_list.append(letter)
    
    return s_list
----------------------------------------------------------------


def words_string(s):
    
    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == :
            s_list.append()
        else:
            s_list.append(letter)
    
    return s_list
----------------------------------------------------------------


def words_string(s):
    
    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == :
            s_list.append()
        else:
            s_list.append(letter)
    s_list = .join(s_list)
    return s_list.split()
----------------------------------------------------------------


def words_string(s):
    
    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == :
            s_list.append()
        else:
            s_list.append(letter)
    s_list = .join(s_list)
    return s_list.split()
----------------------------------------------------------------


def words_string(s):
    
    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == :
            s_list.append()
        else:
            s_list.append(letter)
    
    return s_list
----------------------------------------------------------------


def words_string(s):
    
    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == :
            s_list.append()
        else:
            s_list.append(letter)
    s_list = .join(s_list)
    return s_list.split()
----------------------------------------------------------------


def words_string(s):
    
    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == :
            s_list.append()
        else:
            s_list.append(letter)
    
    return s_list
----------------------------------------------------------------


def choose_num(x, y):
    
    if y < x:
        return -1
    if y % 2 == 0:
        return y
    if y == x:
        return -1
    return y - 1
----------------------------------------------------------------


def choose_num(x, y):
    
    if y < x:
        return -1
    if y % 2 == 0:
        return y
    if y == x:
        return -1
    return y - 1
----------------------------------------------------------------


def choose_num(x, y):
    
    if y < x:
        return -1
    if y % 2 == 0:
        return y
    if y == x:
        return -1
    return y - 1
----------------------------------------------------------------


def choose_num(x, y):
    
    if y < x:
        return -1
    if y % 2 == 0:
        return y
    if y == x:
        return -1
    return y - 1
----------------------------------------------------------------


def choose_num(x, y):
    
    if y < x:
        return -1
    if y % 2 == 0:
        return y
    if y == x:
        return -1
    return y - 1
----------------------------------------------------------------


def choose_num(x, y):
    
    if y < x:
        return -1
    if y % 2 == 0:
        return y
    if y == x:
        return -1
    return y - 1
----------------------------------------------------------------


def choose_num(x, y):
    
    if y < x:
        return -1
    if y % 2 == 0:
        return y
    if y == x:
        return -1
    return y - 1
----------------------------------------------------------------


def choose_num(x, y):
    
    if y < x:
        return -1
    if y % 2 == 0:
        return y
    if y == x:
        return -1
    return y - 1
----------------------------------------------------------------


def choose_num(x, y):
    
    if y < x:
        return -1
    if y % 2 == 0:
        return y
    if y == x:
        return -1
    return y - 1
----------------------------------------------------------------


def choose_num(x, y):
    
    if y < x:
        return -1
    if y % 2 == 0:
        return y
    if y == x:
        return -1
    return y - 1
----------------------------------------------------------------


def rounded_avg(n, m):
    
    if m < n:
        return -1
    if m == n:
        return 
    summation = 0
    for k in range(n, m+1):
        summation += k
    return bin(round(summation))[2:]
----------------------------------------------------------------


def rounded_avg(n, m):
    
    if m < n:
        return -1
    if m == n:
        return 
    sum_value = 0
    for i in range(n, m+1):
        sum_value += i
    return bin(round(sum_value/(m - n + 1)))[2:]
----------------------------------------------------------------


def rounded_avg(n, m):
    
    if m < n:
        return -1
    if m == n:
        return 
    sum_value = 0
    for k in range(n, m+1):
        sum_value += k
    return bin(round(sum_value/(m - n + 1)))[2:]
----------------------------------------------------------------


def rounded_avg(n, m):
    
    if m < n:
        return -1
    if m == n:
        return 
    summation = 0
    for k in range(n, m+1):
        summation += k
    return bin(round(summation))[2:]
----------------------------------------------------------------


def rounded_avg(n, m):
    
    if m < n:
        return -1
    if m == n:
        return 
    summation = 0
    for k in range(n, m+1):
        summation += k
    return bin(round(summation))[2:]
----------------------------------------------------------------


def rounded_avg(n, m):
    
    if m < n:
        return -1
    if m == n:
        return 
    sum_value = 0
    for i in range(n, m+1):
        sum_value += i
    return bin(round(sum_value/(m - n + 1)))[2:]
----------------------------------------------------------------


def rounded_avg(n, m):
    
    if m < n:
        return -1
    if m == n:
        return 
    sum_value = 0
    for i in range(n, m+1):
        sum_value += i
    return bin(round(sum_value/(m - n + 1)))[2:]
----------------------------------------------------------------


def rounded_avg(n, m):
    
    if m < n:
        return -1
    if m == n:
        return 
    summation = 0
    for k in range(n, m+1):
        summation += k
    return bin(round(summation))[2:]
----------------------------------------------------------------


def rounded_avg(n, m):
    
    if m < n:
        return -1
    if m == n:
        return 
    summation = 0
    for k in range(n, m+1):
        summation += k
    return bin(round(summation))[2:]
----------------------------------------------------------------


def rounded_avg(n, m):
    
    if m < n:
        return -1
    if m == n:
        return 
    summation = 0
    for k in range(n, m+1):
        summation += k
    return bin(round(summation))[2:]
----------------------------------------------------------------


def unique_digits(x):
    
    return [] if not x else sorted(x, reverse=True)
----------------------------------------------------------------


def unique_digits(x):
    
    return [] if not x else sorted(x, reverse=True)
----------------------------------------------------------------


def unique_digits(x):
    
    return [] if not x else sorted(x, reverse=True)
----------------------------------------------------------------


def unique_digits(x):
    
    return [] if not x else sorted(x, reverse=True)
----------------------------------------------------------------


def unique_digits(x):
    
    return [] if not x else sorted(x, reverse=True)
----------------------------------------------------------------


def unique_digits(x):
    
    return [] if not x else sorted(x, reverse=True)
----------------------------------------------------------------


def unique_digits(x):
    
    return [] if not x else sorted(x, reverse=True)
----------------------------------------------------------------


def unique_digits(x):
    
    return [] if not x else sorted(x, reverse=True)
----------------------------------------------------------------


def unique_digits(x):
    
    return [] if not x else sorted(x, reverse=True)
----------------------------------------------------------------


def unique_digits(x):
    
    return [] if len(x) == 0 else sorted(x, 
           key=lambda k: k % 10, 
           reverse= k % 10 == 0)
----------------------------------------------------------------


def by_length(arr):
    
    d={
        1: 'One',
        2: 'Two',
        3: 'Three',
        4: 'Four',
        5: 'Five',
        6: 'Six',
        7: 'Seven',
        8: 'Eight',
        9: 'Nine'
    }
    sorted_arr=sorted(arr, reverse=True)
    new_arr=[]
    for i in sorted_arr:
        if i<10 and i > 0:
            new_arr.append(d[i])
    return new_arr
----------------------------------------------------------------

def by_length(arr):
    
    
    d={0: 'Zero', 1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five',
          6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}
    sorted_arr=sorted(arr, reverse=True)
    new_arr=[]
    for i in sorted_arr:
        if i<10 :
            new_arr.append(d[i])
    return new_arr
----------------------------------------------------------------


def by_length(arr):
    
    d={
        1: 'One',
        2: 'Two',
        3: 'Three',
        4: 'Four',
        5: 'Five',
        6: 'Six',
        7: 'Seven',
        8: 'Eight',
        9: 'Nine'
    }
    sorted_arr=sorted(arr, reverse=True)
    new_arr=[]
    for i in sorted_arr:
        if i<10 and i > 0:
            new_arr.append(d[i])
    return new_arr
----------------------------------------------------------------

def by_length(arr):
    
    
    d={0: 'Zero', 1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 
         6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}
    sorted_arr=sorted(arr, reverse=True)
    new_arr=[]
    for i in sorted_arr:
        if i<10 :
            new_arr.append(d[i])
    return new_arr
----------------------------------------------------------------


def by_length(arr):
    
    d={
        1: 'One',
        2: 'Two',
        3: 'Three',
        4: 'Four',
        5: 'Five',
        6: 'Six',
        7: 'Seven',
        8: 'Eight',
        9: 'Nine'
    }
    sorted_arr=sorted(arr, reverse=True)
    new_arr=[]
    for i in sorted_arr:
        if i<10 and i > 0:
            new_arr.append(d[i])
    return new_arr
----------------------------------------------------------------


def by_length(arr):
    
    d={
        1: 'One',
        2: 'Two',
        3: 'Three',
        4: 'Four',
        5: 'Five',
        6: 'Six',
        7: 'Seven',
        8: 'Eight',
        9: 'Nine'
    }
    sorted_arr=sorted(arr, reverse=True)
    new_arr=[]
    for i in sorted_arr:
        if i<10 and i>0:
            new_arr.append(d[i])
    if new_arr==[]:
        new_arr=arr
    return new_arr
----------------------------------------------------------------


def by_length(arr):
    
    d={0:1,1:2,2:3,3:4,4:5,5:6,6:7,7:8,8:9}
    sorted_arr=sorted(arr, reverse=True)
    new_arr=[]
    for i in sorted_arr:
        if i between 1 and 9:
            new_arr.append(d[i])
    return new_arr
----------------------------------------------------------------

def by_length(arr):
    
    d={0:1,1:2,2:3,3:4,4:5,5:6,6:7,7:8,8:9}
    sorted_arr=sorted(arr, reverse=True)
    new_arr=[]
    for i in sorted_arr:
        if i between 1 and 9:
            new_arr.append(d[i])
    if new_arr==[]:
        return []
    return new_arr
----------------------------------------------------------------

def by_length(arr):
    
    d={0:1,1:2,2:3,3:4,4:5,5:6,6:7,7:8,8:9}
    sorted_arr=sorted(arr, reverse=True)
    new_arr=[]
    for i in sorted_arr:
        if i>0 and i<=9:
            new_arr.append(d[i])
    return new_arr
----------------------------------------------------------------


def by_length(arr):
    
    d={0:1,1:2,2:3,3:4,4:5,5:6,6:7,7:8,8:9}
    sorted_arr=sorted(arr, reverse=True)
    new_arr=[]
    for i in sorted_arr:
        if i between 1 and 9:
            new_arr.append(d[i])
    if new_arr==[]:
        new_arr=arr
    return new_arr
----------------------------------------------------------------


def f(n):
    
    if n==1:
        return [1]
    result=[1,2,1,2]
    for i in range(3,n+1):
        if i%2==0:
            x=1
            for j in range(1,i+1):
                x*=j
            result+=x
        else:
            x=0
            for j in range(1,i+1):
                x+=j
            result+=x
    return result
----------------------------------------------------------------


def f(n):
    
    if n==1:
        return [1]
    result=[1,2,1,2]
    for i in range(3,n+1):
        if i%2==0:
            x=1
            for j in range(1,i+1):
                x*=j
            result+=x
        else:
            x=0
            for j in range(1,i+1):
                x+=j
            result+=x
    return result
----------------------------------------------------------------


def f(n):
    
    if n==1:
        return [1]
    result=[1,2,1,2]
    for i in range(3,n+1):
        if i%2==0:
            x=1
            for j in range(1,i+1):
                x*=j
            result+=x
        else:
            x=0
            for j in range(1,i+1):
                x+=j
            result+=x
    return result
----------------------------------------------------------------


def f(n):
    
    if n==1:
        return [1]
    result=[1,2,1,2]
    for i in range(3,n+1):
        if i%2==0:
            x=1
            for j in range(1,i+1):
                x*=j
            result+=x
        else:
            x=0
            for j in range(1,i+1):
                x+=j
            result+=x
    return result
----------------------------------------------------------------


def f(n):
    
    if n==1:
        return [1]
    result=[1,2,1,2]
    for i in range(3,n+1):
        if i%2==0:
            x=1
            for j in range(1,i+1):
                x*=j
            result+=x
        else:
            x=0
            for j in range(1,i+1):
                x+=j
            result+=x
    return result
----------------------------------------------------------------


def f(n):
    
    if n==1:
        return [1]
    result=[1,2,1,2]
    for i in range(3,n+1):
        if i%2==0:
            x=1
            for j in range(1,i+1):
                x*=j
            result+=x
        else:
            x=0
            for j in range(1,i+1):
                x+=j
            result+=x
    return result
----------------------------------------------------------------


def f(n):
    
    if n==1:
        return [1]
    result=[1,2,1,2]
    for i in range(3,n+1):
        if i%2==0:
            x=1
            for j in range(1,i+1): x*=j
            result+=x
        else:
            x=0
            for j in range(1,i+1): x+=j
            result+=x
    return result
----------------------------------------------------------------


def f(n):
    
    if n==1:
        return [1]
    result=[1,2,1,2]
    for i in range(3,n+1):
        if i%2==0:
            x=1
            for j in range(1,i+1): x*=j
            result+=x
        else:
            x=0
            for j in range(1,i+1): x+=j
            result+=x
    return result
----------------------------------------------------------------


def f(n):
    
    if n==1:
        return [1]
    result=[1,2,1,2]
    for i in range(3,n+1):
        if i%2==0:
            x=1
            for j in range(1,i+1):
                x*=j
            result+=x
        else:
            x=0
            for j in range(1,i+1):
                x+=j
            result+=x
    return result
----------------------------------------------------------------


def f(n):
    
    if n==1:
        return [1]
    result=[1,2,1,2]
    for i in range(3,n+1):
        if i%2==0:
            x=1
            for j in range(1,i+1):
                x*=j
            result+=x
        else:
            x=0
            for j in range(1,i+1):
                x+=j
            result+=x
    return result
----------------------------------------------------------------

def even_odd_palindrome(n):
    
    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindromes = 0
    odd_palindromes = 0
    for i in range(1, n+1):
        if i%2==1 and is_palindrome(i):
                
                odd_palindromes += 1
        if i%2==0 and is_palindrome(i):
            even_palindromes += 1
    return (even_palindromes, odd_palindromes)
----------------------------------------------------------------

def even_odd_palindrome(n):
    
    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_count = 0
    odd_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_count += 1
        if i%2 == 0 and is_palindrome(i):
            even_count += 1
    return (even_count, odd_count)
----------------------------------------------------------------

def even_odd_palindrome(n):
    
    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_count = 0
    odd_count = 0

    for i in range(1, n+1):
        if i%2==1 and is_palindrome(i):
                odd_count += 1
        if i%2==0 and is_palindrome(i):
            even_count += 1
    return (even_count, odd_count)
----------------------------------------------------------------

def even_odd_palindrome(n):
    
    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_count = 0
    odd_count = 0

    for i in range(1, n+1):
        if i%2==1 and is_palindrome(i):
                odd_count += 1
        if i%2==0 and is_palindrome(i):
            even_count += 1
    return (even_count, odd_count)
----------------------------------------------------------------

def even_odd_palindrome(n):
    
    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_count = 0
    odd_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                
                odd_count += 1
        if i%2 == 0 and is_palindrome(i):
            even_count += 1
    return (even_count, odd_count)
----------------------------------------------------------------

def even_odd_palindrome(n):
    
    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindromes = 0
    odd_palindromes = 0

    for i in range(1, n+1):
        if i%2==1 and is_palindrome(i):
                odd_palindromes += 1
        if i%2==0 and is_palindrome(i):
            even_palindromes += 1
    return (even_palindromes, odd_palindromes)
----------------------------------------------------------------

def even_odd_palindrome(n):
    
    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_count = 0
    odd_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                
                odd_count += 1
        if i%2 == 0 and is_palindrome(i):
            even_count += 1
    return (even_count, odd_count)
----------------------------------------------------------------

def even_odd_palindrome(n):
    
    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_count = 0
    odd_count = 0

    for i in range(1, n+1):
        if i%2==1 and is_palindrome(i):
                odd_count += 1
        if i%2==0 and is_palindrome(i):
            even_count += 1
    return (even_count, odd_count)
----------------------------------------------------------------

def even_odd_palindrome(n):
    
    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindromes = 0
    odd_palindromes = 0
    for i in range(1, n+1):
        if i%2==1 and is_palindrome(i):
                odd_palindromes += 1
        if i%2==0 and is_palindrome(i):
            even_palindromes += 1
    return (even_palindromes, odd_palindromes)
----------------------------------------------------------------

def even_odd_palindrome(n):
    
    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_count = 0
    odd_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_count += 1
        if i%2 == 0 and is_palindrome(i):
            even_count += 1
    return (even_count, odd_count)
----------------------------------------------------------------


def count_nums(arr):
    
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
----------------------------------------------------------------


def count_nums(arr):
    
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
----------------------------------------------------------------


def count_nums(arr):
    
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
----------------------------------------------------------------


def count_nums(arr):
    
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
----------------------------------------------------------------


def count_nums(arr):
    
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
----------------------------------------------------------------


def count_nums(arr):
    
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
----------------------------------------------------------------


def count_nums(arr):
    
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
----------------------------------------------------------------


def count_nums(arr):
    
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
----------------------------------------------------------------


def count_nums(arr):
    
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
----------------------------------------------------------------


def count_nums(arr):
    
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
----------------------------------------------------------------


def move_one_ball(arr):
    
    if(len(arr)==0):
      return True
    sorted_array=sorted(arr)
    my_arr=arr[:]
    
    
    for i in range(len(sorted_array)):
      if(sorted_array[i]!=my_arr[i]):
        return False
      if(i<(len(sorted_array)-1)):
          
          if(sorted_array[i+1]!=sorted_array[i] or my_arr[len(my_arr)]!=sorted_array[len(sorted_array)] or my_arr[0]!=sorted_array[0]):
            
            if((sorted_array[len(sorted_array)]+sorted_array[0])!=sorted_array[len(sorted_array)] or my_arr[-1]+sorted_array[len(sorted_array)]!=1):
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                

----------------------------------------------------------------


def move_one_ball(arr):
    
    if(len(arr)==0):
      return True
    sorted_array=sorted(arr)
    my_arr=arr[:]
    for i in range(len(sorted_array)-len(arr)):
      if(sorted_array[len(my_arr)]!=my_arr[-1]):
        return False
      my_arr.pop()
      my_arr.append(sorted_array[len(my_arr)-1])
    return True
----------------------------------------------------------------


def move_one_ball(arr):
    
    if(len(arr)==0):
      return True
    sorted_array=sorted(arr)
    my_arr=sorted(arr)
    
    
    
    return my_arr==sorted_array
----------------------------------------------------------------


def move_one_ball(arr):
    
    if(len(arr)==0):
      return True
    sorted_array=sorted(arr)
    my_arr=arr
    for i in range(len(sorted_array)-len(arr)):
      if(sorted_array[len(sorted_array)-i-1]!= my_arr[-1]):
        return False
      my_arr=my_arr[1:]
      
    return True
----------------------------------------------------------------


def move_one_ball(arr):
    
    if(len(arr)==0):
      return True
    sorted_array=sorted(arr)
    my_arr=arr
    for i in range(len(sorted_array)-len(arr)):
      if(sorted_array[len(sorted_array)-i-1]!=my_arr[-1]):
        return False
      my_arr=my_arr[1:]
      
    return True
----------------------------------------------------------------


def move_one_ball(arr):
    
    if(len(arr)==0):
      return True
    sorted_array=sorted(arr)
    my_arr=sorted(arr)
    
    min_value=arr[0]
    min_index=0
    for i in range(1,len(arr)):
      if(my_arr[i]<sorted_array[i-1]):
        min_value=arr[i]
        min_index=i
    
    if((min_value==arr[min_index])and(arr[min_index+1]==arr[0])):
      return True
    return False
----------------------------------------------------------------


def move_one_ball(arr):
    
    if(len(arr)==0):
      return True
    sorted_array=sorted(arr)
    my_arr=arr[:]
    for i in range(len(sorted_array)-len(arr)):
      if(sorted_array[len(sorted_array)-i-1]!=my_arr[-1]):
        return False
      my_arr.pop()
      my_arr.append(sorted_array[len(sorted_array)-i-1])
    if(sorted_array==my_arr):
      return True
    return False
----------------------------------------------------------------


def move_one_ball(arr):
    
    if(len(arr)==0):
      return True
    sorted_array=sorted(arr)
    my_arr=arr
    for i in range(len(sorted_array)-1):
      if(sorted_array[i]!=sorted_array[i+1]):
        my_arr.append(sorted_array[i+1])
      if(sorted_array[len(my_arr)-1]!=sorted_array[0]):
        my_arr.insert(0,sorted_array[0])
      if(my_arr==arr):
        return True
    return False
----------------------------------------------------------------


def move_one_ball(arr):
    
    if(len(arr)==0):
      return True
    sorted_array=sorted(arr)
    my_arr=arr
    for i in range(len(sorted_array)-1):
      if(sorted_array[i]!=sorted_array[i+1]):
        my_arr=my_arr[1:]+my_arr[0]
        return(sorted(my_arr)==sorted_array)
      
    return(sorted(my_arr)==sorted_array)
----------------------------------------------------------------


def move_one_ball(arr):
    
    if(len(arr)==0):
      return True
    sorted_array=sorted(arr)
    my_arr=arr
    for i in range(len(sorted_array)-1):
      if(sorted_array[i]!=sorted_array[i+1]):
        my_arr.append(sorted_array[i+1])
      if(sorted_array[len(my_arr)-1]!=sorted_array[0]):
        my_arr.pop(0)
    
    for i in range(len(arr)):
      if(arr[i]!=my_arr[i]):
        return False
    return True
----------------------------------------------------------------


def exchange(lst1, lst2):
    
    def even(x):
      if(x%2==0):
        return True
      else:
        return False
    
    ind=1
    t=1
    
    while(t!=1):
      if(even(lst1[ind])):
        if(even(lst2[ind])):
          ind=ind+1
          t=1
      else:
        ind=ind+1
      if(ind>len(lst1) or ind>len(lst2) )
          return
    return
----------------------------------------------------------------


def exchange(lst1, lst2):
    
    def even(x):
      if(x %2==0):
        return True
      else:
        return False
    
    if((len(lst1)!=len(lst2))){
      return 
    }
    
    c=1
    for i in range(len(lst1)):
      if(lst1[i]!=lst2[i] and even(lst1[i])!=even(lst2[i])):
        c=0
        break
    if(c==1):
      return
----------------------------------------------------------------


def exchange(lst1, lst2):
    
    def even(x):
      if(x%2==0):
        return True
      else:
        return False
    
    ind=1
    t=1
    while(t<=len(lst1) and ind<=len(lst2) )
      if(lst1[ind] > lst2[ind] )
      
      if(even(lst1[ind])) and even(lst2[ind])) :  
        t=t+1
      ind=ind+1
    if(t>=len(lst1) ) :  
      return "YES"
    return "NO"
----------------------------------------------------------------


def exchange(lst1, lst2):
    
    def even(x):
      if(x%2==0):
        return True
      else:
        return False
    
    if((len(lst1)!=len(lst2))){
      return 
    }
    
    c=1
    for i in range(len(lst1)):
      if(lst1[i]!=lst2[i] and even(lst1[i])!=even(lst2[i])):
        c=0
        break
    if(c==1):
      return 
    return
----------------------------------------------------------------


def exchange(lst1, lst2):
    
    def even_elements(lst):
        return list(filter(lambda x: x%2 == 0, lst))
    
    return if len(lst1) > len(lst2) else len(lst1) else len(lst2)
----------------------------------------------------------------


def exchange(lst1, lst2):
    
    def even(x):
      if(x %2==0):
        return True
      else:
        return False
    
    if(len(lst1) > len(lst2) ) :
      lst3, lst1 = lst2, lst1
      lst2, lst1 = lst3, lst1
      lst3, lst1 = lst2, lst1
      lst2, lst1 = lst3, lst1
      if(even(lst1) and even(lst2) ) :
        return 
      if(even(lst1) ) :
        return 
      if(even(lst2) ) :
        return 
      if(lst1 > lst2) :
        return 
      if(lst1 < lst2) :
        return 
      if(lst1 == lst2) :
        return 
      if(lst1 > lst2) :
        return 
      if(lst1 < lst2) :
        return 
      if(lst1 == lst2) :
        return 
      if(lst1 > lst2) :
        return 
      if(lst1 < lst2) :
        return 
      if(lst1 == lst2) :
        return 
      if(lst1 > lst2) :
        return 
      if(lst1 < lst2) :
        return 
      if(lst1 == lst2) :
        return 
      if(lst1 > lst2) :
        return 
      if(lst1 < lst2) :
        return 
      if(lst1 == lst2) :
        return 
      if(lst1 > lst2) :
        return 
      if(lst1 < lst2) :
        return 
      if(lst1 == lst2) :
        return 
      if(lst1 > lst2) :
        return 
      if(lst1 < lst2) :
        return 
      if(lst1 == lst
----------------------------------------------------------------


def exchange(lst1, lst2):
    
    def even(x):
      if(x %2==0):
        return True
      else:
        return False
    
    if((len(lst1)!=len(lst2) )or(not all(even(x) for x in lst1)ornot all(even(x) for x in lst2))){
      return 
    }
    return
----------------------------------------------------------------


def exchange(lst1, lst2):
    
    def even(x):
      if(x%2==0):
        return True
      else:
        return False
    
    if((len(lst1)!=len(lst2))){
      return 
    }
    
    c=1
    for i in range(len(lst1)):
      if(lst1[i]!=lst2[i] and even(lst1[i])!=even(lst2[i])):
        c=0
        break
    if(c==1):
      return
----------------------------------------------------------------


def exchange(lst1, lst2):
    
    def even(x):
      if(x %2==0):
        return True
      else:
        return False
    
    if((len(lst1)!=len(lst2) )or(not all(even(x) for x in lst1)ornot all(even(x) for x in lst2))){
      return 
    }
    return
----------------------------------------------------------------


def exchange(lst1, lst2):
    
    def even(x):
      if(x%2==0):
        return True
      else:
        return False
    
    ind=1
    t=1
    while(t<=len(lst1) and ind<=len(lst2) )
      if(lst1[ind] > lst2[ind] )
      
      if(even(lst1[ind])) and even(lst2[ind])) :  
        t=t+1
      ind=ind+1
    if(t>=len(lst1) ) :  
      return "YES"
    return "NO"
----------------------------------------------------------------


def histogram(test):
    
    if test == :
        return {}
    
    d={}
    t=test.split()
    for i in t:
        if i not in d:
            d[i]=1
        else:
            d[i]+=1
    if(test==-1):
        for i in t:
            if(d[i]==1):
                d[i]=-1
    maxx=0
    for i in t:
        if(d[i]>maxx):
            maxx=d[i]
    if(maxx==1):
        for i in t:
            if(d[i]==1):
                d[i]=-1
    return d
----------------------------------------------------------------


def histogram(test):
    
    if test == :
        return {}
    
    d={}
    t=test.split()
    for i in t:
        if i not in d:
            d[i]=1
        else:
            d[i]+=1
    if(test==-1):
        for i in t:
            if(d[i]==1):
                d[i]=-1
    maxx=0
    for i in t:
        if(d[i]==1):
            if(d[i]>maxx):
                maxx=d[i]
    if(maxx==1):
        for i in t:
            if(d[i]==1):
                d[i]=-1
    return d
----------------------------------------------------------------


def histogram(test):
    
    if test == :
        return {}
    
    d={}
    t=test.split()
    for i in t:
        if i not in d:
            d[i]=1
        else:
            d[i]+=1
    if(test==-1):
        for i in t:
            if(d[i]==1):
                d[i]=-1
    maxx=0
    for i in t:
        if(d[i]>maxx):
            maxx=d[i]
    if(maxx==1):
        for i in t:
            if(d[i]==1):
                d[i]=-1
    return d
----------------------------------------------------------------


def histogram(test):
    
    if test == :
        return {}
    
    d={}
    t=test.split()
    for i in t:
        if i in d:
            d[i]+=1
        else:
            d[i]=1
    if(test==-1):
        for i in t:
            if(d[i]==1):
                d[i]=0
    return d
----------------------------------------------------------------


def histogram(test):
    
    if test == :
        return {}
    
    d={}
    t=test.split()
    for i in t:
        if i not in d:
            d[i]=1
        else:
            d[i]+=1
    if(test==-1):
        for i in t:
            if(d[i]==1):
                d[i]=-1
    maxx=0
    for i in t:
        if(d[i]>maxx):
            maxx=d[i]
    if(maxx==1):
        for i in t:
            if(d[i]==1):
                d[i]=-1
    return d
----------------------------------------------------------------


def histogram(test):
    
    if test == :
        return {}
    
    d={}
    t=test.split()
    for i in t:
        if i not in d:
            d[i]=1
        else:
            d[i]+=1
    if(test[-1]==" " and len(test)>1):
        d[test[-2]]=1
    maxx=0
    for k in d:
        if(d[k]>maxx):
            maxx=d[k]
    if(maxx>1):
        for k in d:
            if(d[k]==maxx):
                d[k]=maxx
    return d
----------------------------------------------------------------


def histogram(test):
    
    if test == :
        return {}
    
    d={}
    t=test.split()
    for i in t:
        if i not in d:
            d[i]=1
        else:
            d[i]+=1
    if(test==-1):
        for i in t:
            if(d[i]==1):
                d[i]=-1
    maxx=0
    for i in t:
        if(d[i]>maxx):
            maxx=d[i]
    if(maxx==1):
        for i in t:
            if(d[i]==1):
                d[i]=-1
    return d
----------------------------------------------------------------


def histogram(test):
    
    if test == :
        return {}
    
    d={}
    t=test.split()
    for i in t:
        if i not in d:
            d[i]=1
        else:
            d[i]+=1
    if(test==-1):
        for i,x in d.items():
            if(x==1):
                d[i]=x
    if(test==-1):
        for i,x in d.items():
            if(x==2):
                d[i]=x
    for i,x in d.items():
        if(d[i]>x):
            d[i]=x
    return d
----------------------------------------------------------------


def histogram(test):
    
    if test == :
        return {}
    
    d={}
    t=test.split()
    for i in t:
        if i not in d:
            d[i]=1
        else:
            d[i]+=1
    if(test==-1):
        for i in t:
            if(d[i]==1):
                d[i]=-1
    maxx=0
    for i in t:
        if(d[i]==1):
            if(d[i]>maxx):
                maxx=d[i]
                
    
    if(test==-1):
        for i in t:
            if(d[i]==1):
                d[i]=maxx
                
    
    return d
----------------------------------------------------------------


def histogram(test):
    
    if test == :
        return {}
    
    d={}
    t=test.split()
    for i in t:
        if i not in d:
            d[i]=1
        else:
            d[i]+=1
    if(test==-1):
        for i in t:
            if(d[i]==1):
                d[i]=-1
    maxx=0
    for i in t:
        if(d[i]>maxx):
            maxx=d[i]
    if(maxx==1):
        for i in t:
            if(d[i]==1):
                d[i]=-1
    return d
----------------------------------------------------------------


def reverse_delete(s,c):
    
    
    return (
        .join(char for char in s if char not in c),
        s[::-1] == s
    )
----------------------------------------------------------------


def reverse_delete(s,c):
    
    
    return (
        .join(char for char in s if char not in c),
        s[::-1] == s
    )
----------------------------------------------------------------


def reverse_delete(s,c):
    
    return (
        .join(char for char in s if char not in c),
        s[::-1] == s
    )
----------------------------------------------------------------


def reverse_delete(s,c):
    
    return (
        .join(char for char in s if char not in c),
        s[::-1] == c
    )
----------------------------------------------------------------


def reverse_delete(s,c):
    
    
    return (
        .join(char for char in s if char not in c),
        s[::-1] == c
    )
----------------------------------------------------------------


def reverse_delete(s,c):
    
    return (
        .join(char for char in s if char not in c),
        s[::-1] == c
    )
----------------------------------------------------------------


def reverse_delete(s,c):
    
    
    return (
        .join(char for char in s if char not in c),
        s[::-1] == s
    )
----------------------------------------------------------------


def reverse_delete(s,c):
    
    return (
        .join(char for char in s if char not in c),
        s[::-1] == c
    )
----------------------------------------------------------------


def reverse_delete(s,c):
    
    return (
        .join(char for char in s if char not in c),
        s[::-1] == c
    )
----------------------------------------------------------------


def reverse_delete(s,c):
    
    
    return (
        .join(char for char in s if char not in c),
        s[::-1] == s
    )
----------------------------------------------------------------


def odd_count(lst):
    
    def get_digits(x):
        return sum(int(digit)%2==1 for digit in x)
    return [+ str(x)[2:] + + str(x)[2:][:get_digits(x)] for x in lst]
----------------------------------------------------------------


def odd_count(lst):
    
    def digits_in_string(str):
        
        return sum(int(digit)%2==1 for digit in str)
    
    return [+ str(x)[2:] + + str(x)[2:][2:] for x in lst]
----------------------------------------------------------------


def odd_count(lst):
    
    def digits_in_string(str):
        
        return sum(int(digit)%2==1 for digit in str)
    
    return [+ str(x) + str(digits_in_string(str)) for str, x in zip(lst, lst)]
----------------------------------------------------------------


def odd_count(lst):
    
    return [+(3*((digit-1)%2==1) for digit in lis) for lis in lst]
----------------------------------------------------------------


def odd_count(lst):
    
    def digits_in_string(str):
        
        return sum(int(digit)%2==1 for digit in str)
    
    return [+ str(digits_in_string(i)) for i in lst]
----------------------------------------------------------------


def odd_count(lst):
    
    def digits_in_string(str):
        
        odd_digits_cnt = 0
        for c in str:
            if c in '02468':
                odd_digits_cnt += 1
        return odd_digits_cnt
    
    return [+ str(x) + str(digits_in_string(x)) for x in lst]
----------------------------------------------------------------


def odd_count(lst):
    
    return [+(3*((digit-1)%3))+ for string in lst for digit in string]
----------------------------------------------------------------


def odd_count(lst):
    
    def digits_in_string(str):
        
        return sum(int(digit)%2==1 for digit in str)
    
    return [+ str(x) for x in lst]
    
if __name__ == '__main__':
    lst = ['1234567']
    print(odd_count(lst))
----------------------------------------------------------------


def odd_count(lst):
    
    def digits_in_string(str):
        
        odd_digits_count = 0
        for c in str:
            if c in '2345':
                odd_digits_count += 1
        return odd_digits_count
    
    return [+ str(x) + str(digits_in_string(x)) for x in lst]
----------------------------------------------------------------


def odd_count(lst):
    
    def digits_in_string(str):
        
        odd_digits_cnt = 0
        for c in str:
            if c in '2345':
                odd_digits_cnt += 1
        return odd_digits_cnt
    return [+ str(x) + str(digits_in_string(x)) for x in lst]
----------------------------------------------------------------


def minSubArraySum(nums):
    
    max_so_far = 0
    max_ending_here = 0
    
    for num in nums:
        max_ending_here = max_ending_here + num
        if max_ending_here < 0:
            max_ending_here = 0;
        if (max_so_far <= max_ending_here):
            max_so_far = max_ending_here
    if(max_so_far==0):
        max_so_far=max(abs(x) for x in nums)
    return -max_so_far
----------------------------------------------------------------


def minSubArraySum(nums):
    
    max_so_far = 0
    max_ending_here = 0
    
    for num in nums:
        max_ending_here += num
        if max_ending_here < 0:
            max_ending_here = 0
        if max_so_far <= max_ending_here:
            max_so_far = max_ending_here
    if max_so_far == 0:
        max_so_far = max(abs(x) for x in nums)
    return -max_so_far
----------------------------------------------------------------


def minSubArraySum(nums):
    
    max_so_far = 0
    max_ending_here = 0
    
    for num in nums:
        max_ending_here = max_ending_here + num
        if max_ending_here < 0:
            max_ending_here = 0
        if max_so_far < max_ending_here:
            max_so_far = max_ending_here
    
    if max_so_far == 0:
        max_so_far = max(abs(x) for x in nums)
    
    return -max_so_far
----------------------------------------------------------------


def minSubArraySum(nums):
    
    max_so_far = 0
    max_ending_here = 0

    for num in nums:
        max_ending_here = max_ending_here + num
        if max_ending_here < 0:
            max_ending_here = 0
        if max_so_far == 0:
            max_so_far = max_ending_here
        max_so_far = max(max_so_far, max_ending_here)
    if max_so_far == 0:
        max_so_far = max(abs(x) for x in nums)
    return -max_so_far
----------------------------------------------------------------


def minSubArraySum(nums):
    
    max_so_far = 0
    max_ending_here = 0
    
    for num in nums:
        max_ending_here += num
        if max_ending_here < 0:
            max_ending_here = 0
        if max_so_far <= max_ending_here:
            max_so_far = max_ending_here
    if(max_so_far==0):
        max_so_far=max(abs(x) for x in nums)
    return -max_so_far
----------------------------------------------------------------


def minSubArraySum(nums):
    
    max_so_far = 0
    max_ending_here = 0
    
    for num in nums:
        max_ending_here += num
        if max_ending_here < 0:
            max_ending_here = 0
        if max_so_far <= max_ending_here:
            max_so_far = max_ending_here
    if max_so_far == 0:
        max_so_far = max(abs(x) for x in nums)
    return -max_so_far
----------------------------------------------------------------


def minSubArraySum(nums):
    
    max_so_far = 0
    max_ending_here = 0

    for num in nums:
        max_ending_here = max_ending_here + num
        if max_ending_here < 0:
            max_ending_here = 0
        if max_so_far < max_ending_here:
            max_so_far = max_ending_here
    if max_so_far == 0:
        max_so_far = max(abs(x) for x in nums)
    return -max_so_far
----------------------------------------------------------------


def minSubArraySum(nums):
    
    max_so_far = 0
    max_ending_here = 0
    
    for num in nums:
        max_ending_here += num
        if max_ending_here < 0:
            max_ending_here = 0
        if max_so_far == 0:
            max_so_far = max_ending_here
        max_so_far = max(max_so_far, max_ending_here)
    
    if max_so_far == 0:
        max_so_far = max(abs(x) for x in nums)
    return -max_so_far
----------------------------------------------------------------


def minSubArraySum(nums):
    
    max_so_far = 0
    max_ending_here = 0
    
    for num in nums:
        max_ending_here = max_ending_here + num
        if max_ending_here < 0:
            max_ending_here = 0
        if max_so_far < max_ending_here:
            max_so_far = max_ending_here
    
    if max_so_far == 0:
        max_so_far = max(abs(x) for x in nums)
    
    return -max_so_far
----------------------------------------------------------------


def minSubArraySum(nums):
    
    max_so_far = 0
    max_ending_here = 0

    for num in nums:
        max_ending_here += num
        if max_ending_here < 0:
            max_ending_here = 0;
        if (max_so_far <= max_ending_here):
            max_so_far = max_ending_here
    if(max_so_far==0):
        max_so_far=max(abs(x) for x in nums)
    return -max_so_far
----------------------------------------------------------------


def max_fill(grid, capacity):
    import math
    
    return sum(math.ceil(sum(arr) / capacity) for arr in grid)
----------------------------------------------------------------


def max_fill(grid, capacity):
    import math
    
    return sum(math.ceil(sum(arr) / capacity) for arr in grid)
----------------------------------------------------------------


def max_fill(grid, capacity):
    import math
    
    return sum(math.ceil(sum(arr) / capacity) for arr in grid)
----------------------------------------------------------------


def max_fill(grid, capacity):
    import math
    
    return sum(math.ceil(sum(arr) / capacity) for arr in grid)
----------------------------------------------------------------


def max_fill(grid, capacity):
    import math
    
    return sum(math.ceil(sum(arr) / capacity) for arr in grid)
----------------------------------------------------------------


def max_fill(grid, capacity):
    import math
    
    return sum([math.ceil(sum(arr) / capacity) for arr in grid])
----------------------------------------------------------------


def max_fill(grid, capacity):
    import math
    
    return sum([math.ceil(sum(arr) / capacity) for arr in grid])
----------------------------------------------------------------


def max_fill(grid, capacity):
    import math
    
    return sum([math.ceil(sum(arr) / capacity) for arr in grid])
----------------------------------------------------------------


def max_fill(grid, capacity):
    import math
    
    return sum(math.ceil(sum(arr) / capacity) for arr in grid)
----------------------------------------------------------------


def max_fill(grid, capacity):
    import math
    
    return sum([math.ceil(sum(arr) / capacity) for arr in grid])
----------------------------------------------------------------


def sort_array(arr):
    
    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count())
----------------------------------------------------------------


def sort_array(arr):
    
    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count())
----------------------------------------------------------------


def sort_array(arr):
    
    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count())
----------------------------------------------------------------


def sort_array(arr):
    
    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count())
----------------------------------------------------------------


def sort_array(arr):
    
    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count())
----------------------------------------------------------------


def sort_array(arr):
    
    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count())
----------------------------------------------------------------


def sort_array(arr):
    
    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count())
----------------------------------------------------------------


def sort_array(arr):
    
    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count())
----------------------------------------------------------------


def sort_array(arr):
    
    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count())
----------------------------------------------------------------


def sort_array(arr):
    
    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count())
----------------------------------------------------------------


def select_words(s, n):
    
    if (s == ):
        return []

    res, c = [], 0
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if (word[i] not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not
----------------------------------------------------------------


def select_words(s, n):
    
    if(s == ):
        return []

    res, c = [], 0
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if(word[i] not in  or  not in  ):
                n_consonants += 1

        if(n_consonants == n):
            res.append(word)
            c += 1

    if(c == 0):
        return []
    else:
        return res
----------------------------------------------------------------


def select_words(s, n):
    
    if(s == ):
        return []

    res, c = [], 0
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if(word[i] not in  or  not in  ):
                n_consonants += 1

        if(n_consonants ==  ):
            c += 1
            res.append(word)

    if(c ==  ):
        return []
    if(c ==  ):
        return res
    return res
----------------------------------------------------------------


def select_words(s, n):
    
    if (s == ):
        return []

    res, c = [], 0
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if (word[i] not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not
----------------------------------------------------------------


def select_words(s, n):
    
    if(s == ):
        return []

    res, c = [], 0
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if(word[i] not in  or  not in  ):
                n_consonants += 1

        if(n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_consonants ==  or  n_
----------------------------------------------------------------


def select_words(s, n):
    
    if(s == ):
        return []

    res, c = [], 0
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if(word[i] not in  or  not in  ):
                n_consonants += 1

        if(n_consonants == n):
            res.append(word)
            c += 1

    if(c == 0):
        return []
    else:
        return res
----------------------------------------------------------------


def select_words(s, n):
    
    if (s == ):
        return []

    res, c = [], 0
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if (word[i] not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not
----------------------------------------------------------------


def select_words(s, n):
    
    if (s == ):
        return []

    res, c = [], 0
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i] not in [, , , , , , , , , ]:
                n_consonants += 1

        if n_consonants == n:
            res += [word]
            c += 1

    if c == 0:
        return []
    else:
        return res
----------------------------------------------------------------


def select_words(s, n):
    
    if(s == ):
        return []

    res, c = [], 0
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if(word[i] not in  or  not in  ):
                n_consonants += 1

        if(n_consonants == n):
            res.append(word)
            c += 1

    if(c == 0):
        return []
    else:
        return res
----------------------------------------------------------------


def select_words(s, n):
    
    if(s == ):
        return []

    res, c = [], 0
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if(word[i] not in  or  not in  ):
                n_consonants += 1

        if(n_consonants == n):
            res.append(word)
            c += 1

    if(c == 0):
        return []
    if(c ==  or  c ==  ):
        return res
    return res
----------------------------------------------------------------


def get_closest_vowel(word):
    
    if len(word) < 3:
        return 
    
    vowels = set((
                ord('a'), ord('e'), ord('i'), ord('o'), ord('u')))
    
    if word[-1] not in vowels:
        return 
    if len(word) < 4 or  words[-1] != word[-1]:
        return 
    if any(c in vowels for c in words[2:-1]):
        return 
    if any(c in vowels for c in words[1:]):
        return 
    if any(c in vowels for c in words[2:-1]):
        return 
    if any(c in vowels for c in words[1:]):
        return 
    if any(c in vowels for c in words[2:-1]):
        return 
    if any(c in vowels for c in words[1:]):
        return 
    if any(c in vowels for c in words[2:-1]):
        return 
    if any(c in vowels for c in words[1:]):
        return 
    if any(c in vowels for c in words[2:-1]):
        return 
    if any(c in vowels for c in words[1:]):
        return 
    if any(c in vowels for c in words[2:-1]):
        return 
    if any(c in vowels for c in words[1:]):
        return 
    if any(c in vowels for c in words[2:-1]):
        return 
    if any(c in vowels for c in words[1:]):
        return 
    if any(c in vowels for c in words[2:-1]):
        return 
    if any(c in vowels for c in words[1:]):
        return 
    if any(c in vowels for c in words[2:-1]):
        return 
    if any(c in vowels for c in words[1:]):
        return 
    if any(c in vowels for c in words[2:-1]):
        return
----------------------------------------------------------------


def get_closest_vowel(word):
    
    if len(word) < 3:
        return 
    
    vowels = set((, , , , , , , , , ))
    for i in range(len(word) - 2):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return  
    return
----------------------------------------------------------------


def get_closest_vowel(word):
    
    if len(word) < 3:
        return 
    
    vowels = set((, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 
----------------------------------------------------------------


def get_closest_vowel(word):
    
    if len(word) < 3:
        return 
    
    vowels = set((
        , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 
----------------------------------------------------------------


def get_closest_vowel(word):
    
    if len(word) < 3:
        return 
    
    vowels = set((
                ord('a'), ord('e'), ord('i'), ord('o'), ord('u')))
    
    for i in range(len(word) - 2):
        if word[i] in vowels and (
                ord(word[i + 1]) not in vowels) and (
                ord(word[i - 1]) not in vowels):
            
            if((ord(word[i + 2]) not in vowels) and 
                (ord(word[i - 1]) not in vowels)):

                
                return  
        
    return
----------------------------------------------------------------


def get_closest_vowel(word):
    
    if len(word) < 3:
        return 
    
    vowels = set((, , , , , , , , , , , ))
    for i in range(len(word) - 2):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return  
    return
----------------------------------------------------------------


def get_closest_vowel(word):
    
    if len(word) < 3:
        return 
    
    vowels = set((
                ord('a'), ord('e'), ord('i'), ord('o'), ord('u')))
    
    if word[-1] not in vowels:
        return
    if word[-2] not in vowels:
        return
    if word[-3] not in vowels:
        return
    return
----------------------------------------------------------------


def get_closest_vowel(word):
    
    if len(word) < 3:
        return 
    
    vowels = set((, , , , , , , , , ))
    for i in range(len(word) - 2):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return  
    return
----------------------------------------------------------------


def get_closest_vowel(word):
    
    if len(word) < 3:
        return 
    
    vowels = set((, , , , , , , , , , ))
    for i in range(len(word) - 2):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return  
        
    return
----------------------------------------------------------------


def get_closest_vowel(word):
    
    if len(word) < 3:
        return 
    
    vowels = set((
        ord("a"),
        ord("e"),
        ord("i"),
        ord("o"),
        ord("u")))
    for i in range(len(word) - 2):
        if word[i] not in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return  
        
    return
----------------------------------------------------------------


def match_parens(lst):
    
    def check(s):
        val = 0
        for i in s:
            if i == :
                val += 1
            else:
                val -= 1
            if val < 0:
                return False
        return True if len(s) == 2 else check(s[2:])

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
----------------------------------------------------------------


def match_parens(lst):
    
    def check(s):
        
        val = 0
        for i in s:
            if i == :
                val += 1
            else:
                val -= 1
            if val < 0:
                return False
        return True if len(s) == 2 else check(s[2:])

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return  if check(S1) else check(S2)
----------------------------------------------------------------


def match_parens(lst):
    
    def check(s):
        
        val = 0
        for i in s:
            if i == :
                val += 1
            else:
                val -= 1
            if val < 0:
                return False
        return True if len(s) == 2 else check(s[2:])

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return  if check(S1) else check(S2)
----------------------------------------------------------------


def match_parens(lst):
    
    def check(s):
        
        val = 0
        for i in s:
            if i == :
                val += 1
            else:
                val -= 1
            if val < 0:
                return False
        return True if len(s) == 2 else check(s[2:])

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return  if check(S1) else check(S2)
----------------------------------------------------------------


def match_parens(lst):
    
    def check(s):
        val = 0
        for i in s:
            if i == :
                val += 1
            else:
                val -= 1
            if val < 0:
                return False
        return True if len(s) == 2 else check(s[2:])

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) else check(S2)
----------------------------------------------------------------


def match_parens(lst):
    
    def check(s):
        
        val = 0
        for i in s:
            if i == :
                val += 1
            else:
                val -= 1
            if val < 0:
                return False
        return True if len(s) == 2 else check(s[2:])

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) else check(S2)
----------------------------------------------------------------


def match_parens(lst):
    
    def check(s):
        
        val = 0
        for i in s:
            if i == :
                val += 1
            else:
                val -= 1
            if val < 0:
                return False
        return True if len(s) == 2 else check(s[2:])

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) else check(S2)
----------------------------------------------------------------


def match_parens(lst):
    
    def check(s):
        
        val = 0
        for i in s:
            if i == :
                val += 1
            else:
                val -= 1
            if val < 0:
                return False
        return True if len(s) == 2 else check(s[2:])


    return  if check(lst[0])+ check(lst[1]) else
----------------------------------------------------------------


def match_parens(lst):
    
    def check(s):
        val = 0
        for i in s:
            if i == :
                val += 1
            else:
                val -= 1
            if val < 0:
                return False
        return True if len(s) == 2 else check(s[2:])


    return 
if __name__ == '__main__':
    lst = 
    print(match_parens(lst))
----------------------------------------------------------------


def match_parens(lst):
    
    def check(s):
        
        val = 0
        for i in s:
            if i == :
                val += 1
            else:
                val -= 1
            if val < 0:
                return False
        return True if len(s) == 2 else check(s[2:])

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) else check(S2)
----------------------------------------------------------------

def maximum(arr, k):
    
    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
----------------------------------------------------------------


def maximum(arr, k):
    
    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
----------------------------------------------------------------


def maximum(arr, k):
    
    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
----------------------------------------------------------------

def maximum(arr, k):
    
    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
----------------------------------------------------------------

def maximum(arr, k):
    
    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
----------------------------------------------------------------


def maximum(arr, k):
    
    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
----------------------------------------------------------------


def maximum(arr, k):
    
    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
----------------------------------------------------------------


def maximum(arr, k):
    
    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
----------------------------------------------------------------


def maximum(arr, k):
    
    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
----------------------------------------------------------------

def maximum(arr, k):
    
    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
----------------------------------------------------------------


def solution(lst):
    
    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
----------------------------------------------------------------


def solution(lst):
    
    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
----------------------------------------------------------------


def solution(lst):
    
    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
----------------------------------------------------------------


def solution(lst):
    
    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
----------------------------------------------------------------


def solution(lst):
    
    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
----------------------------------------------------------------


def solution(lst):
    
    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
----------------------------------------------------------------


def solution(lst):
    
    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
----------------------------------------------------------------


def solution(lst):
    
    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
----------------------------------------------------------------


def solution(lst):
    
    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
----------------------------------------------------------------


def solution(lst):
    
    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
----------------------------------------------------------------


def add_elements(arr, k):
    
    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
----------------------------------------------------------------


def add_elements(arr, k):
    
    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
----------------------------------------------------------------


def add_elements(arr, k):
    
    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
----------------------------------------------------------------


def add_elements(arr, k):
    
    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
----------------------------------------------------------------


def add_elements(arr, k):
    
    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
----------------------------------------------------------------


def add_elements(arr, k):
    
    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
----------------------------------------------------------------


def add_elements(arr, k):
    
    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
----------------------------------------------------------------


def add_elements(arr, k):
    
    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
----------------------------------------------------------------


def add_elements(arr, k):
    
    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
----------------------------------------------------------------


def add_elements(arr, k):
    
    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
----------------------------------------------------------------

def get_odd_collatz(n):
    
    if n%2==1:
        odd_collatz = [] 
        if n==1: 
            odd_collatz.append(1) 
        else: 
            odd_collatz.append(n) 
            odd_collatz.append(int(n/2.0))  
    else:
        odd_collatz = [] 
        if n==1: 
            odd_collatz.append(1) 
        else: 
            odd_collatz.append(int(n/2.0))  
            odd_collatz.append(int((n-1)/2.0))  
    return sorted(odd_collatz)
----------------------------------------------------------------

def get_odd_collatz(n):
    
    if n%2==1:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while(n > 1):
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2==1:
            odd_collatz.append(int(n))
            
    return sorted(odd_collatz)
----------------------------------------------------------------


def get_odd_collatz(n):
    
    if n%2==1:
        odd_collatz = [] 
        if n==1:
            return []
        odd_collatz.append(n)
    else:
        odd_collatz = [] if n==1 else [n]
    while(n > 1):
        if n % 2 == 0:
            odd_collatz.append(int(n / 2))
            n = int(n / 2)
        else:
            odd_collatz.append(int((n - 2) / 3))
            n = int((n - 2) / 3)
    return sorted(odd_collatz)
----------------------------------------------------------------

def get_odd_collatz(n):
    
    if n%2==1:
        odd_collatz = [] 
        while n > 1:
            if n % 4 == 0:
                n = n/2
                
            elif n%2 == 0:
                odd_collatz.append(int(n))
                n = n*3 + 1
            else:
                break
        return sorted(odd_collatz)
    else:
        return []
----------------------------------------------------------------


def get_odd_collatz(n):
    
    if n%2==1:
        odd_collatz = [] 
        if n==1: odd_collatz.append(1)
        while n >1:
            if n ==3:
                odd_collatz.append(int((n-1)*(n-3)/2)+1)
            else:
                odd_collatz.append(int((n-1)*(n-1)/2)+1)
            n=n*3+1
    else:
        odd_collatz = [] 
        if n==1: odd_collatz.append(1)
        while n >1:
            if n ==3:
                odd_collatz.append(int((n-1)*(n-3)/2)+1)
            else:
                odd_collatz.append(int((n-1)*(n-1)/2)+1)
            n=n*5+1
    return sorted(odd_collatz)
----------------------------------------------------------------


def get_odd_collatz(n):
    
    if n%2==1:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while(n > 1):
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2==1:
            odd_collatz.append(int(n))
            
    return sorted(odd_collatz)
----------------------------------------------------------------

def get_odd_collatz(n):
    
    if n%2==1:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    
    while n >1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2==1:
            odd_collatz.append(int(n))
            
    return sorted(odd_collatz)
----------------------------------------------------------------


def get_odd_collatz(n):
    
    if n%2==1:
        odd_collatz = [] 
        if n==1:
            odd_collatz.append(1)
        elif n==3:
            odd_collatz.append(3)
        else:
            odd_collatz.append(int((n-1)/2)+1)
    else:
        odd_collatz = [] 
        if n==1:
            odd_collatz.append(1)
        elif n==3:
            odd_collatz.append(3)
        else:
            odd_collatz.append(int((n-1)/2)+1)
            odd_collatz.append(int((n-1)/2)-1)
    return sorted(odd_collatz)
----------------------------------------------------------------


def get_odd_collatz(n):
    
    if n%2==1:
        odd_collatz = [] 
    
    if n==1:
        odd_collatz = [] if not in odd_collatz else []
    if n<100:
        odd_collatz = [] if not in odd_collatz else []
    if n<100:
        odd_collatz = [] if not in odd_collatz else []
    if n<100:
        odd_collatz = [] if not in odd_collatz else []
    if n<100:
        odd_collatz = [] if not in odd_collatz else []
----------------------------------------------------------------


def get_odd_collatz(n):
    
    if n%2==1:
        odd_collatz = [] 
    
    if n==1:
        odd_collatz = [] 
        odd_collatz.append(n)
    else:
        odd_collatz = [] 
        odd_collatz.append(n)
        odd_collatz.extend(get_odd_collatz(n // 2))
        if n %2 == 0:
            odd_collatz.append(n if n<100 else n)
            
    return sorted(odd_collatz)
----------------------------------------------------------------


def valid_date(date):
    
    if date == '':
      return False
    if date count less than  or greater than 31 for the months 1,3,5,7,8,10,12.
      or for the months 4,6,9,11
    elif date count less than  or greater than 30 for the months 
    
    return True
----------------------------------------------------------------


def valid_date(date):
    
    if date == '':
      return False
    try:
      
      if date[-1] != ' ' or date[-3:] != '-01-01':
        return False
      if date[:2] < '01-01':
        return False
      if date[2:] > '31-01':
        return False
      if date[2:] < '01-01':
        return False
      if date[2:] > '29-01':
        return False
      if date[2:] < '01-02':
        return False
      if date[2:] > '11-01':
        return False
      if date[2:] < '01-03':
        return False
      if date[2:] > '31-03':
        return False
      if date[2:] < '01-05':
        return False
      if date[2:] > '31-05':
        return False
      if date[2:] < '01-08':
        return False
      if date[2:] > '31-08':
        return False
      if date[2:] < '01-09':
        return False
      if date[2:] > '31-09':
        return False
      if date[2:] < '01-12':
        return False
      if date[2:] > '31-12':
        return False
      return True
    except:
      return False
----------------------------------------------------------------


def valid_date(date):
    
    if date == '':
      return False
    try:
      
      if date[-1] != ' ' or date[-3:] != '-01-01':
        return False
      if date[:2] < '01' or date[:2] > '12':
        return False
      if date[2:] < '01' or date[2:] > '31':
        return False
      if date[2:] == '29' and date[:2] != '04':
        return False
      if date[2:] == '28' and date[:2] == '04':
        return False
      if date[2:] < '01' or date[2:] > '30':
        return False
      return True
    except:
      return False
----------------------------------------------------------------


def valid_date(date):
    
    if date == '':
      return False
    if date count less than  or greater than 31 for the month, 4,6,8,9,11  or 30 for the month, 2.  or in the format of dd-MM-yyyy,  where dd is the number of days,  MM is the month number (1,3,5,7,8,10,12),  YYYY is the 4-digit year (except century year).
    return True
----------------------------------------------------------------


def valid_date(date):
    
    if date == '':
      return False
    if date count not in range(1, 3):
      return False
    if date count ==  in range(1, 2):
      if date[-1] != 'h':
        return False
      if date[-2:] != '-01':
        return False
      return True
    elif date count ==  in range(2, 11):
      if date[-1] != 'h':
        return False
      if date[-2:] != '-01'or date[-2:] != '-03':
        return False
      return True
    elif date count ==  in range(12, 2):
      if date[-1] != 'h':
        return False
      if date[-2:] != '-01'or date[-2:] != '-09':
        return False
      return True
    elif date count ==  in range(2, 11):
      if date[-1] != 'h':
        return False
      if date[-2:] != '-01'or date[-2:] != '-03':
        return False
      return True
    elif date count ==  in range(2, 2):
      if date[-1] != 'h':
        return False
      if date[-2:] != '-01'or date[-2:] != '-09':
        return False
      return True
    elif date count ==  in range(2, 11):
      if date[-1] != 'h':
        return False
      if date[-2:] != '-01'or date[-2:] != '-03':
        return False
      return True
    elif date count ==  in range(2, 2):
      if date[-1] != 'h':
        return False
      if date[-2:] != '-01'or date[-2:] != '-09':
        return False
      return True
    elif date count ==  in range(2, 11):
      if date[-1] != 'h':
        return False
      if date[-2:] != '-01'or date[-2:] != '-03':
        return False
      return True
    elif date count ==  in range(2, 2):
      if date[-1] != 'h':
        return False
      if date[-2:] != '-01'or date[-2:] != '
----------------------------------------------------------------


def valid_date(date):
    
    if date == '':
      return False
    try:
      
      if date[-1] != ' ' or date[-3:] != '-01-01':
        return False
      if date[:2] < '01' or date[:2] > '12':
        return False
      if date[2:] < '01' or date[2:] > '31':
        return False
      if date[2:] == '29' and date[:2] != '06':
        return False
      if date[2:] == '28' and date[:2] == '06':
        return False
      return True
    except:
      return False
----------------------------------------------------------------


def valid_date(date):
    
    if date == '':
      return False
    try:
      
      if date[-1] != ' ' or date[-3:] != '-01-01':
        return False
      if date[:2] < '01-01':
        return False
      if date[2:] > '31-01':
        return False
      if date[2:] < '01-01':
        return False
      if date[2:] > '29-01':
        return False
      if date[2:] < '01-01':
        return False
      if date[2:] > '31-01':
        return False
      if date[2:] < '01-01':
        return False
      if date[2:] > '30-01':
        return False
      if date[2:] < '01-01':
        return False
      if date[2:] > '31-01':
        return False
      if date[2:] < '01-01':
        return False
      if date[2:] > '29-01':
        return False
      if date[2:] < '01-01':
        return False
      if date[2:] > '31-01':
        return False
      if date[2:] < '01-01':
        return False
      if date[2:] > '29-01':
        return False
      return True
    except:
      return False
----------------------------------------------------------------


def valid_date(date):
    
    if date == '':
      return False
    try:
      
      if date[-1] != ' ' or date[-3:] != '-01-01':
        return False
      if date[:2] < '01' or date[:2] > '12':
        return False
      if date[2:] < '01' or date[2:] > '31':
        return False
      if date[2:] == '29' and date[:2] > '11':
        return False
      if date[2:] == '28' and date[:2] > '10':
        return False
      return True
    except:
      return False
----------------------------------------------------------------


def valid_date(date):
    
    if date == '':
      return False
    if date count not in range(1, 3):
      return False
    if date count ==  in range(1, 2):
      if date[-1] != ' ' or date[-3:] != '-01':
        return False
      if date[:2] < '01':
        return False
      if date[2:] > '31':
        return False
      return True
    elif date count  in range(2, 4):
      if date[-1] != ' ' or date[-3:] != '-01'or date[-5:] != '-01':
        return False
      if date[:2] < '01'or date[2:] > '31':
        return False
      return True
    elif date count  in range(4, 6):
      if date[-1] != ' 'or date[-3:] != '-01'or date[-5:] != '-01'or date[-7:] != '-01':
        return False
      if date[:2] < '01'or date[2:] > '31'or date[4:] > '29':
        return False
      return True
    elif date count  in range(6, 9):
      if date[-1] != ' 'or date[-3:] != '-01'or date[-5:] != '-01'or date[-7:] != '-01'or date[-9:] != '-01':
        return False
      if date[:2] < '01'or date[2:] > '31'or date[4:] > '29'or date[6:] > '11':
        return False
      return True
    elif date count  in range(9, 12):
      if date[-1] != ' 'or date[-3:] != '-01'or date[-5:] != '-01'or date[-7:] != '-01'or date[-9:] != '-01'or date[-12:] != '-01':
        return False
      if date[:2] < '01'or date[2:] > '31'or date[4:] > '29'or date[6:] > '11'or date[9:]
----------------------------------------------------------------


def valid_date(date):
    
    if date == '':
      return False
    try:
      
      if date[-1] != ' ' or date[-3:] != '-01-01':
        return False
      if date[:2] < '01' or date[:2] > '12':
        return False
      if date[2:] < '01' or date[2:] > '31':
        return False
      if date[2:] == '29' and  not in  in  in str(date):
        return False
      if date[2:] ==  in str(date):
        return False
      if date[2:] ==  in str(date):
        return False
      return True
    except:
      return False
----------------------------------------------------------------


def split_words(txt):
    
    if  in txt:
        return txt.split()
    elif  in str(txt):
        return list(str(txt))
    return len(list(filter(lambda x: x.islower() and ord(x)%2==1,str(txt))))
----------------------------------------------------------------


def split_words(txt):
    
    if  in txt:
        return txt.split()
    elif  in str(txt):
        return list(str(txt))
    else:
        return len(list(filter(lambda x: x.islower() and ord(x) > 0, txt)))
----------------------------------------------------------------


def split_words(txt):
    
    if  in txt:
        return txt.split()
    elif  in str(txt):
        return list(str(txt))
    return len(list(filter(lambda x:  in  , str(txt))))
----------------------------------------------------------------


def split_words(txt):
    
    if  in txt:
        return txt.split()
    elif  in str(txt):
        return list(str(txt))
    else:
        return len(list(filter(lambda x: x.islower() and ord(x) > 0,str(txt))))
----------------------------------------------------------------


def split_words(txt):
    
    if  in txt:
        return txt.split()
    elif  in str(txt):
        return list(str(txt))
    else:
        return len(list(filter(lambda x: x.islower() and ord(x)%2==1,str(txt))))
----------------------------------------------------------------


def split_words(txt):
    
    if  in txt:
        return txt.split()
    elif  in str(txt):
        return list(str(txt))
    return len(list(filter(lambda x:  in  , str(txt))))
----------------------------------------------------------------


def split_words(txt):
    
    if  in txt:
        return txt.split()
    elif  in str(txt):
        return list(str(txt))
    return len(list(filter(lambda x: x.islower() and ord(x) > 0,str(txt))))
----------------------------------------------------------------


def split_words(txt):
    
    if  in txt:
        return txt.split()
    elif  in str(txt):
        return list(str(txt))
    else:
        return len(list(filter(lambda x:  in  , str(txt))))
----------------------------------------------------------------


def split_words(txt):
    
    if  in txt:
        return txt.split()
    elif  in txt:
        return list(txt)
----------------------------------------------------------------


def split_words(txt):
    
    if  in txt:
        return txt.split()
    elif  in str(txt):
        return list(str(txt))
    else:
        return len(list(filter(lambda x: x.islower() and ord(x) < 25, txt)))
----------------------------------------------------------------


def is_sorted(lst):
    
    if any(lst[i-1] > lst[i] for i in range(1, len(lst))):
        return False
    if any(lst[i-1] == lst[i] for i in range(1, len(lst))) and lst[i-1] != 0:
        return False
    if any(lst[i-1] < 0 for i in range(1, len(lst))):
        return False
    return True
----------------------------------------------------------------


def is_sorted(lst):
    
    if(len(lst)==0):
      return True
    number_count={}
    for i in lst:
      if(number_count.__contains__()==True):
        if(number_count[i]==0):
          number_count[i]+=1
        if(number_count[i]>=2):
          return False
      else:
        number_count[i]=1
    return True
----------------------------------------------------------------


def is_sorted(lst):
    
    if any(lst[i-1] > lst[i] for i in range(1, len(lst))):
        return False
    if any(lst[i-1] == lst[i] for i in range(1, len(lst))) and lst[i-1] != lst[i]:
        return False
    return True
----------------------------------------------------------------


def is_sorted(lst):
    
    if any(lst[i-1] > lst[i] for i in range(1, len(lst))):
        return False
    if any(lst[i-1] == lst[i] for i in range(1, len(lst))) and lst[i-1] > lst[i]:
        return False
    if any(lst[i-1] < lst[i] for i in range(1, len(lst))) and lst[i-1] < lst[i]:
        return False
    return True
----------------------------------------------------------------


def is_sorted(lst):
    
    if any(lst[i-1] > lst[i] for i in range(1, len(lst))):
        return False
    if any(lst[i-1] == lst[i] for i in range(1, len(lst))) and lst[i-1] != lst[i]:
        return False
    return True
----------------------------------------------------------------


def is_sorted(lst):
    
    if any(lst[i-1] > lst[i] for i in range(1, len(lst))):
        return False
    if any(lst[i-1] == lst[i] for i in range(1, len(lst))) and lst[i-1] != lst[i]:
        return False
    return True
----------------------------------------------------------------


def is_sorted(lst):
    
    if any(lst[i-1] > lst[i] for i in range(1, len(lst))):
        return False
    if any(lst[i-1] == lst[i] for i in range(1, len(lst))) and lst[i-1] > 3:
        return False
    return True
----------------------------------------------------------------


def is_sorted(lst):
    
    if(len(lst)==0):
      return True

    number_count={}
    for i in lst:
      if(number_count.__contains__()==True):
        if(number_count[i]==0):
          number_count[i]+=1
        elif(number_count[i]==1):
          return False
      else:
        number_count[i]=0
    return True
----------------------------------------------------------------


def is_sorted(lst):
    
    if(len(lst)==0):
      return True

    number_count={}
    for i in lst:
      if(number_count.__contains__()==True):
       number_count[i]+=1
      else:
       number_count[i]=1
      if(number_count[i] > 3):
        return False
      if(i > lst[lst.index(i)-1]):
        return False
      return True
----------------------------------------------------------------


def is_sorted(lst):
    
    if(len(lst)==0):
      return True

    number_count={}
    for i in lst:
      if(number_count.get(i)==None):
        number_count[i]=0
      number_count[i]+=1
      if(number_count[i] > 3):
        return False
      if(i > 0):
        if(number_count[i-1]==0):
          if(number_count[i]==0):
            if(number_count[i+1]==0):
              if(number_count[i-1]==1):
                if(lst[lst.index(i)]==i):
                  return True
                  break




def get_value(lst):
    
    if(lst[-1]==lst[0]):
      value=1
    else:
      value=0
    return value
----------------------------------------------------------------


def intersection(interval1, interval2):
    
    def is_prime(n):
        if n<2:
            return False
        for k in range(2, n-1):
            if n%k==0:
                return False
        return True
    length = max(interval1[1], interval2[1]) - min(interval1[0], interval2[0])
    if is_prime(length) and length > 0:
        return 
    if(interval1[0] <= interval2[0]):
        return
    if(interval1[1] >= interval2[1]):
        return
    return
----------------------------------------------------------------


def intersection(interval1, interval2):
    
    def is_prime(n):
        if n<2:
            return False
        for k in range(2, n-1):
            if n%k==0:
                return False
        return True
    length = max(interval1[1], interval2[1]) - min(interval1[0], interval2[0])
    if is_prime(length) and length > 0:
        return 
    if(interval1[0] <= interval2[0]):
        return
    if(interval1[1] >= interval2[1]):
        return
    return
----------------------------------------------------------------


def intersection(interval1, interval2):
    
    def is_prime(n):
        if n<2:
            return False
        for k in range(2, n-1):
            if n%k==0:
                return False
        return True
    length = max(interval1[1], interval2[1]) - min(interval1[0], interval2[0])
    if is_prime(length) and length > 0:
        return 
    if(interval1[0] <= interval2[0]):
        return
    if(interval1[1] >= interval2[1]):
        return
    return
----------------------------------------------------------------


def intersection(interval1, interval2):
    
    def is_prime(n):
        if n<2:
            return False
        for k in range(2, n-1):
            if n%k==0):
                return False
        return True
    interval1_len = interval1[1] - interval1[0]
    interval2_len = interval2[1] - interval2[0]
    if interval1_len <= 0 or interval2_len <= 0 or interval1[0] > interval2[1] or interval2[0] > interval1[1]:
        return 
    if is_prime(interval1_len) and is_prime(interval2_len):
        return
----------------------------------------------------------------


def intersection(interval1, interval2):
    
    def is_prime(n):
        if n<2:
            return False
        for k in range(2, n-1):
            if n%k==0:
                return False
        return True
    length = max(interval1[1], interval2[1]) - min(interval1[0], interval2[0])
    if is_prime(length) and length > 0:
        return 
    if(interval1[0] <= interval2[0]):
        return
    if(interval2[0] <= interval1[0]):
        return
    return
----------------------------------------------------------------


def intersection(interval1, interval2):
    
    def is_prime(n):
        if n<2:
            return False
        for k in range(2, n-1):
            if n%k==0:
                return False
        return True
    length = max(interval1[1], interval2[1]) - min(interval1[0], interval2[0])
    if is_prime(length) and length > 0:
        return 
    if(interval1[0] <= interval2[0]):
        return
    if(interval1[1] >= interval2[1]):
        return
    return
----------------------------------------------------------------


def intersection(interval1, interval2):
    
    def is_prime(n):
        if n<2:
            return False
        for k in range(2, n-1):
            if n%k==0:
                return False
        return True
    length = max(interval1[1], interval2[1]) - min(interval1[0], interval2[0])
    if is_prime(length) and length > 0:
        return 
    if(interval1[0] <= interval2[0]):
        return
    if(interval1[1] >= interval2[1]):
        return
    return
----------------------------------------------------------------


def intersection(interval1, interval2):
    
    def is_prime(n):
        if n<2:
            return False
        for k in range(2, n-1):
            if n%k==0:
                return False
        return True
    length = max(interval1[1], interval2[1]) - min(interval1[0], interval2[0])
    if is_prime(length) and length > 0:
        return 
    if(interval1[0] <= interval2[0]):
        return
    if(interval1[1] >= interval2[1]):
        return
    return
----------------------------------------------------------------


def intersection(interval1, interval2):
    
    def is_prime(n):
        if n<2:
            return False
        for k in range(2, n-1):
            if n%k==0:
                return False
        return True
    length = max(interval1[1], interval2[1]) - min(interval1[0], interval2[0])
    if is_prime(length) and length > 0:
        return 
    if(interval1[0] <= interval2[0]):
        return
    if(interval1[1] >= interval2[1]):
        return
    return
----------------------------------------------------------------


def intersection(interval1, interval2):
    
    def is_prime(n):
        if n<2:
            return False
        for k in range(2, n-1):
            if n%k==0:
                return False
        return True
    length = max(interval1[1], interval2[1]) - min(interval1[0], interval2[0])
    if is_prime(length) and length > 0:
        return 
    if(interval1[0] <= interval2[0]):
        return
    if(interval1[1] >= interval2[1]):
        return
    return
----------------------------------------------------------------

def prod_signs(arr):
    
    if not arr:
        return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
----------------------------------------------------------------


def prod_signs(arr):
    
    if not arr:
        return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
----------------------------------------------------------------

def prod_signs(arr):
    
    if not arr:
        return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
----------------------------------------------------------------


def prod_signs(arr):
    
    if not arr:
        return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
----------------------------------------------------------------


def prod_signs(arr):
    
    if not arr:
        return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
----------------------------------------------------------------

def prod_signs(arr):
    
    if not arr:
        return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
----------------------------------------------------------------

def prod_signs(arr):
    
    if not arr:
        return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
----------------------------------------------------------------


def prod_signs(arr):
    
    if not arr:
        return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
----------------------------------------------------------------

def prod_signs(arr):
    
    if not arr:
        return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
----------------------------------------------------------------


def prod_signs(arr):
    
    if not arr:
        return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
----------------------------------------------------------------


def minPath(grid, k):
    
    def get_value(grid, r, c):
        if r == -1 or c == -1 or r == len(grid) or c == len(grid[0]) or grid[r][c] == 0:
            return None
        return grid[r][c]


    def get_path(grid, r, c, k, i, j):
        if i != r or j != c or k == 0:
            return []

        if k == 1:
            if get_value(grid, r, c) == 1:
                return [1, get_value(grid, r, c)]
            return []

        my_path = []
        if get_value(grid, r, c) == 1:
            my_path += [1, get_value(grid, r, c)]
        if get_value(grid, r - 1, c) == 0:
            if get_value(grid, r, c) == 0:
                my_path += get_path(grid, r - 1, c, k - 1, my_path[-1], my_path[-1])
        if get_value(grid, r + 1, c) == 0:
            if get_value(grid, r, c) == 0:
                my_path += get_path(grid, r + 1, c, k - 1, my_path[-1], my_path[-1])
        if get_value(grid, r, c - 1) == 0:
            if get_value(grid, r, c) == 0:
                my_path += get_path(grid, r, c - 1, k - 1, my_path[-1], my_path[-1])
        if get_value(grid, r, c + 1) == 0:
            if get_value(grid, r, c) == 0:
                my_path += get_path(grid, r, c + 1, k - 1, my_path[-1], my_path[-1])
        return my
----------------------------------------------------------------


def minPath(grid, k):
    
    def get_value(grid, r, c):
        if r == -1 or c == -1 or r == len(grid) or c == len(grid[0]) or grid[r][c] == 0:
            return None
        return grid[r][c]

    def get_path(grid, r, c, k, i, j):
        if i != r or j != c or k == 0:
            return []
        if get_value(grid, r, c) == k:
            return []

        if k == 1:
            if i != r:
                path += [(r - 1, c)]
                return get_path(grid, r - 1, c, k - 1, i, j)
            if j != c:
                path += [(r, c - 1)]
                return get_path(grid, r, c - 1, k - 1, i, j)
            if i != r:
                path += [(r - 1, c)]
                return get_path(grid, r - 1, c, k - 1, i, j)
            if j != c:
                path += [(r, c)]
                return get_path(grid, r, c, k - 1, i, j)
            if i != r:
                path += [(r - 1, c)]
                return get_path(grid, r - 1, c, k - 1, i, j)
            if j != c:
                path += [(r, c)]
                return get_path(grid, r, c, k - 1, i, j)
            if i != r:
                path += [(r - 1, c)]
                return get_path(grid, r - 1, c, k - 1, i, j)
            if j != c:
                path += [(r, 
----------------------------------------------------------------


def minPath(grid, k):
    
    def get_value(grid, r, c):
        if r == -1 or c == -1 or r == len(grid) or c == len(grid[0]) or grid[r][c] == 0:
            return None
        return grid[r][c]


    def get_path(grid, r, c, k, val, pat):
        if k == 0:
            pat.append(val)
            return pat
        new_r, new_c = r + 1, c
        if get_value(grid, new_r, new_c) is None:
            pat.append(val)
            pat.append(grid[r][new_c])
            return get_path(grid, new_r, new_c, k - 1, pat, pat)
        new_r, new_c = r - 1, c
        if get_value(grid, new_r, new_c) is None:
            pat.append(val)
            pat.append(grid[new_r][c])
            return get_path(grid, new_r, new_c, k - 1, pat, pat)
        new_r, new_c = r, c + 1
        if get_value(grid, new_r, new_c) is None:
            pat.append(val)
            pat.append(grid[r][new_c])
            return get_path(grid, new_r, new_c, k - 1, pat, pat)
        new_r, new_c = r, c - 1
        if get_value(grid, new_r, new_c) is None:
            pat.append(val)
            pat.append(grid[r][new_c])
            return get_path(grid, new_r, new_c, k - 1, pat, pat)
        new_r, new_c = r + 1, c + 1
        if get_value(grid, new_r, new_c) is None
----------------------------------------------------------------


def minPath(grid, k):
    
    def get_value(grid, r, c):
        if r == -1 or c == -1 or r == len(grid) or c == len(grid[0]) or grid[r][c] == 0:
            return None
        return grid[r][c]


    def get_path(grid, r, c, k, val, pat):
        if k == 0:
            pat.append(val)
            return pat
        new_pat = get_path(grid, r + 1, c, k - 1, val + get_value(grid, r + 1, c), pat + [val + get_value(grid, r + 1, c)])
        new_pat.append(val)
        return new_pat

    pat = []
    res = get_path(grid, 0, 0, k, 1, pat)
    for i in range(len(pat)):
        if i != 0:
            if pat[i] < res[i - 1]:
                res[i - 1] = pat[i]
    return res
----------------------------------------------------------------


def minPath(grid, k):
    
    def get_value(grid, r, c):
        if r == -1 or c == -1 or r == len(grid) or c == len(grid[0]) or grid[r][c] == 0:
            return None
        return grid[r][c]


    def get_path(grid, r, c, k, i, j):
        if i != -1 and j != -1 and grid[i][j] != 0:
            grid[i][j] = 0
            if k == 0:
                return
            if k == 1:
                return 1
            x = get_path(grid, r - 1, c, k - 1, -1, -1) + get_path(grid, r + 1, c, k - 1, -1, -1) + get_path(grid, r, c - 1, k - 1, -1, -1) + get_path(grid, r, c + 1, k - 1, -1, -1)
            if x < get_value(grid, r, c):
                return x
            x = get_path(grid, r - 1, c - 1, k - 1, -1, -1) + get_path(grid, r + 1, c - 1, k - 1, -1, -1) + get_path(grid, r - 1, c + 1, k - 1, -1, -1) + get_path(grid, r + 1, c + 1, k - 1, -1, -1)
            if x < get_value(grid, r, c):
                return x
            grid[i][j] = 0


    return get_path(grid, 0, 0, k, -1, -1)
----------------------------------------------------------------


def minPath(grid, k):
    
    def get_value(grid, r, c):
        if r == -1 or c == -1 or r == len(grid) or c == len(grid[0]) or grid[r][c] == 0:
            return None
        return grid[r][c]


    def get_path(grid, r, c, k, i, j):
        if i != -1 and j != -1 and grid[i][j] != 0:
            grid[i][j] = 0
            if k == 1:
                return [get_value(grid, r, c)]
            vals = get_path(grid, r, c, k - 1, i - 1, j)
            vals += get_path(grid, r, c, k - 1, i, j - 1)
            vals += get_path(grid, r, c, k - 1, i + 1, j)
            vals += get_path(grid, r, c, k - 1, i, j + 1)
            vals.sort()
            vals.reverse()
            grid[i][j] = 0
            return vals
        return []
----------------------------------------------------------------


def minPath(grid, k):
    
    def get_value(grid, r, c):
        if r == -1 or c == -1 or r == len(grid) or c == len(grid[0]) or grid[r][c] == 0:
            return None
        return grid[r][c]


    def get_path(grid, r, c, k, current_value, result):
        
        if k == 0:
            if current_value <= result[0]:
                result.clear()
                result.append(current_value)
        if k == current_value:
            if current_value not in result:
                result.append(current_value)
        if k == current_value+1:
            if current_value not in result:
                result.clear()
                result.append(current_value+1)
        if k == current_value+current_value+1:
            if current_value not in result:
                result.clear()
                result.append(current_value+current_value+1)

        if k == current_value+current_value+current_value+1:
            if current_value not in result:
                result.clear()
                result.append(current_value+current_value+current_value+1)

        if k == current_value+current_value+current_value+current_value+1:
            if current_value not in result:
                result.clear()
                result.append(current_value+current_value+current_value+current_value+1)

        if k == current_value+current_value+current_value+current_value+current_value+1:
            if current_value not in result:
                result.clear()
                result.append(current_value+current_value+current_value+current_value+current_value+1)

        if k == current_value+current_value+current_value+current_value+current_value+current_value+1:
            if current_value not in result:
                result.clear()
                result.append(current_value+current_value+current_value+current_value+current_value+current_value+1)

        if k == current_value
----------------------------------------------------------------


def minPath(grid, k):
    
    def get_value(grid, r, c):
        if r == -1 or c == -1 or r == len(grid) or c == len(grid[0]) or grid[r][c] == 0:
            return None
        return grid[r][c]


    def get_path(grid, r, c, k, current_value, value_dict):
        if k == 0:
            return []

        if r == -1 or c == -1 or r == len(grid) or c == len(grid[0]) or grid[r][c] == 0:
            return []

        if current_value in value_dict:
            return []

        value_dict[current_value] = True

        my_path = []

        if r != -1:
            if get_value(grid, r - 1, c) is None:
                my_path += get_path(grid, r - 1, c, k - 1, current_value + 1, value_dict)
            if get_value(grid, r + 1, c) is None:
                my_path += get_path(grid, r + 1, c, k - 1, current_value + 1, value_dict)
        if c != -1:
            if get_value(grid, r, c - 1) is None:
                my_path += get_path(grid, r, c - 1, k - 1, current_value + 1, value_dict)
            if get_value(grid, r, c + 1) is None:
                my_path += get_path(grid, r, c + 1, k - 1, current_value + 1, value_dict)
        return my_path

    value_dict = set()
    return get_path(grid, 0, 0, k, 0, value_dict)
----------------------------------------------------------------


def minPath(grid, k):
    
    def get_value(grid, r, c):
        if r == -1 or c == -1 or r == len(grid) or c == len(grid[0]) or grid[r][c] == 0:
            return None
        return grid[r][c]


    def get_path(grid, r, c, k, i, j):
        if i != r or j != c or k == 0:
            return []

        if k == 1:
            if get_value(grid, r, c) == 1:
                return [1]
            return []

        my_path = []
        if get_value(grid, r, c) in [1,2]:
            if get_value(grid, r+1, c) in [1,2]:
                my_path += get_path(grid, r+1, c, k-1, i, j)
            if get_value(grid, r, c+1) in [1,2]:
                my_path += get_path(grid, r, c+1, k-1, i, j)
            if get_value(grid, r-1, c) in [1,2]:
                my_path += get_path(grid, r-1, c, k-1, i, j)
            if get_value(grid, r, c-1) in [1,2]:
                my_path += get_path(grid, r, c-1, k-1, i, j)
            if get_value(grid, r+1, c-1) in [1,2]:
                my_path += get_path(grid, r+1, c-1, k-1, i, j)
            if get_value(grid, r-1, c+1) in [1,2]:
                my_path += get_path(grid, r-1, c+1, k-1, i, j)
            if get_value(grid, r+1, c) in [1,2]:
                my_path += get_path(grid, r+1, c, k-1, i, j)
            if get_value(grid, r, c) in [1,2]:
----------------------------------------------------------------


def minPath(grid, k):
    
    def get_value(grid, r, c):
        if r == -1 or c == -1 or r == len(grid) or c == len(grid[0]) or grid[r][c] == 0:
            return None
        return grid[r][c]

    def get_path(grid, r, c, k, i, j):
        if i != r or j != c or k == 0:
            return []

        if k == 1:
            if get_value(grid, r, c) == 1:
                return [1]
            return []

        my_path = []
        if get_value(grid, r - 1, c) is None:
            if get_value(grid, r + 1, c) is None:
                return my_path
            if get_value(grid, r, c - 1) == get_value(grid, r, c + 1):
                return my_path
            if get_value(grid, r - 1, c - 1) == get_value(grid, r + 1, c + 1):
                return my_path
            if get_value(grid, r - 1, c + 1) is None:
                return my_path
        my_path += get_path(grid, r - 1, c, k - 1, i - 1, j)
        my_path += get_path(grid, r + 1, c, k - 1, i + 1, j)
        my_path += get_path(grid, r, c - 1, k - 1, i, j - 1)
        my_path += get_path(grid, r, c + 1, k - 1, i, j + 1)
        return my_path

    value = get_value(grid, 0, 0)
    if value is None:
        return []
    if value == 1:
        return []
    res = get_path(grid, 0, 0, k, 0, 0)
    return [] 
----------------------------------------------------------------

def tri(n):
    
    if n == 0:
        return []
    if n == 1:
        return [3]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2.0)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2.0)
    return my_tri
----------------------------------------------------------------

def tri(n):
    
    if n == 0:
        return []
    if n == 1:
        return [3]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2.0)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2.0)
    return my_tri
----------------------------------------------------------------


def tri(n):
    
    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append((i / 2) + 1)
        else:
            my_tri.append((i - 1) / 2 + 1 + (i + 3) / 2)
    return my_tri
----------------------------------------------------------------

def tri(n):
    
    if n == 0:
        return []
    if n == 1:
        return [3]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 3)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
----------------------------------------------------------------

def tri(n):
    
    if n == 0:
        return []
    if n == 1:
        return [3]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
----------------------------------------------------------------

def tri(n):
    
    if n == 0:
        return []
    if n == 1:
        return [3]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2.0)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2.0)
    return my_tri
----------------------------------------------------------------

def tri(n):
    
    if n == 0:
        return []
    if n == 1:
        return [3]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2.0)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2.0)
    return my_tri
----------------------------------------------------------------

def tri(n):
    
    if n == 0:
        return []
    if n == 1:
        return [3]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2.0)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2.0)
    return my_tri
----------------------------------------------------------------


def tri(n):
    
    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2.0)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2.0)
    return my_tri
----------------------------------------------------------------

def tri(n):
    
    if n == 0:
        return []
    if n == 1:
        return [3]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2.0)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2.0)
    return my_tri
----------------------------------------------------------------


def digits(n):
    
    def even_digits(x):
        return int(str(x)[2::])
    
    def odd_digits(x):
        return int(str(x)[1::])
    
    if all(even_digits(i) for i in str(n)):
        return 0
    return n % 10 * (odd_digits(n) if n % 10 == 1 else 0)
----------------------------------------------------------------


def digits(n):
    
    def even_or_zero(x):
        if x%2 == 0:
            return 1
        return 0

    p = 1
    for c in str(abs(n)):
        if c != '0':
            p *= int(c)
    return p if  else 0
----------------------------------------------------------------


def digits(n):
    
    def even_digits(x):
        return int(str(x)[2::])
    
    def product(x):
        return x if x > 0 else 0
    return product(even_digits(n))
----------------------------------------------------------------


def digits(n):
    
    def even_or_zero(x):
        if x%2 == 0:
            return 1
        return 0

    p = 1
    for c in str(abs(n)):
        if c != '0':
            p *= int(c)
    return p if  else 0
----------------------------------------------------------------


def digits(n):
    
    def even_or_zero(x):
        if x%2 == 0:
            return 1
        return 0

    p = 1
    for c in str(abs(n)):
        if c.isdigit():
            p *= int(c)
        else:
            break
    return p if  else  0
----------------------------------------------------------------


def digits(n):
    
    def even_digits(n):
        odd_digits = 1
        for digit in str(n):
            if int(digit)%2==1:
                odd_digits*=int(digit)
        return odd_digits
    return even_digits(n)
----------------------------------------------------------------


def digits(n):
    
    def even_or_zero(x):
        if x%2 == 0:
            return 1
        return 0

    p = 1
    for c in str(abs(n)):
        if c != '0':
            p = p*int(c)
    return pif(p > 0, p)
           

#
def even_digits(n):
    
    def even_or_zero(x):
        if x%2 == 0:
            return 1
        return 0

    p = 1
    for c in str(abs(n)):
        if c != '0':
            p = p*int(c)
    return pif(p > 0, p)
           
def even_digits(n):
    
    def even_or_zero(x):
        if x%2 == 0:
            return 1
        return 0

    p = 1
    for c in str(abs(n)):
        if c != '0':
            p = p*int(c)
    return pif(p > 0, p)
           
def even_digits(n):
    
    def even_or_zero(x):
        if x%2 == 0:
            return 1
        return 0

    p = 1
    for c in str(abs(n)):
        if c != '0':
            p = p*int(c)
    return pif(p > 0, p)
           
def even_digits(n):
    
    def even_or_zero(x):
        if x%2 == 0:
            return 1
        return 0

    p = 1
    for c in str(abs(n)):
        if c != '0':
            p = p*int(c)
    return pif(p > 0, p)
           
def even_digits(n):
    
    def even_or_zero(x):
        if x%2 == 0:
            return 1
        return 0

    p = 1
    for c in str(abs(n))
----------------------------------------------------------------


def digits(n):
    
    def even_or_zero(x):
        if x%2 == 0:
            return 1
        return 0

    p = 1
    for c in str(abs(n)):
        p *= int(c)
    return p if  else 0
----------------------------------------------------------------


def digits(n):
    
    def even_or_zero(x):
        if x%2 == 0:
            return 1
        return 0

    p = 1
    for c in str(abs(n)):
        if c != '0':
            p *= int(c)
    return p if  else 0
----------------------------------------------------------------


def digits(n):
    
    def even_or_zero(x):
        if x%2 == 0:
            return 1
        return 0

    digits_product = 1
    for c in str(n):
        digits_product*= int(c)
    return even_or_zero(digits_product)
----------------------------------------------------------------


def is_nested(string):
    
    def check(ind):
        lev = 0
        for i in range(ind, len(string)):
            if string[i] == :
                lev += 1
            else:
                lev -= 1
            if lev < 0:
                return False
        return True if len(string[ind : i]) >= lev else False


    return check(0) or check(1)
----------------------------------------------------------------


def is_nested(string):
    
    def validate_sequence(lst):
        
        def check_nest(x):
            if (x > 0):
                cnt += 1
                check_nest(x - 1)
            if (x < 0):
                cnt += 1
                check_nest(x + 1)
            if (cnt > 0):
                return True
            return False
        
        cnt = 0
        for i in lst:
            if i == :
                cnt += 1
                check_nest(1)
            if i == :
                cnt -= 1
                check_nest(-1)
        return cnt <= 1
    
    return validate_sequence(list(string))
----------------------------------------------------------------


def is_nested(string):
    
    def check(closing, opening):
        if opening != opening(closing):
            return False
        return check(closing+1, opening-1) if opening != opening(check(closing, opening)) else check(closing+1, check(closing, opening))


    return bool(check(len(string), 1))
----------------------------------------------------------------


def is_nested(string):
    
    def validate_sequence(lst):
        
        if len(lst) < 2:
            return False
        if lst[-1] != :
            lst.append(:)
        if lst[-2] == :
            lst.pop()
            return validate_sequence(lst)
        return True

    opening_bracket_index = [i for i, x in enumerate(string) if x ==][::-1]
    if any(validate_sequence(lst) for i, lst in enumerate(opening_bracket_index)):
        return True
    return False
----------------------------------------------------------------


def is_nested(string):
    
    def check(s):
        val = 0
        for i in s:
            if i == :
                val += 1
            else:
                val -= 1
            if val < 0:
                return False
        return True if len(s) == val else False


    return check(string)
----------------------------------------------------------------


def is_nested(string):
    
    def check(ind):
        lev = 0
        for i in range(ind, len(string)):
            if string[i] == :
                lev += 1
            else:
                lev -= 1
            if lev < 0:
                return False
        return True if len(string[ind : i]) >= lev else False


    return check(0) or check(1)
----------------------------------------------------------------


def is_nested(string):
    
    def validate_sequence(lst):
        
        if len(lst) < 2:
            return False
        if lst[-1] != :
            lst.append(:)
        if lst[-2] == :
            lst.pop()
            return validate_sequence(lst)
        return True

    opening_bracket_index = [i for i, x in enumerate(string) if x ==][::-1]
    if(validate_sequence(opening_bracket_index) == False):
        return False
    return True
----------------------------------------------------------------


def is_nested(string):
    
    def check(closing, opening):
      
      if( opening >  closing ) :
          return False
      if( opening == closing ) :
          if(check( (closing -  closing) /2,  (closing -  closing) /2)  ) :
              return True
          return False
      if( opening <  closing ) :
          if(check( (closing -  closing) /2,  (closing -  closing) /2)  ) :
              return True
          return False
      return False
    
    return check(len(string), 0)
----------------------------------------------------------------


def is_nested(string):
    
    def validate_sequence(st):
        
        val = []
        for i in st:
            if i == :
                val.append(True)
            else:
                val.append(val.pop() if val else False)
        return any(x for x in val)


    return  if len(string) > 20 else  in string
----------------------------------------------------------------


def is_nested(string):
    
    def check(ind):
        lev = 0
        for i in range(ind, len(string)):
            if string[i] == :
                lev += 1
            else:
                lev -= 1
            if lev < 0:
                return False
        return True if len(string[ind : i]) >= lev else False


    return check(0) or check(1)
----------------------------------------------------------------


def sum_squares(lst):
    
    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
----------------------------------------------------------------


def sum_squares(lst):
    
    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
----------------------------------------------------------------


def sum_squares(lst):
    
    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
----------------------------------------------------------------


def sum_squares(lst):
    
    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
----------------------------------------------------------------


def sum_squares(lst):
    
    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
----------------------------------------------------------------


def sum_squares(lst):
    
    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
----------------------------------------------------------------


def sum_squares(lst):
    
    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
----------------------------------------------------------------


def sum_squares(lst):
    
    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
----------------------------------------------------------------


def sum_squares(lst):
    
    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
----------------------------------------------------------------


def sum_squares(lst):
    
    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
----------------------------------------------------------------


def check_if_last_char_is_a_letter(txt):
    
    if(len(txt)==0):
      return False
    if((txt[-1] > 97) or (txt[-1] < 65)):
      return False
    if((txt[-1] > 90) and (txt[-1] < 97)):
      return False
    if((txt[-1] > 78) and (txt[-1] < 90)):
      return False
    if((txt[-1] > 111) and (txt[-1] < 75)):
      return False
    if((txt[-1] > 75) and (txt[-1] < 111)):
      return False
    return True
----------------------------------------------------------------


def check_if_last_char_is_a_letter(txt):
    
    if(len(txt)==0):
      return False
    if((txt[-1] > 97) or (txt[-1] < 65)):
      return False
    if((txt[-1] > 90) and (txt[-1] < 97)):
      return False
    if((txt[-1] > 78) and (txt[-1] < 90)):
      return False
    if((txt[-1] > 71) and (txt[-1] < 78)):
      return False
    if((txt[-1] > 64) and (txt[-1] < 71)):
      return False
    if((txt[-1] > 48) and (txt[-1] < 64)):
      return False
    if((txt[-1] > 57) and (txt[-1] < 48)):
      return False
    return True
----------------------------------------------------------------


def check_if_last_char_is_a_letter(txt):
    
    if len(txt) == 0:
      return False
    if not check(txt[-1]):
      return False
    if any(c in txt for c in words):
      return False
    return True
----------------------------------------------------------------


def check_if_last_char_is_a_letter(txt):
    
    split_text = txt.split()
    check_if_is_empty(split_text)
    return check_if_is_empty(split_text[-1]) and split_text[-1].isalpha()
----------------------------------------------------------------


def check_if_last_char_is_a_letter(txt):
    
    split_text = txt.split()
    check_if_is_one_letter_in_words(split_text[-1])
    return check_if_is_one_letter_in_words(txt[-1])


def check_if_is_one_letter_in_words(txt):
    
    return any(not in s for s in txt.split())
----------------------------------------------------------------


def check_if_last_char_is_a_letter(txt):
    
    if len(txt) == 0:
      return False
    if not check(txt[-1]):
      return False
    if any(c in txt for c in words) or any(c -> check(c), words):
      return False
    return True
----------------------------------------------------------------


def check_if_last_char_is_a_letter(txt):
    
    if len(txt) == 0:
      return False
    if not((97 <= txt[-1] <= 122) or (97 <= txt[-1] <= 90) or (32 <= txt[-1] <= 50)):
      return False
    if in (
      ):
      return False
    return True
----------------------------------------------------------------


def check_if_last_char_is_a_letter(txt):
    
    if(len(txt)==0):
      return False
    if((txt[-1] > 97) or (txt[-1] < 65)):
      return False
    if((txt[-1] > 90) and (txt[-1] < 97)):
      return False
    if((txt[-1] > 78) and (txt[-1] < 90)):
      return False
    if((txt[-1] > 111) and (txt[-1] < 75)):
      return False
    if((txt[-1] > 75) and (txt[-1] < 111)):
      return False
    return True
----------------------------------------------------------------


def check_if_last_char_is_a_letter(txt):
    
    split_text = txt.split()
    check_text =  + ' '.join(split_text)
    return check_text[-1].isalpha() and  + ' '.join(split_text[:-1]) not in  + ' '.join(split_text[1:])
----------------------------------------------------------------


def check_if_last_char_is_a_letter(txt):
    
    split_text = txt.split()
    check_text =  + ' '.join(split_text)
    return check_text[-1].isalpha() and  + ' '.join(split_text) not in  + ' '.join(lst_exclamation_words)
----------------------------------------------------------------


def can_arrange(arr):
    
    ind=-1
    i=1
    
    while(i<len(arr)):
      if (arr[i]<arr[i-1]):
        ind=i
      i+=1
    return ind
----------------------------------------------------------------


def can_arrange(arr):
    
    ind=-1
    i=1
    
    while(i<len(arr)):
      if (arr[i]<arr[i-1]):
        ind=i
      i+=1
    return ind
----------------------------------------------------------------


def can_arrange(arr):
    
    ind=-1
    i=1
    while(i<len(arr)):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
----------------------------------------------------------------


def can_arrange(arr):
    
    ind=-1
    i=1
    while(i<len(arr)):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
----------------------------------------------------------------


def can_arrange(arr):
    
    ind=-1
    i=1
    
    while(i<len(arr)):
      if (arr[i]<arr[i-1]):
        ind=i
      i+=1
    return ind
----------------------------------------------------------------


def can_arrange(arr):
    
    ind=-1
    i=1
    while(i<len(arr)):
      if (arr[i]<arr[i-1]):
        ind=i
      i+=1
    return ind
----------------------------------------------------------------


def can_arrange(arr):
    
    ind=-1
    i=1
    while(i<len(arr)):
      if (arr[i]<arr[i-1]):
        ind=i
      i+=1
    return ind
----------------------------------------------------------------


def can_arrange(arr):
    
    ind=-1
    i=1
    while(i<len(arr)):
      if (arr[i]<arr[i-1]):
        ind=i
      i+=1
    return ind
----------------------------------------------------------------


def can_arrange(arr):
    
    ind=-1
    i=1
    
    while(i<len(arr)):
      if (arr[i]<arr[i-1]):
        ind=i
      i+=1
    return ind
----------------------------------------------------------------


def can_arrange(arr):
    
    ind=-1
    i=1
    while(i<len(arr)):
      if (arr[i]<arr[i-1]):
        ind=i
      i+=1
    return ind
----------------------------------------------------------------


def largest_smallest_integers(lst):
    
    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
----------------------------------------------------------------


def largest_smallest_integers(lst):
    
    smallest = []
    largest = []

    for i in lst:
        if i < 0:
            smallest.append(i)
        if i > 0:
            largest.append(i)
    
    if len(smallest) == 0:
        smallest = None
    if len(largest) == 0:
        largest = None

    return (max(smallest), min(largest))
----------------------------------------------------------------


def largest_smallest_integers(lst):
    
    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
----------------------------------------------------------------


def largest_smallest_integers(lst):
    
    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
----------------------------------------------------------------


def largest_smallest_integers(lst):
    
    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
----------------------------------------------------------------


def largest_smallest_integers(lst):
    
    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
----------------------------------------------------------------


def largest_smallest_integers(lst):
    
    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
----------------------------------------------------------------


def largest_smallest_integers(lst):
    
    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
----------------------------------------------------------------


def largest_smallest_integers(lst):
    
    smallest = []
    largest = []

    for i in lst:
        if i < 0:
            smallest.append(i)
        if i > 0:
            largest.append(i)
    
    if len(smallest) == 0:
        smallest = None
    if len(largest) == 0:
        largest = None

    return (max(smallest), min(largest))
----------------------------------------------------------------


def largest_smallest_integers(lst):
    
    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
----------------------------------------------------------------


def compare_one(a, b):
    
    if isinstance(a,str) and isinstance(b,str):
        return None if a == b else compare_one(float(a), float(b))
    elif isinstance(a,float) and isinstance(b,float):
        return None if a == b else compare_one(int(round(a)), int(round(b)))
    else:
        return None if a == b else compare_one(a, b)
----------------------------------------------------------------


def compare_one(a, b):
    
    if isinstance(a, str): a = a.replace(',', '.').replace(' ', '')
    if isinstance(b, str): b = b.replace(',', '.').replace(' ', '')

    if float(a) == float(b): return None
    return a if float(a) > float(b) else b
----------------------------------------------------------------


def compare_one(a, b):
    
    if isinstance(a, str): a = a.replace(',', '.')
    if isinstance(b, str): b = b.replace(',', '.')
    if float(a) == float(b): return None
    return a if float(a) > float(b) else b
----------------------------------------------------------------


def compare_one(a, b):
    
    if isinstance(a,str) and isinstance(b,str):
        return None if a == b else compare_one(float(a),float(b))
    elif a == b:
        return None
    else:
        return a if a > b else b
----------------------------------------------------------------


def compare_one(a, b):
    
    if isinstance(a,str) and isinstance(b,str):
        return None if a == b else a
    elif a == b:
        return None
    else:
        return a if a > b else b
----------------------------------------------------------------


def compare_one(a, b):
    
    if isinstance(a,str) and isinstance(b,str):
        return None if a == b else a
    elif a == b:
        return None
    elif isinstance(a,float) and isinstance(b,float):
        return a if a > b else b
    elif isinstance(a,float) and isinstance(b,int):
        return a
    elif isinstance(b,float) and isinstance(a,int):
        return b
    else:
        return a
----------------------------------------------------------------


def compare_one(a, b):
    
    if isinstance(a,str) and isinstance(b,str):
        return None if a == b else compare_one(float(a),float(b))
    elif isinstance(a,float) and isinstance(b,float):
        return None if a == b else compare_one(int(round(a)),int(round(b)))
    elif a == b:
        return None
    else:
        return a if a > b else b
----------------------------------------------------------------


def compare_one(a, b):
    
    if isinstance(a, str): a = a.replace(',', '.').replace(' ', '')
    if isinstance(b, str): b = b.replace(',', '.').replace(' ', '')

    if float(a) == float(b): return None
    return a if float(a) > float(b) else b
----------------------------------------------------------------


def compare_one(a, b):
    
    if isinstance(a, str): a = a.replace(',', '.').replace(' ', '')
    if isinstance(b, str): b = b.replace(',', '.').replace(' ', '')

    if float(a) == float(b): return None
    return a if float(a) > float(b) else b
----------------------------------------------------------------


def compare_one(a, b):
    
    if isinstance(a,str) and isinstance(b,str):
        return None if a == b else a
    elif a == b:
        return None
    elif isinstance(a,float) and isinstance(b,float):
        return a
    elif isinstance(a,float):
        return b
    elif isinstance(b,float):
        return a
----------------------------------------------------------------


def is_equal_to_sum_even(n):
    
    return n%2 == 0 and n >= 8
----------------------------------------------------------------


def is_equal_to_sum_even(n):
    
    return n%2 == 0 and n >= 8
----------------------------------------------------------------


def is_equal_to_sum_even(n):
    
    return n%2 == 0 and n >= 8
----------------------------------------------------------------


def is_equal_to_sum_even(n):
    
    return n%2 == 0 and n >= 8
----------------------------------------------------------------


def is_equal_to_sum_even(n):
    
    return n%2 == 0 and n >= 8
----------------------------------------------------------------


def is_equal_to_sum_even(n):
    
    return n%2 == 0 and n >= 8
----------------------------------------------------------------


def is_equal_to_sum_even(n):
    
    return n%2 == 0 and n >= 8
----------------------------------------------------------------


def is_equal_to_sum_even(n):
    
    return n%2 == 0 and n >= 8
----------------------------------------------------------------


def is_equal_to_sum_even(n):
    
    return n%2 == 0 and n >= 8
----------------------------------------------------------------


def is_equal_to_sum_even(n):
    
    return n%2 == 0 and n >= 8
----------------------------------------------------------------


def special_factorial(n):
    
    def factorial(x):
        if x == 0 or x == 1:
            return 1
        return x * factorial(x - 1)

    return int(n ** (5 / 4) * factorial(n - 1))
----------------------------------------------------------------


def special_factorial(n):
    
    def factorial(x):
        if x == 0 or x == 1:
            return 1
        return x * factorial(x - 1)

    return n * factorial(n - 1)
----------------------------------------------------------------


def special_factorial(n):
    
    def factorial(x):
        if x == 0 or x == 1:
            return 1
        return x * factorial(x - 1)

    return n * factorial(n - 1)
----------------------------------------------------------------


def special_factorial(n):
    
    def factorial(x):
        if x == 0 or x == 1:
            return 1
        return x * factorial(x - 1)

    return int(n ** (
                special_fact(n - 2) ** (
                special_fact(n - 3) ** (
                special_fact(n - 4) ** (
                special_fact(n - 5) ** (
                special_fact(n - 6) ** (
                special_fact(n - 7) ** (
                special_fact(n - 8) ** (
                special_fact(n - 9) ** (
                special_fact(n - 10) ** (
                special_fact(n - 11) ** (
                special_fact(n - 12) ** (
                special_fact(n - 13) ** (
                special_fact(n - 14) ** (
                special_fact(n - 15) ** (
                special_fact(n - 16) ** (
                special_fact(n - 17) ** (
                special_fact(n - 18) ** (
                special_fact(n - 19) ** (
                special_fact(n - 20) ** (
                special_fact(n - 21) ** (
                special_fact(n - 22) ** (
                special_fact(n - 23) ** (
                special_fact(n - 24) ** (
                special_fact(n - 25) ** (
                special_fact(n - 26) ** (
                special_fact(n - 27) ** (
                special_fact(n - 28) ** (
                special_fact(n - 29) ** (
                special_fact(n - 30) ** (
                special_fact(n - 31) ** (
                special_fact(n - 32) ** (
                special_fact(n - 33) ** (
                special_fact(n 
----------------------------------------------------------------


def special_factorial(n):
    
    def factorial(x):
        if x == 0 or x == 1:
            return 1
        return x * factorial(x - 1)

    return int(round(math.multiply(*[factorial(i) for i in range(n + 1)])))
----------------------------------------------------------------


def special_factorial(n):
    
    def factorial(x):
        if x == 0 or x == 1:
            return 1
        return x * factorial(x - 1)

    return  * (factorial(n))
----------------------------------------------------------------


def special_factorial(n):
    
    def factorial(x):
        if x == 0 or x == 1:
            return 1
        return x * factorial(x - 1)

    return int(n ** (
                special_fact(n)) / factorial(n - 1))
----------------------------------------------------------------


def special_factorial(n):
    
    def factorial(x):
        if x == 0 or x == 1:
            return 1
        return x * factorial(x - 1)

    return int(round(math.special(n)))
----------------------------------------------------------------


def special_factorial(n):
    
    def factorial(x):
        if x == 0 or x == 1:
            return 1
        return x * factorial(x - 1)

    return  if n == 0 else  in factoir(n)
----------------------------------------------------------------


def special_factorial(n):
    
    from math import factorial
    return factorial(n)
----------------------------------------------------------------


def fix_spaces(text):
    
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_
----------------------------------------------------------------


def fix_spaces(text):
    
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_
----------------------------------------------------------------


def fix_spaces(text):
    
    
    def fix(i, j):
        if i != j:
            if j - i ==  2:
                text = text[:i] + ' '*3 + text[i+2:]
            else:
                text = text[:i] + ' '*(j - i) + text[i+1:]
        return text
    
    return fix(text.rindex( ), text.rindex( )+1)
----------------------------------------------------------------


def fix_spaces(text):
    
    
    def fix(i, j):
        if i != j:
            if j - i ==  2:
                text = text[:i] + ' '*3 + text[i+1:j]
            elif j - i ==  3:
                text = text[:i] + ' '*5 + text[i+1:j]
            else:
                text = text[:i] + ' '*(j - i) + text[i+1:j]
        return text
    
    return fix(fix(text).rindex( ), fix(text.rindex( )))
----------------------------------------------------------------


def fix_spaces(text):
    
    
    def fix(i, j):
        if i == j:
            return
        if i < j:
            text = text[:i] + ' ' * (j - i) + text[i:]
        else:
            text = text[:j] + ' ' * (i - j) + text[j:]
        return text
    
    
    text =  
    start, end = -1, -1
    space_len = 0
    for i, c in enumerate(text):
        if c == :
            if space_len == 0:
                space_len += 1; start, end = i, i
            elif space_len == 1:
                space_len += 1; end += 1; start, end = i, end
            elif space_len == 2:
                space_len += 1; end += 1; start, end = i, end
                space_len = 0;
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
----------------------------------------------------------------


def fix_spaces(text):
    
    
    def fix(i, j):
        if i == j:
            return
        if i < j:
            text = text[:i] + ' '*(j - i) + text[i+1:j]
        else:
            text = text[:j] + ' '*(i - j) + text[j+1:i]
        return
    
    
    
    
    text = text.replace(" ", "_")
    
    
    
    
    
    return
----------------------------------------------------------------


def fix_spaces(text):
    
    
    def fix(i, j):
        if i == j:
            return
        if i < j:
            text = text[:i] + ' '*(j - i) + text[i:]
        else:
            text = text[:j] + ' '*(i - j) + text[j:]
        return text
    
    
    
    return fix(text.count(),text.count()+1)
----------------------------------------------------------------


def fix_spaces(text):
    
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_spaces(text):
    
def fix_
----------------------------------------------------------------


def fix_spaces(text):
    
    
    def fix(start, end):
        if end > start + 2:
            return
        return
        
    return .join(fix(*x) for x in text.split())
----------------------------------------------------------------


def fix_spaces(text):
    
    
    def fix(start, end):
        if end > start + 2:
            text = text[:start] + ' ' * (end - start - 2) + text[end:]
        elif end > start:
            text = text[:start] + '_' * (end - start) + text[end:]
        else:
            text = text
        return text
    
    return fix(text.rfind( ), text.rindex( ))
----------------------------------------------------------------


def file_name_check(file_name):
    
    if(len(file_name) <= 3):
        return 
    if(file_name[2] !=  ):
        return 
    if((file_name[0] <= 64) and (file_name[0] >=  ) and 
           (len(file_name) <= 10)):
        return 
    if((file_name[6] <= 64) and (file_name[6] >=  ) and 
           (len(file_name) <= 10)):
        return 
    if((file_name[3] <= 64) and (file_name[3] >=  ) and 
           (len(file_name) <= 10)):
        return 
    if((file_name[5] <= 64) and (file_name[5] >=  ) and 
           (len(file_name) <= 10)):
        return 
    if((file_name[0] <= 64) and (file_name[6] <= 64) and 
           (file_name[3] <= 64) and (file_name[5] <= 64) and 
           (len(file_name) <= 10)):
        return 
    if((file_name[6] <= 64) and (file_name[3] <= 64) and 
           (len(file_name) <= 10)):
        return 
    if((file_name[3] <= 64) and (len(file_name) <= 10)):
        return 
    if((file_name[5] <= 64) and (len(file_name) <= 10)):
        return 
    if((file_name[2] !=  ) or (file_name[6] !=  ) or 
           (file_name[3] !=  ) or (file_name[5] !=  ) or 
           (len(file_name) <= 10)):
        return
----------------------------------------------------------------


def file_name_check(file_name):
    
    t = file_name.rsplit(sep=r, maxsplit=2)
    if len(t) != 2:
        return 
    if not t[1] in [, , ]:
        return 
    if len(t[0]) == 0:
        return 
    if not t[0][0] in [, , , , ]:
        return 
    digits = 0
    for i in t[0]:
        if i.isdigit():
            digits += 1
    if digits > 3:
        return 
    return
----------------------------------------------------------------


def file_name_check(file_name):
    
    t =  + ' '
    f = []  +  
    if(len(file_name) <= 20):
        if(file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  +  or file_name[0] in  
----------------------------------------------------------------


def file_name_check(file_name):
    
    t =  + ' '
    f = []
    if(file_name.find(t) != -1):
        f = file_name.split(t)
    if(len(f) != 2):
        return
    if((f[1] == 'txt' or f[1] == 'exe' or f[1] == 'dll') and f[0] != '' and  in f[0]):
        return
    return
----------------------------------------------------------------


def file_name_check(file_name):
    
    t =  + ' '
    f = []
    if(len(file_name) <= 20):
        if(file_name[0] in  or  file_name[0] in  or  file_name[0] in  or  file_name[0] in  or  file_name[0] in  or  file_name[0] in  or  file_name[0] in  or  file_name[0] in  or  file_name[0] in  or  file_name[0] in  or  file_name[0] in  or  file_name[0] in  or  file_name[0] in  or  file_name[0]):
            f.append(file_name[0])
        if(len(file_name) >= 2):
            if(file_name[1] ==  or  file_name[1] ==  or  file_name[1] ==  or  file_name[1] ==  or  file_name[1] ==  or  file_name[1] ==  or  file_name[1] ==  or  file_name[1] ==  or  file_name[1]):
                f.append(file_name[1])
            if(len(file_name) >= 3):
                if(file_name[2] ==  or  file_name[2] ==  or  file_name[2] ==  or  file_name[2] ==  or  file_name[2] ==  or  file_name[2] ==  or  file_name[2] ==  or  file_name[2]):
                    f.append(file_name[2])
                
                
    if(len(f) <= 3):
        return
----------------------------------------------------------------


def file_name_check(file_name):
    
    t =  + ' '
    f = []
    if(file_name.find(t) != -1):
        f = file_name.split(t)
    if(len(f) != 2):
        return
    if((f[1] == 'txt' or f[1] == 'exe' or f[1] == 'dll') and f[0] != '' and  in f[0]):
        return
    return
----------------------------------------------------------------


def file_name_check(file_name):
    
    t = file_name.rsplit(sep=r)
    if len(t) != 2:
      return 
    if not t[1] in [, txt, dll]:
      return 
    if len(t[0]) == 0:
      return 
    if not t[0][0].isalpha():
      return 
    return
----------------------------------------------------------------


def file_name_check(file_name):
    
    t = file_name.split(sep=r)
    if(len(t)!=2):
        return 
    if(not t[1] in ['txt','dll','exe']):
        return 
    if(len(t[0])==0):
        return 
    if(not t[0][0] in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not
----------------------------------------------------------------


def file_name_check(file_name):
    
    t = file_name.rsplit(sep=r, maxsplit=2) 
    if len(t) != 2:
        return 
    if not t[1] in [, txt, dll, exe]:
        return 
    if len(t[0]) == 0:
        return 
    if not t[0][0] in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not
----------------------------------------------------------------


def file_name_check(file_name):
    
    t = file_name.split(sep=r)
    if(len(t)!=2):
        return 
    if(not t[1] in ['txt','dll','exe']):
        return 
    if(len(t[0])==0):
        return 
    if(not t[0][0] in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not in  or  not
----------------------------------------------------------------


def sum_squares(lst):
    
    
    return sum(x**2 for idx,x in enumerate(lst) if idx%3==0)
----------------------------------------------------------------


def sum_squares(lst):
    
    
    return sum(x**2 for idx,x in enumerate(lst) if idx%3==0)
----------------------------------------------------------------


def sum_squares(lst):
    
    
    def square(i):
        if i < 4:
            return i ** 2
        return i ** 3
    return sum(square(i) for i in lst)
----------------------------------------------------------------


def sum_squares(lst):
    
    
    return sum(x**2 for idx,x in enumerate(lst) if idx%3==0)
----------------------------------------------------------------


def sum_squares(lst):
    
    
    return sum(x**2 for idx,x in enumerate(lst) if idx%3==0)
----------------------------------------------------------------


def sum_squares(lst):
    
    
    return sum(x**2 for idx,x in enumerate(lst) if idx%3==0)
----------------------------------------------------------------


def sum_squares(lst):
    
    
    return sum(x**2 for idx,x in enumerate(lst) if idx%3==0)
----------------------------------------------------------------


def sum_squares(lst):
    
    
    return sum(x**2 for idx,x in enumerate(lst) if idx%3==0)
----------------------------------------------------------------


def sum_squares(lst):
    
    
    def square(i):
        if i < 4:
            return i ** 2
        return (i - 2) ** 3
    return sum(square(i) for i in lst)
----------------------------------------------------------------


def sum_squares(lst):
    
    
    return sum(x**2 for idx,x in enumerate(lst) if idx%3==0)
----------------------------------------------------------------


def words_in_sentence(sentence):
    
    def is_prime(n):
        if n == 1 or n == 0:
            return False
        if n == 2:
            return True
        if n > 2 and n % 2 == 0:
            return False
        return True

    new_lst = []
    for word in sentence.split():
        if is_prime(len(word)):
            new_lst.append(word)
    return .join(new_lst)
----------------------------------------------------------------


def words_in_sentence(sentence):
    
    def is_prime(n):
        if n<2:
            return False
        for k in range(2,n-1):
            if n%k==0):
                return False
        return True
    words_in_new_order = []
    for word in sentence.split():
        if is_prime(len(word)):
            words_in_new_order.append(word)
    return .join(words_in_new_order)
----------------------------------------------------------------


def words_in_sentence(sentence):
    
    
    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
                break
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return .join(new_lst)
----------------------------------------------------------------


def words_in_sentence(sentence):
    
    def is_prime(n):
        if n<2:
            return False
        for k in range(2,n-1):
            if n%k==0:
                return False
        return True
    
    new_lst = []
    for word in sentence.split():
        if is_prime(len(word)):
            new_lst.append(word)
    return .join(new_lst)
----------------------------------------------------------------


def words_in_sentence(sentence):
    
    
    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
                break
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return .join(new_lst)
----------------------------------------------------------------


def words_in_sentence(sentence):
    
    
    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
                break
        if flg == 0 or  in str(new_lst):
            new_lst.append(word)
    return .join(new_lst)
----------------------------------------------------------------


def words_in_sentence(sentence):
    
    def is_prime(n):
        if n == 1 or n == 0:
            return False
        if n == 2:
            return True
        if n > 2 and n % 2 == 0:
            return False
        return True

    new_lst = []
    for word in sentence.split():
        if is_prime(len(word)):
            new_lst.append(word)
    return .join(new_lst)
----------------------------------------------------------------


def words_in_sentence(sentence):
    
    
    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
                break
        if flg == 0 or  in str(new_lst):
            new_lst.append(word)
    return .join(new_lst)
----------------------------------------------------------------


def words_in_sentence(sentence):
    
    def is_prime(n):
        if n <= 1:
            return False
        for k in range(2, n-1):
            if n % k == 0:
                return False
        return True
    words_in_new_order = [] 
    for word in sentence.split():
        if is_prime(len(word)):
            words_in_new_order.append(word) 
    return .join(words_in_new_order)
----------------------------------------------------------------


def words_in_sentence(sentence):
    
    
    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
                break
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return .join(new_lst)
----------------------------------------------------------------


def simplify(x, n):
    
    def eval_frac(a, b):
        return a * b

    x_value, x_den = x.split()
    y_value, y_den = n.split()
    for i in range(max(int(x_value), int(y_value))):
        if eval_frac(int(x_value), int(x_den)) != eval_frac(int(y_value), int(y_den)):
            return False
    return True
----------------------------------------------------------------


def simplify(x, n):
    
    def eval_frac(a, b):
        return a * b

    x_value, x_den = x.split()
    y_value, y_den = n.split()
    for i in range(max(int(x_value), int(y_value))):
        if eval_frac(int(x_value), int(x_den)) != eval_frac(int(y_value), int(y_den)):
            return False
    return True
----------------------------------------------------------------


def simplify(x, n):
    
    def eval_frac(a, b):
        return a * b

    x_value, x_den = x.split()
    y_value, y_den = n.split()
    has_same_den = x_den == y_den
    if has_same_den:
        x_value = eval_frac(int(x_value), int(x_den))
        y_value = eval_frac(int(y_value), int(y_den))
        return x_value == y_value
    return False
----------------------------------------------------------------


def simplify(x, n):
    
    def eval_expr(expr):
        return eval(expr)
    x_tuple = x.replace(',', '').split()
    n_tuple = n.replace(',', '').split()
    a = int(x_tuple[0]) * int(x_tuple[2])
    b = int(x_tuple[2]) * int(x_tuple[3])
    c = int(n_tuple[0]) * int(n_tuple[2])
    d = int(n_tuple[2]) * int(n_tuple[3])
    if eval_expr(str(a) + ' ' + str(b) + ' ' +  + str(c) + ' ' +  ) == eval_expr(str(c) + ' ' + str(d) + ' '  +  )
      return True
    return False
----------------------------------------------------------------


def simplify(x, n):
    
    def eval_frac(a, b):
        return a * b

    x_value, x_den = x.split()
    x_value, x_den = int(x_value), int(x_den)
    n_value, n_den = n.split()
    n_value, n_den = int(n_value), int(n_den)
    if eval_frac(x_value, x_den) * eval_frac(n_value, n_den) == eval_frac(x_value, x_den):
        return True
    return False
----------------------------------------------------------------


def simplify(x, n):
    
    def eval_frac(a, b):
        return a * b

    x_value, x_den = x.split()
    y_value, y_den = n.split()
    for i in range(max(int(x_value),int(y_value))):
        if eval_frac(int(x_value),int(x_den))*eval_frac(int(y_value),int(y_den)) != eval_frac(int(x_value),int(x_den))*eval_frac(int(y_value),int(y_den)):
            return False
    return True
----------------------------------------------------------------


def simplify(x, n):
    
    def eval_frac(a, b):
        return a * b

    x_value, x_den = x.split()
    y_value, y_den = n.split()
    has_same_denom = x_den == y_den
    if has_same_denom:
        x_value = eval_frac(int(x_value), int(x_den))
        y_value = eval_frac(int(y_value), int(y_den))
        if x_value == y_value:
            return True
        return False
    if (y_den != '1'):
        x_value = eval_frac(int(x_value), int(x_den))
        y_value = eval_frac(int(y_value), int(y_den))
        if y_value <= x_value <= y_value:
            return True
        return False
    return False
----------------------------------------------------------------


def simplify(x, n):
    
    def eval_frac(a, b):
        return a * b

    x_value, x_den = x.split()
    y_value, y_den = n.split()
    has_same_den = x_den == y_den
    if has_same_den:
        x_value = eval_frac(int(x_value), int(x_den))
        y_value = eval_frac(int(y_value), int(y_den))
        return x_value == y_value
    return False
----------------------------------------------------------------


def simplify(x, n):
    
    def eval_frac(a, b):
        return a * b

    x_value, x_den = x.split()
    y_value, y_den = n.split()
    has_same_den = x_den == y_den
    if has_same_den:
        return eval_frac(int(x_value), int(y_value)) == int(x_value)
    return False
----------------------------------------------------------------


def simplify(x, n):
    
    def eval_expr(expr):
        return eval(expr)
    x_denom = int(x.split()[1])
    n_denom = int(n.split()[1])
    x_num = int(x.split()[0])
    n_num = int(n.split()[0])
    if eval_expr(x_num/x_denom * n_num/n_denom) == eval_expr(x_num/x_denom * n_num/n_denom):
        return True
    return False
----------------------------------------------------------------


def order_by_points(nums):
    
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key = digits_sum)
----------------------------------------------------------------


def order_by_points(nums):
    
    def digits_sum(num):
        neg = 1
        if num < 0: num, neg = -1 * num, -1 
        num = [int(i) for i in str(num)]
        num[0] = num[0] * neg
        return sum(num)
    return sorted(nums, key = digits_sum)
----------------------------------------------------------------


def order_by_points(nums):
    
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key = digits_sum)
----------------------------------------------------------------


def order_by_points(nums):
    
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key = digits_sum)
----------------------------------------------------------------


def order_by_points(nums):
    
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key = digits_sum)
----------------------------------------------------------------


def order_by_points(nums):
    
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key = digits_sum)
----------------------------------------------------------------


def order_by_points(nums):
    
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key = digits_sum)
----------------------------------------------------------------


def order_by_points(nums):
    
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key = digits_sum)
----------------------------------------------------------------


def order_by_points(nums):
    
    def digits_sum(num):
        neg = 1
        if num < 0: num, neg = -1 * num, -1 
        num = [int(i) for i in str(num)]
        num[0] = num[0] * neg
        return sum(num)
    return sorted(nums, key = digits_sum)
----------------------------------------------------------------


def order_by_points(nums):
    
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key = digits_sum)
----------------------------------------------------------------


def specialFilter(nums):
    
    
    return sum(x for x in nums if x > 10 and x > str(10))
----------------------------------------------------------------


def specialFilter(nums):
    
    
    return sum(x for x in nums if x > 10 and x < 100)
----------------------------------------------------------------


def specialFilter(nums):
    
    
    return sum(x for x in nums if x > 10 and x %2==1)
----------------------------------------------------------------


def specialFilter(nums):
    
    
    return sum(x for x in nums if x > 10 and x modulo(2) !=0)
----------------------------------------------------------------


def specialFilter(nums):
    
    
    return sum(x for x in nums if x > 10 and x %2==1)
----------------------------------------------------------------


def specialFilter(nums):
    
    
    return sum(x for x in nums if x > 10 and x %2==1)
----------------------------------------------------------------


def specialFilter(nums):
    
    
    return sum(x for x in nums if x > 10 and x > str(10)[2:])
----------------------------------------------------------------


def specialFilter(nums):
    
    
    return sum(x for x in nums if x > 10 and x > str(10))
----------------------------------------------------------------


def specialFilter(nums):
    
    
    
    return sum(x for x in nums if x > 10 and x > str(10))
----------------------------------------------------------------


def specialFilter(nums):
    
    
    return sum(x for x in nums if x > 10 and x modulo(2) != 0)
----------------------------------------------------------------


def get_max_triples(n):
    
    
    def get_triple(i, j, k):
        
        return i * i - i + j * j - j + k * k - k  

    
    return sum((x, y, z) for i in range(1, n) for j in range(i, n) for k in range(j, n) if get_triple(i, j, k) % 3 == 0)
----------------------------------------------------------------


def get_max_triples(n):
    
    def get_triple(i, j, k):
        return i*i - i + j*j - j + k*k - k  

    A = []
    for i in range(1, n+1):
        A.append( get_triple(i, j, k))  
    return sum(A)
----------------------------------------------------------------


def get_max_triples(n):
    
    def get_triple(i, j, k):
        return (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)
    
    return sum(get_triple(i, j, k) for i in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n))
----------------------------------------------------------------


def get_max_triples(n):
    
    A = []
    for i in range(1, n+1):
        A.append(i * i - i + 1)

    ans = 0
    for i in range(n):
        for j in range(i + 1, n):
            for k in range(j + 1, n):
                if (A[i] + A[j] + A[k]) % 3 == 0:
                    ans += 1
    return ans
----------------------------------------------------------------


def get_max_triples(n):
    
    def get_triple(i, j, k):
        return (i*i - i + 1, j*j - j + 1, k*k - k + 1)

    a = []
    for i in range(1, n+1):
        a.append(get_triple(i, j, k))
    return sum(x for x, y, z in a if y*y <= x or x <= y*y <= k or y <= k*k)
----------------------------------------------------------------


def get_max_triples(n):
    
    def get_triple(i):
        return (i*i - i + 1, i + j + k , i)
    
    triples = set()
    for i in range(1,n+1):
        for j in range(i+1,n+1):
            for k in range(j+1,n+1):
                triples.add( get_triple(i,j,k) )
    return len(triples)
----------------------------------------------------------------


def get_max_triples(n):
    
    def get_triple(i, j, k):
        return i * i - i + j * j - j + k * k - k
    A = []
    for i in range(1, n+1):
        A.append(get_triple(i, j, k))
    return sum(A)
----------------------------------------------------------------


def get_max_triples(n):
    
    def get_triple(i, j, k):
        return (i*i - i + 1) + (j*j - j + 1) + (k*k - k + 1)

    a = []
    for i in range(1, n+1):
        a.append(get_triple(i, j, k))
    return sum(x for x in a if x%3==0)
----------------------------------------------------------------


def get_max_triples(n):
    
    
    def get_triple(i, j, k):
        return i * i - i + j * j - j + k * k - k  
    
    return sum((x, y, z) for x in range(1, n+1) for y in range(x, n+1) for z in range(y, n+1) if get_triple(x, y, z) % 3 == 0)
----------------------------------------------------------------


def get_max_triples(n):
    
    def get_triple(i, j, k):
        return i*i - i + j*j - j + k*k - k  
    
    return sum((x, y, z) for x in range(1, n+1) for y in range(x, n+1) for z in range(y, n+1) if get_triple(x, y, z)%3==0)
----------------------------------------------------------------


def bf(planet1, planet2):
    
    def get_planet_name(num):
        planet_dict = {
            0: 'Mercury',
            1: 'Venus',
            2: 'Earth',
            3: 'Mars',
            4: 'Jupiter',
            5: 'Saturn',
            6: 'Uranus',
            7: 'Neptune'
        }
        return planet_dict[num]
    
    if (planet1 not in get_planet_name() or planet2 not in get_planet_name() or planet1 == planet2):
        return []
    if (get_planet_name(planet1) < get_planet_name(planet2) )
      
      return [( get_planet_name(x), get_planet_name(y), x <=> y) for x, y in 
                zip(( get_planet_name(planet1) if get_planet_name(planet1) < get_planet_name(planet2)  
                     else get_planet_name(planet2) if get_planet_name(planet1) > get_planet_name(planet2) 
                     else get_planet_name(planet1) ),( get_planet_name(planet2) if get_planet_name(planet1) < get_planet_name(planet2)  
                     else get_planet_name(planet1) if get_planet_name(planet1) > get_planet_name(planet2) 
                     else get_planet_name(planet2) )
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
----------------------------------------------------------------


def bf(planet1, planet2):
    
    def get_planet_name(num):
        planet_dict = {
            0: 'Mercury',
            1: 'Venus',
            2: 'Earth',
            3: 'Mars',
            4: 'Jupiter',
            5: 'Saturn',
            6: 'Uranus',
            7: 'Neptune'
        }
        return planet_dict[num]
    
    if (planet1 not in get_planet_name() or planet2 not in get_planet_name() or planet1 == planet2):
        return ()
    planet_1_pos = get_planet_name().index(planet1)
    planet_2_pos = get_planet_name().index(planet2)
    if (planet_1_pos < planet_2_pos):
        return (get_planet_name()[planet_1_pos + 1 : planet_2_pos])
    else:
        return (get_planet_name()[planet_2_pos + 1 : planet_1_pos])
----------------------------------------------------------------


def bf(planet1, planet2):
    
    def get_planet_name(num):
        planet_dict = {
            0: 'Mercury',
            1: 'Venus',
            2: 'Earth',
            3: 'Mars',
            4: 'Jupiter',
            5: 'Saturn',
            6: 'Uranus',
            7: 'Neptune'
        }
        return planet_dict[num]
    
    if (planet1 not in get_planet_name() or planet2 not in get_planet_name() or planet1 == planet2):
        return []
    if (get_planet_name(planet1) < get_planet_name(planet2) )
      
      return [( get_planet_name(x), get_planet_name(y), get_planet_name(x), get_planet_name(y), get_planet_name(x), get_planet_name(y), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x
----------------------------------------------------------------


def bf(planet1, planet2):
    
    def get_planet_name(num):
        planet_dict = {
            0: 'Mercury',
            1: 'Venus',
            2: 'Earth',
            3: 'Mars',
            4: 'Jupiter',
            5: 'Saturn',
            6: 'Uranus',
            7: 'Neptune'
        }
        return planet_dict[num]
    
    if (planet1 not in get_planet_name() or planet2 not in get_planet_name() or planet1 == planet2):
        return ()
    planet_1_pos = get_planet_name().index(planet1)
    planet_2_pos = get_planet_name().index(planet2)
    if (planet_1_pos < planet_2_pos):
        return (get_planet_name()[planet_1_pos + 1 : planet_2_pos])
    return (get_planet_name()[planet_2_pos + 1 : planet_1_pos])
----------------------------------------------------------------


def bf(planet1, planet2):
    
    
    planet_dict = {
                'Mercury': 0,
                'Venus': 1,
                'Earth': 2,
                'Mars': 3,
                'Jupiter': 4,
                'Saturn': 5,
                'Uranus': 6
                }
    
    if planet1 not in planet_dict or planet2 not in planet_dict or planet1 == planet2:
        return ()
    planet1_value = planet_dict[planet1]
    planet2_value = planet_dict[planet2]
    if planet1_value < planet2_value:
        return (planet2, )
    return (planet1, )
----------------------------------------------------------------


def bf(planet1, planet2):
    
    def get_planet_name(num):
        planet_names =  {  0: 'Mercury',
                       1: 'Venus',
                       2: 'Earth',
                       3: 'Mars',
                       4: 'Jupiter',
                       5: 'Saturn',
                       6: 'Uranus',
                       7: 'Neptune'
                      }
                    
    if (planet1 not in planet_names or planet2 not in planet_names
           or planet1 == planet2):
        return ()
    planet_1_pos = planet_names.index(planet1)
    planet_2_pos = planet_names.index(planet2)
    if (planet_1_pos < planet_2_pos):
        return (planet_names[planet_1_pos + 1],  planet_names[planet_2_pos])
    return (planet_names[planet_2_pos + 1],  planet_names[planet_1_pos])
----------------------------------------------------------------


def bf(planet1, planet2):
    
    
    planet_dict = {
        :  {  :  8,
                :  7,
                :  6,
                :  5,
                :  4,
                :  3,
                :  2,
                :  1,
                :  0
                },
        :  {  :  8,
                :  7,
                :  6,
                :  5,
                :  4,
                :  3,
                :  2,
                :  1,
                :  0
                }
    }
    
    if planet1 not in planet_dict or planet2 not in planet_dict or planet1 == planet2:
        return ()
    planet1_value = planet_dict[type(planet1)][0]
    planet2_value = planet_dict[type(planet2)][0]
    if planet1_value > planet2_value:
        return (planet2, )
    return (planet1, )
----------------------------------------------------------------


def bf(planet1, planet2):
    
    def get_planet_name(num):
        planet_names =  { 0:  ,  1:  ,  2:  ,  3:  ,  4:  ,  5:  ,  6:  ,  7:  ,  8:  }
        return planet_names[num]
    
    if (planet1 not in get_planet_name() or planet2 not in get_planet_name() or planet1 == planet2):
        return []
    if ( get_planet_name(( get_planet_name(planet1) ).find( ) ) <= get_planet_name(( get_planet_name(planet2) ).find( )) ):
        return [ get_planet_name(x) for x in range(8) if get_planet_name(x) > get_planet_name(( get_planet_name(planet1) ).find( )) if get_planet_name(x) < get_planet_name(( get_planet_name(planet2) ).find( )) ]
    return [ get_planet_name(x) for x in range(8) if get_planet_name(x) > get_planet_name(( get_planet_name(planet2) ).find( )) if get_planet_name(x) < get_planet_name(( get_planet_name(planet1) ).find( )) ]
----------------------------------------------------------------


def bf(planet1, planet2):
    
    def get_planet_name(num):
        planet_dict = {
            0: 'Mercury',
            1: 'Venus',
            2: 'Earth',
            3: 'Mars',
            4: 'Jupiter',
            5: 'Saturn',
            6: 'Uranus',
            7: 'Neptune'
        }
        return planet_dict[num]
    
    if (planet1 not in get_planet_name() or planet2 not in get_planet_name() or planet1 == planet2):
        return []
    if (get_planet_name(planet1) < get_planet_name(planet2) )
      
      return [( get_planet_name(x), get_planet_name(y), get_planet_name(x), get_planet_name(y), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x), get_planet_name(x
----------------------------------------------------------------


def bf(planet1, planet2):
    
    def get_planet_name(num):
        planet_names =  { 0:  ->  , 1:  ->  , 2:  ->  , 3:  ->  , 4:  ->  , 5:  ->  , 6:  ->  , 7:  ->  , }
        return planet_names[num]
    
    if get_planet_name(planet1) not in  or get_planet_name(planet2) not in  or get_planet_name(planet1) == get_planet_name(planet2) :
        return []
    if get_planet_name(planet1) < get_planet_name(planet2) :
        return ( get_planet_name(planet1) , get_planet_name(planet2) )
    return ( get_planet_name(planet2) , get_planet_name(planet1) )
----------------------------------------------------------------


def sorted_list_sum(lst):
    
    return sorted(sorted(lst), key=len)
----------------------------------------------------------------


def sorted_list_sum(lst):
    
    return sorted(sorted(lst), key=len)
----------------------------------------------------------------


def sorted_list_sum(lst):
    
    return sorted(sorted(lst), key=len)
----------------------------------------------------------------


def sorted_list_sum(lst):
    
    return sorted(sorted(lst), key=len)
----------------------------------------------------------------


def sorted_list_sum(lst):
    
    return sorted(sorted(lst), key=len)
----------------------------------------------------------------


def sorted_list_sum(lst):
    
    return sorted(sorted(lst), key=len)
----------------------------------------------------------------


def sorted_list_sum(lst):
    
    return sorted(sorted(lst), key=len)
----------------------------------------------------------------


def sorted_list_sum(lst):
    
    return sorted(sorted(lst), key=len)
----------------------------------------------------------------


def sorted_list_sum(lst):
    
    return sorted(sorted(lst), key=len)
----------------------------------------------------------------


def sorted_list_sum(lst):
    
    return sorted(sorted(lst), key=len)
----------------------------------------------------------------


def x_or_y(n, x, y):
    
    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
----------------------------------------------------------------


def x_or_y(n, x, y):
    
    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
----------------------------------------------------------------


def x_or_y(n, x, y):
    
    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
----------------------------------------------------------------


def x_or_y(n, x, y):
    
    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
----------------------------------------------------------------


def x_or_y(n, x, y):
    
    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
----------------------------------------------------------------


def x_or_y(n, x, y):
    
    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
----------------------------------------------------------------


def x_or_y(n, x, y):
    
    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
----------------------------------------------------------------


def x_or_y(n, x, y):
    
    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
----------------------------------------------------------------


def x_or_y(n, x, y):
    
    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
----------------------------------------------------------------


def x_or_y(n, x, y):
    
    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
----------------------------------------------------------------


def double_the_difference(lst):
    
    return sum([x**2 for x in lst if x > 0 and x%2==1 and x < 10])
----------------------------------------------------------------


def double_the_difference(lst):
    
    return sum([x**2 for x in lst if x > 0 and x%2==1 and x < 10])
----------------------------------------------------------------


def double_the_difference(lst):
    
    return sum([x**2 for x in lst if x > 0 and x%2==1 and x < 10])
----------------------------------------------------------------


def double_the_difference(lst):
    
    return sum([x**2 for x in lst if x > 0 and x%2==1 and x < 10])
----------------------------------------------------------------


def double_the_difference(lst):
    
    return sum([x**2 for x in lst if x > 0 and x%2==1 and x < 10])
----------------------------------------------------------------


def double_the_difference(lst):
    
    return sum([x**2 for x in lst if x > 0 and x%2==1 and x < 10])
----------------------------------------------------------------


def double_the_difference(lst):
    
    return sum([x**2 for x in lst if x > 0 and x%2==1 and x < 10])
----------------------------------------------------------------


def double_the_difference(lst):
    
    return sum([x**2 for x in lst if x > 0 and x%2==1 and x < 10])
----------------------------------------------------------------


def double_the_difference(lst):
    
    return sum([x**2 for x in lst if x > 0 and x%2==1 and x < 10])
----------------------------------------------------------------


def double_the_difference(lst):
    
    return sum([x**2 for x in lst if x > 0 and x%2==1 and x < 10])
----------------------------------------------------------------


def compare(game,guess):
    
    return [abs(x-y) for x,y in zip(game,guess)]
----------------------------------------------------------------


def compare(game,guess):
    
    return [abs(x-y) for x,y in zip(game,guess)]
----------------------------------------------------------------


def compare(game,guess):
    
    return [abs(x-y) for x,y in zip(game,guess)]
----------------------------------------------------------------


def compare(game,guess):
    
    return [abs(x-y) for x,y in zip(game,guess)]
----------------------------------------------------------------


def compare(game,guess):
    
    return [abs(x-y) for x,y in zip(game,guess)]
----------------------------------------------------------------


def compare(game,guess):
    
    return [abs(x-y) for x,y in zip(game,guess)]
----------------------------------------------------------------


def compare(game,guess):
    
    return [abs(x-y) for x,y in zip(game,guess)]
----------------------------------------------------------------


def compare(game,guess):
    
    return [abs(x-y) for x,y in zip(game,guess)]
----------------------------------------------------------------


def compare(game,guess):
    
    return [abs(x-y) for x,y in zip(game,guess)]
----------------------------------------------------------------


def compare(game,guess):
    
    return [abs(x-y) for x,y in zip(game,guess)]
----------------------------------------------------------------


def Strongest_Extension(class_name, extensions):
    
    def get_strength(name):
        caps = 0
        smalls = 0
        for letter in name:
            if letter.isupper():
                caps += 1
            if letter.islower():
                smalls += 1
        return caps - smalls
----------------------------------------------------------------


def Strongest_Extension(class_name, extensions):
    
    def get_strength(name):
        caps = 0
        smalls = 0
        for letter in name:
            if letter.isupper():
                caps += 1
            if letter.islower():
                smalls += 1
        return caps - smalls
----------------------------------------------------------------


def Strongest_Extension(class_name, extensions):
    
    def get_strength(x):
        caps = 0
        smalls = 0
        for s in x:
            if s.isupper():
                caps += 1
            if s.islower():
                smalls += 1
        return caps - smalls
----------------------------------------------------------------


def Strongest_Extension(class_name, extensions):
    
    def get_strength(x):
        caps = 0
        smalls = 0
        for s in x:
            if s.isupper():
                caps += 1
            if s.islower():
                smalls += 1
        return caps - smalls
----------------------------------------------------------------


def Strongest_Extension(class_name, extensions):
    
    def get_strength(name):
        caps = 0
        smalls = 0
        for letter in name:
            if letter.isupper():
                caps += 1
            if letter.islower():
                smalls += 1
        return caps - smalls
----------------------------------------------------------------


def Strongest_Extension(class_name, extensions):
    
    
    
    return class_name +  +max(extensions, key=lambda x: (-len(set(x)), x))
----------------------------------------------------------------


def Strongest_Extension(class_name, extensions):
    
    
    
    def get_strength(name):
        caps = 0
        smalls = 0
        for letter in name:
            if letter.isupper():
                caps += 1
            if letter.islower():
                smalls += 1
        return caps - smalls
----------------------------------------------------------------


def Strongest_Extension(class_name, extensions):
    
    def get_strength(name):
        caps = 0
        smalls = 0
        for letter in name:
            if letter.isupper():
                caps += 1
            if letter.islower():
                smalls += 1
        return caps - smalls
----------------------------------------------------------------


def Strongest_Extension(class_name, extensions):
    
    def get_strength(x):
        caps = 0
        smalls = 0
        for s in x:
            if s.isupper():
                caps += 1
            if s.islower():
                smalls += 1
        return caps - smalls
----------------------------------------------------------------


def Strongest_Extension(class_name, extensions):
    
    def get_strength(name):
        caps = 0
        smalls = 0
        for letter in name:
            if letter.isupper():
                caps += 1
            if letter.islower():
                smalls += 1
        return caps - smalls
----------------------------------------------------------------


def cycpattern_check(a , b):
    
    
    def rotate(text):
        return text[1:]+text[0]
    
    if(b in a)or(b in rotate(a)):
        return True
    return False
----------------------------------------------------------------


def cycpattern_check(a , b):
    
    
    def rotate(s , r): -> bool:
        
        return (r == s) or (r == s[1:] + s[0])

    
    return any( rotate(b , r)for r in b)
----------------------------------------------------------------


def cycpattern_check(a , b):
    
    
    def rotate(text):
        return text[1:]+text[0]
    
    if(b in a)or(b in rotate(a)):
        return True
    return False
----------------------------------------------------------------


def cycpattern_check(a , b):
    
    
    def rotate(s , r): -> bool:
        
        return s[len(r) :  ] == r  or  in rotate(s ,  )


    return bool(b in a  or rotate(b , a)  or rotate(b ,  ) in a)
----------------------------------------------------------------


def cycpattern_check(a , b):
    
    
    l = len(b)
    pat = b+b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
----------------------------------------------------------------


def cycpattern_check(a , b):
    
    
    l = len(b)
    pat = b+b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
----------------------------------------------------------------


def cycpattern_check(a , b):
    
    
    def rotate(text):
        return text[1:]+text[0]
    
    if(b in a)or(b in rotate(a)):
        return True
    return False
----------------------------------------------------------------


def cycpattern_check(a , b):
    
    
    def rotate(text):
        return text[1:]+text[0]
    
    if(b in a)or(b in rotate(a)):
        return True
    return False
----------------------------------------------------------------


def cycpattern_check(a , b):
    
    
    l = len(b)
    pat = b+b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
----------------------------------------------------------------


def cycpattern_check(a , b):
    
    
    l = len(b)
    pat = b+b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
----------------------------------------------------------------


def even_odd_count(num):
    
    even_count = 0
    odd_count = 0

    if num < 0:
        num = -num

    while num > 0:
        if num % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
        num //= 10

    return (even_count, odd_count)
----------------------------------------------------------------


def even_odd_count(num):
    
    def get_digits(x):
        return list(str(abs(x)))
    even_count = sum(c in get_digits(x) for x in get_digits(num) if c != get_digits(num)[-1])
    odd_count = len(str(abs(num))) - 2*even_count
    return (even_count, odd_count)
----------------------------------------------------------------


def even_odd_count(num):
    
    even_count = 0
    odd_count = 0

    if num < 0:
        num = -num

    while num > 0:
        if num % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
        num //= 10

    return (even_count, odd_count)
----------------------------------------------------------------


def even_odd_count(num):
    
    def even_or_odd(x):
        if x < 0:
            x = -x
        evens = 0
        odds = 0
        if x >= 10 or x <= -10:
            even_or_odd(x // 10)
            even_or_odd(x % 10)
            if x < 0:
                odds += 1; else: odds += 0;
                
            evens += 1; else: evens += 0;

        return (evens, odds)

    two = even_or_od(num)
    return (two[0] + two[1],)
----------------------------------------------------------------


def even_odd_count(num):
    
    def get_digits(x):
        return list(str(abs(x)))
    even_count = 0
    odd_count = 0
    for digit in get_digits(num):
        if int(digit)%2 == 0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
----------------------------------------------------------------


def even_odd_count(num):
    
    def get_digits(x):
        return list(abs(x))
    even_count = sum(x for x in get_digits(num) if x % 2 == 0)
    odd_count = sum(x for x in get_digits(num) if x % 2 == 1)
    return (even_count, odd_count)
----------------------------------------------------------------


def even_odd_count(num):
    
    def get_digits(x):
        return list(str(abs(x)))
    even_count = sum(c in get_digits(x) for x in range(abs(num), num+1) for c in get_digits(x))
    odd_count = sum(c in get_digits(x) for x in range(abs(num), num-1) for c in get_digits(x))
    return (even_count, odd_count)
----------------------------------------------------------------


def even_odd_count(num):
    
    even_count = 0
    odd_count = 0

    if num < 0:
        num = -num

    while num > 0:
        if num % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
        num //= 10

    return (even_count, odd_count)
----------------------------------------------------------------


def even_odd_count(num):
    
    def get_digits(x):
        return list(str(abs(x)))
    even_count = sum(c in get_digits(x) for x in range(abs(num), num + 1) for c in get_digits(x))
    odd_count = sum(c in get_digits(x) for x in range(abs(num - 1), num, -1) for c in get_digits(x))
    return (even_count, odd_count)
----------------------------------------------------------------


def even_odd_count(num):
    
    even_count = 0
    odd_count = 0

    if num < 0:
        num = -num

    while num > 0:
        if num % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
        num //= 10

    return (even_count, odd_count)
----------------------------------------------------------------


def int_to_mini_roman(number):
    
    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]
    sym = [, , , , , , , , , , , ]
    i = 12
    res = 
    while number:
        div = number // num[i]
        number %= num[i]
        while div:
            res += sym[i]
            div -= 1
        i -= 1
    return res.lower()
----------------------------------------------------------------


def int_to_mini_roman(number):
    
    value = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]
    symbol = [, , , , , , , , , , , ]
    i = 12
    res = 
    while number:
        div = number // value[i]
        number %= value[i]
        while div:
            res += symbol[i]
            div -= 1
        i -= 1
    return res.lower()
----------------------------------------------------------------


def int_to_mini_roman(number):
    
    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]
    sym = [, , , , , , , , , , , ]
    i = 12
    res = 
    while number:
        div = number // num[i]
        number %= num[i]
        while div:
            res += sym[i]
            div -= 1
        i -= 1
    return res.lower()
----------------------------------------------------------------


def int_to_mini_roman(number):
    
    value = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]
    symbol = [, , , , , , , , , , , ]
    i = 12
    res = 
    while number:
        div = number // value[i]
        number %= value[i]
        while div:
            res += symbol[i]
            div -= 1
        i -= 1
    return res.lower()
----------------------------------------------------------------


def int_to_mini_roman(number):
    
    value = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]
    symbol = [, , , , , , , , , , , ]
    i = 12
    res = 
    while number:
        div = number // value[i]
        number %= value[i]
        while div:
            res += symbol[i]
            div -= 1
        i -= 1
    return res.lower()
----------------------------------------------------------------


def int_to_mini_roman(number):
    
    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000]
    sym = [, , , , , , , , , ]
    i = 12
    res = 
    while number:
        div = number // num[i] 
        number %= num[i] 
        while div:
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
----------------------------------------------------------------


def int_to_mini_roman(number):
    
    value = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]
    symbol = [, , , , , , , , , , , ]
    i = 12
    res = 
    while number:
        div = number // value[i]
        number %= value[i]
        while div:
            res += symbol[i]
            div -= 1
        i -= 1
    return res.lower()
----------------------------------------------------------------


def int_to_mini_roman(number):
    
    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]
    sym = [, , , , , , , , , , , ]
    i = 12
    res = 
    while number:
        div = number // num[i]
        number %= num[i]
        while div:
            res += sym[i]
            div -= 1
        i -= 1
    return res.lower()
----------------------------------------------------------------


def int_to_mini_roman(number):
    
    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]
    sym = [, , , , , , , , , , ]
    i = 12
    res = 
    while number:
        div = number // num[i]
        number %= num[i]
        while div:
            res += sym[i]
            div -= 1
        i -= 1
    return res.lower()
----------------------------------------------------------------


def int_to_mini_roman(number):
    
    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]
    sym = [, , , , , , , , , , ]
    i = 12
    res = 
    while number:
        div = number // num[i]
        number %= num[i]
        while div:
            res += sym[i]
            div -= 1
        i -= 1
    return res.lower()
----------------------------------------------------------------


def right_angle_triangle(a, b, c):
    
    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
----------------------------------------------------------------


def right_angle_triangle(a, b, c):
    
    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
----------------------------------------------------------------


def right_angle_triangle(a, b, c):
    
    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
----------------------------------------------------------------


def right_angle_triangle(a, b, c):
    
    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
----------------------------------------------------------------


def right_angle_triangle(a, b, c):
    
    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
----------------------------------------------------------------


def right_angle_triangle(a, b, c):
    
    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
----------------------------------------------------------------


def right_angle_triangle(a, b, c):
    
    return a*a == b*b + c*c or c*c == a*a + b*b
----------------------------------------------------------------


def right_angle_triangle(a, b, c):
    
    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
----------------------------------------------------------------


def right_angle_triangle(a, b, c):
    
    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
----------------------------------------------------------------


def right_angle_triangle(a, b, c):
    
    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
----------------------------------------------------------------


def find_max(words):
    
    return sorted(words, key=lambda x: (-len(set(x)), x))[0]
----------------------------------------------------------------


def find_max(words):
    
    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
----------------------------------------------------------------


def find_max(words):
    
    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
----------------------------------------------------------------


def find_max(words):
    
    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
----------------------------------------------------------------


def find_max(words):
    
    return sorted(words, key=lambda x: (-len(set(x)), x))[0]
----------------------------------------------------------------


def find_max(words):
    
    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
----------------------------------------------------------------


def find_max(words):
    
    return sorted(words, key=lambda x: (-len(set(x)), x))[0]
----------------------------------------------------------------


def find_max(words):
    
    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
----------------------------------------------------------------


def find_max(words):
    
    return sorted(words, key=lambda x: (-len(set(x)), x))[0]
----------------------------------------------------------------


def find_max(words):
    
    return sorted(words, key=lambda x: (-len(set(x)), x))[0]
----------------------------------------------------------------

def eat(number, need, remaining):
    
    if(need <= remaining):
        return [ number + need , remaining-need ]
    return [ number + remaining , 0]
----------------------------------------------------------------


def eat(number, need, remaining):
    
    if(need <= remaining):
        return [ number + need , remaining-need ]
    return [ number + remaining , 0]
----------------------------------------------------------------

def eat(number, need, remaining):
    
    if(need <= remaining):
        return [ number + need , remaining-need ]
    return [ number + remaining , 0]
----------------------------------------------------------------


def eat(number, need, remaining):
    
    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
----------------------------------------------------------------


def eat(number, need, remaining):
    
    if(need <= remaining):
        return [ number + need , remaining-need ]
    return [ number + remaining , 0]
----------------------------------------------------------------

def eat(number, need, remaining):
    
    if(need <= remaining):
        return [ number + need , remaining-need ]
    return [ number + remaining , 0]
----------------------------------------------------------------


def eat(number, need, remaining):
    
    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
----------------------------------------------------------------

def eat(number, need, remaining):
    
    if(need <= remaining):
        return [ number + need , remaining-need ]
    return [ number + remaining , 0]
----------------------------------------------------------------

def eat(number, need, remaining):
    
    if(need <= remaining):
        return [ number + need , remaining-need ]
    return [ number + remaining , 0]
----------------------------------------------------------------


def eat(number, need, remaining):
    
    if(need <= remaining):
        return [ number + need , remaining-need ]
    return [ number + remaining , 0]
----------------------------------------------------------------


def do_algebra(operator, operand):
    
    def eval_exp(lst):
        
        def eval_one_op(oprt, operands):
            
            if oprt == '+':
                return  operator(operator(operands), operator(operands))
            if oprt == '-':
                return  operator(operator(operands), operator(operands))
            if oprt == '*':
                return  operator(operator(operands), operator(operands))
            if oprt == '//':
                return  operator(operator(operands), operator(operands))
            if oprt == '**':
                return  operator(operator(operands), operator(operands))

        return eval_one_op(operator(lst), operand(lst))
    
    return eval_exp(operator), eval_exp(operand)
----------------------------------------------------------------


def do_algebra(operator, operand):
    
    def build_expression(ops, vals):
        
        def eval_exp(ops, vals):
            
            if len(ops) == 0:
                return vals[-1]
            
            ind = 0
            pre_ops = []

            while ind < len(ops):
                
                m = 1
                
                while m < len(ops):
                    if ops[m] == operator[ind]:
                        pre_ops.append(operator[ind])
                        vals.append(eval_exp(ops[m+1:],vals))
                        vals.pop(0)
                        ops.pop(m)
                        m += 1;
                ind += 1            

            while len(pre_ops) > 0:
                ind = 0
                m = 1
                
                while ind < len(ops):
                    if ops[m] == pre_ops[ind]:
                        pre_ops.append(operator[ind])
                        vals.append(eval_exp(ops[m+1:],vals))
                        vals.pop(0)
                        ops.pop(m)
                        m += 1;
                    ind += 1            

                
                
            return vals[-1]
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
----------------------------------------------------------------


def do_algebra(operator, operand):
    
    def build_expression(ops, vals):
        
        def eval_exp(ops, vals):
            
            if len(ops) == 1:
                return vals[0]
            
            ind = 0
            pre_value = None
            while(ind < len(ops)):
                
                value = eval_exp(ops[ind], vals[ind])
                
                if ops[ind] == '+':
                    value += pre_value
                elif ops[ind] == '-':
                    value -= pre_value
                elif ops[ind] == '*':
                    value *= pre_value
                elif ops[ind] == '//':
                    value //= pre_value
                elif ops[ind] == **2:
                    value **= 2
                ind += 1
                pre_value = value
                
            return value
        return eval_exp(ops, vals)
    
    return build_expression(operator, operand)
----------------------------------------------------------------


def do_algebra(operator, operand):
    
    def build_expression(ops, vals):
        
        def eval_exp(ops, vals):
            
            if len(ops) == len(vals):
                
                ind = len(ops) - 1
                while(ind > 0):
                    if ops[ind] == :
                        vals[ind] = eval_exp(ops[:ind], vals[:ind])
                    ind -= 1
                vals[0] = eval(ops[-1] + str(vals[-1]))
                
                return  
            
        return None
        
    operator = list(operator)
    operand = list(operand)
    operator.extend(operand)
    return build_expression(operator, operand)
----------------------------------------------------------------


def do_algebra(operator, operand):
    
    def build_expression(ops, vals):
        
        def eval_exp(ops, vals):
            
            if len(ops) == 1:
                return vals[0]
            
            ind = 0
            pre_ops = []

            while ind < len(ops):
                
                m = 1
                
                while(m > 0):
                    if(ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] 
                m = m * 10
                pre_ops.append(ops[ind])
                ind += 1

                
                
            ind = 0
            ops[:] = operator
            vals[:] = vals
            ans = 0

            while(ind < len(pre_ops)):

                pos = ops.index(pre_ops[ind])
----------------------------------------------------------------


def do_algebra(operator, operand):
    
    def build_expression(ops, vals):
        
        def build_sub_expression(ops, vals):
            
            if len(ops) == len(vals):
                return build_sub_expression(ops[1:], vals[1:]) + ops[0] * vals[0]
            else:
                return build_sub_expression(ops[1:], vals[1:])
                
        return build_sub_expression(ops, vals)
    
    return build_expression(operator, operand)
----------------------------------------------------------------


def do_algebra(operator, operand):
    
    def eval_exp(lst):
        
        def eval_term(term):
            if isinstance(term, list):
                return term[0] * eval_term(term[1:])
            else:
                return term
        return sum(term for term in lst)
    return eval_exp(operator), eval_exp(operand)
----------------------------------------------------------------


def do_algebra(operator, operand):
    
    def build_expression(ops, vals):
        
        def build_sub_expression(ops, vals):
            
            if len(ops) == 1:
                return vals[-1]
            
            middle = len(ops) // 2
            left = build_sub_expression(ops[:middle], vals[:middle])
            right = build_sub_expression(ops[middle:], vals[middle:])
            
            if ops[-1] == '+':
                return left + right
            if ops[-1] == '-':
                return left - right
            if ops[-1] == '*':
                return left * right
            if ops[-1] == '//':
                return left // right
            if ops[-1] == '**':
                return left ** right
            
        return build_sub_expression(ops, vals)
    
    return build_expression(operator, operand)
----------------------------------------------------------------


def do_algebra(operator, operand):
    
    def build_expression(ops, vals):
        
        def eval_exp(ops, vals):
            
            if len(ops) == len(vals):
                
                ind = len(ops) - 1
                while(ind > 0):
                    if(ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind] ==  or ops[ind]):
                        vals[ind] = eval_exp(ops[:ind],vals[:ind])
                        vals[ind] = eval(str(ops[ind]) + str(vals[ind])) 

                    ind -= 1

                vals[0] = eval(str(ops[-1]) + str(vals[-1]))
                
                
            elif(ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or ops[-1] ==  or
----------------------------------------------------------------


def do_algebra(operator, operand):
    
    def build_expression(ops, vals):
        
        def build_sub_expression(ops, vals):
            
            if len(ops) == 1:
                return vals[-1]
            else:
                return build_sub_expression(ops[:-1], vals[:-1]) + build_sub_expression(ops[1:], vals[1:])
                
        return build_sub_expression(ops, vals)
    
    return build_expression(operator, operand)
----------------------------------------------------------------


def solve(s):
    
    flg = 0
    tstr = []
    for i in s:
        if i.isalpha():
            if i.islower():
                tstr.append(i.swapcase())
                flg = 1
            else:
                tstr.append(i.upper())
                flg = 1
        else:
            tstr.append(i)
    if flg == 0:
        return 
    else:
        return 
        .join(tstr)
----------------------------------------------------------------


def solve(s):
    
    flg = 0
    tstr = []
    for i in s:
        if i.isalpha():
            if i.islower():
                tstr.append(i.swapcase())
                flg = 1
            else:
                tstr.append(i.upper())
                flg = 1
        else:
            tstr.append(i)
    if flg == 0:
        return 
    else:
        return 
        .join(tstr)
----------------------------------------------------------------


def solve(s):
    
    flg = 0
    idx = 0
    for i in s:
        if i.isalpha():
            s[idx] = i.swapcase()
            flg = 1
        idx += 1
    if flg == 0:
        return s[len(s) ::-1]
    return s
----------------------------------------------------------------


def solve(s):
    
    flg = 0
    
    for i in range(len(s)):
        if s[i].isalpha():
            if s[i].islower():
                s = s[i:] + s[:i]
                flg = 1
            else:
                s = s[i:] + s[:i]
                flg = 1
                
    if flg == 0:
        return s[::-1]
    return s
----------------------------------------------------------------


def solve(s):
    
    flg = 0
    tstr = []
    for i in s:
        if i.isalpha():
            if i.islower():
                tstr.append(i.swapcase())
                flg = 1
            else:
                tstr.append(i.upper())
                flg = 1
        else:
            tstr.append(i)
    if flg == 0:
        return 
    else:
        return 
        .join(tstr)
----------------------------------------------------------------


def solve(s):
    
    flg = 0
    tstr = []
    for i in s:
        if i.isalpha():
            if i.islower():
                tstr.append(i.swapcase())
                flg = 1
            else:
                tstr.append(i.upper())
                flg = 1
        else:
            tstr.append(i)
    if flg == 0:
        return 
    else:
        return 
        .join(tstr)
----------------------------------------------------------------


def solve(s):
    
    flg = 0
    tstr = []
    for i in s:
        if i.isalpha():
            if i.islower():
                tstr.append(i.swapcase())
                flg = 1
            else:
                tstr.append(i.upper())
                flg = 1
        else:
            tstr.append(i)
    if flg == 0:
        return 
    else:
        return 
        .join(tstr)
----------------------------------------------------------------


def solve(s):
    
    flg = 0
    idx = 0
    for i in s:
        if i.isalpha():
            s[idx] = i.swapcase()
            flg = 1
        idx += 1
    if flg == 0:
        return s[len(s) ::-1]
    return s
----------------------------------------------------------------


def solve(s):
    
    flg = 0
    
    for i in range(len(s)):
        if s[i].isalpha():
            if s[i].islower():
                s = s[i:] + s[:i]
                flg = 1
            else:
                s = s[i:] + s[:i]
                flg = 1
                
    if flg == 0:
        return s[len(s)::-1]
    return s
----------------------------------------------------------------


def solve(s):
    
    flg = 0
    str_len = len(s)
    for i in range(str_len):
        if s[i].isalpha():
            if (s[i].islower() and s[i].isupper()):  or (s[i].isupper() and s[i].islower()):  
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                

----------------------------------------------------------------


def string_to_md5(text):
    
    if text == :
        return None
    return hashlib.md5(text.encode()).hexdigest()
----------------------------------------------------------------


def string_to_md5(text):
    
    if text == :
        return None
    return hashlib.md5(text.encode('utf-8')).hexdigest()
----------------------------------------------------------------


def string_to_md5(text):
    
    if text == :
        return None
    return hashlib.md5(text.encode()).hexdigest()
----------------------------------------------------------------


def string_to_md5(text):
    
    if text == :
        return None
    return hashlib.md5(text.encode()).hexdigest()
----------------------------------------------------------------


def string_to_md5(text):
    
    if text == :
        return None
    return hashlib.md5(text.encode()).hexdigest()
----------------------------------------------------------------


def string_to_md5(text):
    
    if text == :
        return None
    return hashlib.md5(text.encode()).hexdigest()
----------------------------------------------------------------


def string_to_md5(text):
    
    if text == :
        return None
    return hashlib.md5(text.encode('utf-8')).hexdigest()
----------------------------------------------------------------


def string_to_md5(text):
    
    import hashlib
    return hashlib.md5(text.encode('utf-8')).hexdigestdigest() if text else None
----------------------------------------------------------------


def string_to_md5(text):
    
    import hashlib
    return hashlib.md5(text.encode('utf-8')).hexdigestdigest() if text else None
----------------------------------------------------------------


def string_to_md5(text):
    
    if text == :
        return None
    return hashlib.md5(text.encode('utf-8')).hexdigest()
----------------------------------------------------------------


def generate_integers(a, b):
    
    if a > b:
        a, b = b, a
    
    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [] if lower == upper else range(lower, upper+1)
----------------------------------------------------------------


def generate_integers(a, b):
    
    if a > b:
        a, b = b, a
    
    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [] if lower == upper else range(lower, upper+1)
----------------------------------------------------------------


def generate_integers(a, b):
    
    if(b < a):
        a, b = b, a
    
    even_digits = []
    for i in range(max(a), min(b)):
        if i % 2 == 0:
            even_digits.append(i)
    return even_digits
----------------------------------------------------------------


def generate_integers(a, b):
    
    if a > b:
        a, b = b, a
    
    lower = max(2, min(a, b))
    upper = min(8, max(a, b))
    
    return [i for i in range(lower, upper+1) if i % 2 == 0]
----------------------------------------------------------------


def generate_integers(a, b):
    
    if a > b:
        a, b = b, a
    
    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [] if lower > upper else [i for i in range(lower, upper+1) if i % 2 == 0]
----------------------------------------------------------------


def generate_integers(a, b):
    
    if a > b:
        a, b = b, a
    
    lower = max(2, min(a, b))
    upper = min(8, max(a, b))
    
    return [i for i in range(lower, upper+1) if i % 2 == 0]
----------------------------------------------------------------


def generate_integers(a, b):
    
    if a > b:
        a, b = b, a
    
    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [] if lower == upper else range(lower, upper+1)
----------------------------------------------------------------


def generate_integers(a, b):
    
    if a > b:
        a, b = b, a
    
    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [] if lower > upper else [i for i in range(lower, upper+1) if i % 2 == 0]
----------------------------------------------------------------


def generate_integers(a, b):
    
    if a > b:
        a, b = b, a
    
    lower = max(2, min(a, b))
    upper = min(8, max(a, b))
    
    return [i for i in range(lower, upper+1) if i % 2 == 0]
----------------------------------------------------------------


def generate_integers(a, b):
    
    if a > b:
        a, b = b, a
    
    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
----------------------------------------------------------------
