{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \n    import math\n    \n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = math.sqrt((elem - elem2) ** 2)\n                if distance < threshold:\n                    return True\n\n    return False"}
{"task_id": "HumanEval/0", "completion": "\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \n    \n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False"}
{"task_id": "HumanEval/0", "completion": "from typing import List, Tuple\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \n    def close_to(n: float, m: float) -> bool:\n        return abs(n - m) < threshold\n    \n    return any(close_to(n, m) for n, m in zip(numbers, numbers[1:]))"}
{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \n    \n    def close_enough(x, y):\n        return abs(x - y) <= threshold\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if close_enough(elem, elem2):\n                    return True\n\n    return False"}
{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \n    \n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False"}
{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False"}
{"task_id": "HumanEval/0", "completion": "from typing import List, Any\n\n\ndef has_close_elements(numbers: List[Any], threshold: float) -> bool:\n    \n    # Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    def close_enough(x, y):\n        return abs(x - y) < threshold\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if close_enough(elem, elem2):\n                    return True\n\n    return False"}
{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n\n    for n1, n2 in zip(numbers, numbers[1:]):\n        distance = abs(n1 - n2)\n        if distance < threshold:\n            return True\n\n    return False"}
{"task_id": "HumanEval/0", "completion": "\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \n    \n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False"}
{"task_id": "HumanEval/0", "completion": "\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \n    import math\n    for n1, n2 in zip(numbers, numbers[1:]):\n        distance = math.sqrt((n1 - n2) ** 2)\n        if distance < threshold:\n            return True\n    return False"}
